// Generated from oracle/plsql.g4 by ANTLR 4.13.2
package com.github.frostycityman.inlinesqlcommentor.sql.parser.generated;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, A_LETTER=4, ADD=5, AFTER=6, AGENT=7, AGGREGATE=8, 
		ALL=9, ALLOCATE=10, ALLOW=11, ALTER=12, ALWAYS=13, ANALYZE=14, AND=15, 
		ANY=16, ANYSCHEMA=17, ARCHIVE=18, ARRAY=19, AS=20, ASC=21, ASSOCIATE=22, 
		AT=23, ATTRIBUTE=24, AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29, 
		BASIC=30, BASICFILE=31, BATCH=32, BEFORE=33, BEGIN=34, BETWEEN=35, BFILE=36, 
		BINARY=37, BINARY_DOUBLE=38, BINARY_FLOAT=39, BINARY_INTEGER=40, BITMAP=41, 
		BUFFER_POOL=42, BUILD=43, BLOB=44, BLOCK=45, BODY=46, BOOLEAN=47, BOTH=48, 
		BREADTH=49, BULK=50, BY=51, BYTE=52, C_LETTER=53, CACHE=54, CALL=55, CANONICAL=56, 
		CASCADE=57, CASE=58, CAST=59, CHAR=60, CHAR_CS=61, CHARACTER=62, CHECK=63, 
		CHECKPOINT=64, CHR=65, CHUNK=66, CLOB=67, CLOSE=68, CLUSTER=69, COALESCE=70, 
		COLLECT=71, COLUMN=72, COLUMNS=73, COLUMN_VALUE=74, COMMENT=75, COMMIT=76, 
		COMMITTED=77, COMPACT=78, COMPATIBILITY=79, COMPILE=80, COMPLETE=81, COMPOUND=82, 
		COMPRESS=83, CONCAT=84, CONNECT=85, CONNECT_BY_ROOT=86, CONSTANT=87, CONSTRAINT=88, 
		CONSTRAINTS=89, CONSTRUCTOR=90, CONTENT=91, CONTEXT=92, CONTINUE=93, CONVERT=94, 
		CORRUPT_XID=95, CORRUPT_XID_ALL=96, COST=97, COUNT=98, CREATE=99, CREATEDB=100, 
		CREATEROLE=101, CREATION=102, CROSS=103, CUBE=104, CURRENT=105, CURRENT_USER=106, 
		CURSOR=107, CUSTOMDATUM=108, CYCLE=109, DATA=110, DATABASE=111, DATAFILE=112, 
		DATE=113, DAY=114, DB_ROLE_CHANGE=115, DBTIMEZONE=116, DDL=117, DEBUG=118, 
		DEALLOCATE=119, DEC=120, DECIMAL=121, DECLARE=122, DECODE=123, DECOMPOSE=124, 
		DECREMENT=125, DECRYPT=126, DEDUPLICATE=127, DEFAULT=128, DEFAULTS=129, 
		DEFERRABLE=130, DEFERRED=131, DEFINER=132, DELETE=133, DEMAND=134, DEPTH=135, 
		DESC=136, DETERMINISTIC=137, DIMENSION=138, DISABLE=139, DISALLOW=140, 
		DISASSOCIATE=141, DISTINCT=142, DOCUMENT=143, DOUBLE=144, DROP=145, DSINTERVAL_UNCONSTRAINED=146, 
		EACH=147, EDITIONING=148, ELEMENT=149, ELSE=150, ELSIF=151, EMPTY=152, 
		ENABLE=153, ENCODING=154, ENCRYPT=155, END=156, ENFORCED=157, ENTITYESCAPING=158, 
		ERR=159, ERRORS=160, ESCAPE=161, EVALNAME=162, EXCEPT=163, EXCEPTION=164, 
		EXCEPTION_INIT=165, EXCEPTIONS=166, EXCLUDE=167, EXCLUSIVE=168, EXECUTE=169, 
		EXISTS=170, EXIT=171, EXPLAIN=172, EXTENT=173, EXTERNAL=174, EXTRACT=175, 
		FAILURE=176, FALSE=177, FAST=178, FETCH=179, FILESYSTEM_LIKE_LOGGING=180, 
		FINAL=181, FIRST=182, FIRST_VALUE=183, FLASHBACK=184, FLASH_CACHE=185, 
		FLOAT=186, FOLLOWING=187, FOLLOWS=188, FOR=189, FORALL=190, FORCE=191, 
		FOREIGN=192, FREELIST=193, FREELISTS=194, FREEPOOLS=195, FROM=196, FULL=197, 
		FUNCTION=198, GENERATED=199, GLOBAL=200, GOTO=201, GRANT=202, GROUP=203, 
		GROUPS=204, GROUPING=205, HASH=206, HAVING=207, HIDE=208, HIGH=209, HOUR=210, 
		IDENTIFIED=211, IDENTIFIER=212, IF=213, IGNORE=214, ILIKE=215, IMMEDIATE=216, 
		IN=217, INCLUDE=218, INCLUDING=219, INCREMENT=220, INDENT=221, INDEX=222, 
		INDEXED=223, INDEXTYPE=224, INDICATOR=225, INDICES=226, INFINITE=227, 
		INITIAL=228, INITIALLY=229, INITRANS=230, INLINE=231, INNER=232, INOUT=233, 
		INSERT=234, INSTANCE=235, INSTANTIABLE=236, INSTEAD=237, INT=238, INTEGER=239, 
		INTERSECT=240, INTERVAL=241, INTO=242, INVALIDATE=243, INVISIBLE=244, 
		IS=245, ISOLATION=246, ITERATE=247, JAVA=248, JOIN=249, KEEP=250, KEEP_DUPLICATES=251, 
		KEY=252, LANGUAGE=253, LAST=254, LAST_VALUE=255, LEADING=256, LEFT=257, 
		LESS=258, LEVEL=259, LEVELS=260, LIBRARY=261, LIKE=262, LIKE2=263, LIKE4=264, 
		LIKEC=265, LIMIT=266, LIST=267, LOCAL=268, LOB=269, LOBS=270, LOCATOR=271, 
		LOCK=272, LOCKED=273, LOG=274, LOGGING=275, LOGOFF=276, LOGIN=277, LOGON=278, 
		LONG=279, LOOP=280, LOW=281, MAIN=282, MAP=283, MAPPING=284, MASTER=285, 
		MATCHED=286, MAXEXTENTS=287, MAXVALUE=288, MEASURES=289, MEDIUM=290, MEMBER=291, 
		MERGE=292, MINEXTENTS=293, MINIMIZE=294, MINUS=295, MINUTE=296, MINVALUE=297, 
		MLSLABEL=298, MODE=299, MODEL=300, MODIFY=301, MONTH=302, MOVEMENT=303, 
		MULTISET=304, NAME=305, NAN=306, NATURAL=307, NATURALN=308, NAV=309, NCHAR=310, 
		NCHAR_CS=311, NCLOB=312, NESTED=313, NEVER=314, NEW=315, NEXT=316, NO=317, 
		NOAUDIT=318, NOCACHE=319, NOCOMPRESS=320, NOCOPY=321, NOCYCLE=322, NOENTITYESCAPING=323, 
		NOLOGGING=324, NOMAPPING=325, NOMAXVALUE=326, NOMINIMIZE=327, NOMINVALUE=328, 
		NONE=329, NONSCHEMA=330, NOORDER=331, NOPARALLEL=332, NORELY=333, NOROWDEPENDENCIES=334, 
		NOSCHEMACHECK=335, NOSORT=336, NOT=337, NOVALIDATE=338, NOWAIT=339, NVL=340, 
		NULL=341, NULLS=342, NUMBER=343, NUMERIC=344, NVARCHAR2=345, MATERIALIZED=346, 
		OBJECT=347, OF=348, OFF=349, OID=350, OIDINDEX=351, OLD=352, OLTP=353, 
		ON=354, ONLY=355, OPEN=356, OPTIMAL=357, OPTION=358, OR=359, ORADATA=360, 
		ORDER=361, ORDINALITY=362, OSERROR=363, OUT=364, OUTER=365, OVER=366, 
		OVERFLOW=367, OVERRIDING=368, PACKAGE=369, PARALLEL=370, PARALLEL_ENABLE=371, 
		PARAMETERS=372, PARENT=373, PARTITION=374, PASSING=375, PATH=376, PCTFREE=377, 
		PCTINCREASE=378, PCTTHRESHOLD=379, PCTUSED=380, PCTVERSION=381, PERCENT_ROWTYPE=382, 
		PERCENT_TYPE=383, PIPELINED=384, PIVOT=385, PLAN=386, PLS_INTEGER=387, 
		PARTITIONS=388, POSITION=389, POSITIVE=390, POSITIVEN=391, PRAGMA=392, 
		PREBUILT=393, PRECEDING=394, PRECISION=395, PRESENT=396, PRESERVE=397, 
		PRIMARY=398, PRIOR=399, PROCEDURE=400, PUBLIC=401, PURGE=402, QUERY=403, 
		RAISE=404, RANGE=405, RAW=406, READ=407, READS=408, REAL=409, REBUILD=410, 
		RECORD=411, RECORDS_PER_BLOCK=412, RECYCLE=413, REDUCED=414, REF=415, 
		REFERENCE=416, REFERENCES=417, REFERENCING=418, REFRESH=419, REJECT=420, 
		REKEY=421, RELATIONAL=422, RELIES_ON=423, RELY=424, RENAME=425, REPLACE=426, 
		RESPECT=427, RESTRICT_REFERENCES=428, RESULT=429, RESULT_CACHE=430, RETENTION=431, 
		RETURN=432, RETURNING=433, REUSE=434, REVERSE=435, REVOKE=436, REWRITE=437, 
		RIGHT=438, ROLE=439, ROLLBACK=440, ROLLUP=441, ROW=442, ROWDEPENDENCIES=443, 
		ROWID=444, ROWS=445, RULES=446, SALT=447, SAMPLE=448, SAVE=449, SAVEPOINT=450, 
		SCHEMA=451, SCHEMACHECK=452, SCN=453, SCOPE=454, SEARCH=455, SECOND=456, 
		SECUREFILE=457, SEED=458, SEGMENT=459, SELECT=460, SELF=461, SEQUENCE=462, 
		SEQUENTIAL=463, SERIALIZABLE=464, SERIALLY_REUSABLE=465, SERVERERROR=466, 
		SESSIONTIMEZONE=467, SET=468, SETS=469, SETTINGS=470, SHARE=471, SHOW=472, 
		SHRINK=473, SHUTDOWN=474, SIBLINGS=475, SIGNTYPE=476, SIMPLE_INTEGER=477, 
		SINGLE=478, SIZE=479, SKIP_=480, SMALLINT=481, SNAPSHOT=482, SOME=483, 
		SORT=484, SPACE_KEYWORD=485, SPECIFICATION=486, SQLDATA=487, SQLERROR=488, 
		STANDALONE=489, START=490, STARTUP=491, STATEMENT=492, STATEMENT_ID=493, 
		STATIC=494, STATISTICS=495, STORAGE=496, STORE=497, STRING=498, SUBMULTISET=499, 
		SUBPARTITION=500, SUBPARTITIONS=501, SUBSTITUTABLE=502, SUBSTRING=503, 
		SUBTYPE=504, SUCCESS=505, SUPPLEMENTAL=506, SUSPEND=507, SYSTEM=508, TABLE=509, 
		TABLES=510, TABLESPACE=511, TEMPLATE=512, TEMPORARY=513, THAN=514, THE=515, 
		THEN=516, TIME=517, TIMESTAMP=518, TIMESTAMP_LTZ_UNCONSTRAINED=519, TIMESTAMP_TZ_UNCONSTRAINED=520, 
		TIMESTAMP_UNCONSTRAINED=521, TIMEZONE_ABBR=522, TIMEZONE_HOUR=523, TIMEZONE_MINUTE=524, 
		TIMEZONE_REGION=525, TO=526, TO_CHAR=527, TO_DATE=528, TRAILING=529, TRANSACTION=530, 
		TRANSLATE=531, TREAT=532, TRIGGER=533, TRIM=534, TRUE=535, TRUNCATE=536, 
		TRUSTED=537, TYPE=538, UNBOUNDED=539, UNDER=540, UNION=541, UNIQUE=542, 
		UNLIMITED=543, UNPIVOT=544, UNTIL=545, UNUSABLE=546, UNUSED=547, UPDATE=548, 
		UPDATED=549, UPGRADE=550, UPSERT=551, UROWID=552, USE=553, USING=554, 
		VALIDATE=555, VALUE=556, VALUES=557, VARCHAR=558, VARCHAR2=559, VARIABLE=560, 
		VARRAY=561, VARRAYS=562, VARYING=563, VERBOSE=564, VERSION=565, VERSIONS=566, 
		VIEW=567, VIRTUAL=568, VISIBLE=569, WAIT=570, WARNING=571, WELLFORMED=572, 
		WHEN=573, WHENEVER=574, WHERE=575, WHILE=576, WITH=577, WITHOUT=578, WITHIN=579, 
		WORK=580, WRITE=581, XDB=582, XML=583, XMLAGG=584, XMLATTRIBUTES=585, 
		XMLCAST=586, XMLCOLATTVAL=587, XMLELEMENT=588, XMLEXISTS=589, XMLFOREST=590, 
		XMLINDEX=591, XMLNAMESPACES=592, XMLPARSE=593, XMLPI=594, XMLQUERY=595, 
		XMLROOT=596, XMLSCHEMA=597, XMLSERIALIZE=598, XMLTABLE=599, XMLTYPE=600, 
		YEAR=601, YES=602, YMINTERVAL_UNCONSTRAINED=603, ZONE=604, PREDICTION=605, 
		PREDICTION_BOUNDS=606, PREDICTION_COST=607, PREDICTION_DETAILS=608, PREDICTION_PROBABILITY=609, 
		PREDICTION_SET=610, CUME_DIST=611, DENSE_RANK=612, LISTAGG=613, PERCENT_RANK=614, 
		PERCENTILE_CONT=615, PERCENTILE_DISC=616, RANK=617, AVG=618, CORR=619, 
		LAG=620, LEAD=621, MAX=622, MEDIAN=623, MIN=624, NTILE=625, RATIO_TO_REPORT=626, 
		ROW_NUMBER=627, SUM=628, VARIANCE=629, REGR_=630, STDDEV=631, VAR_=632, 
		COVAR_=633, NATIONAL_CHAR_STRING_LIT=634, BIT_STRING_LIT=635, HEX_STRING_LIT=636, 
		DOUBLE_PERIOD=637, PERIOD=638, UNSIGNED_INTEGER=639, APPROXIMATE_NUM_LIT=640, 
		CHAR_STRING=641, DELIMITED_ID=642, PERCENT=643, AMPERSAND=644, LEFT_PAREN=645, 
		RIGHT_PAREN=646, DOUBLE_ASTERISK=647, ASTERISK=648, PLUS_SIGN=649, MINUS_SIGN=650, 
		COMMA=651, SOLIDUS=652, AT_SIGN=653, ASSIGN_OP=654, BINDVAR=655, COLON=656, 
		SEMICOLON=657, LESS_THAN_OR_EQUALS_OP=658, LESS_THAN_OP=659, GREATER_THAN_OR_EQUALS_OP=660, 
		NOT_EQUAL_OP=661, CARRET_OPERATOR_PART=662, TILDE_OPERATOR_PART=663, EXCLAMATION_OPERATOR_PART=664, 
		GREATER_THAN_OP=665, CONCATENATION_OP=666, VERTICAL_BAR=667, EQUALS_OP=668, 
		LEFT_BRACKET=669, RIGHT_BRACKET=670, INTRODUCER=671, SPACES=672, SINGLE_LINE_COMMENT=673, 
		MULTI_LINE_COMMENT=674, PROMPT=675, REGULAR_ID=676, ZV=677;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_sql_explain = 3, RULE_unit_statement = 4, RULE_unit_statement_body = 5, 
		RULE_create_role = 6, RULE_role_option = 7, RULE_refresh_materialized_view = 8, 
		RULE_create_materialized_view = 9, RULE_create_mv_refresh = 10, RULE_build_clause = 11, 
		RULE_alter_permission = 12, RULE_permission_options = 13, RULE_create_view = 14, 
		RULE_view_options = 15, RULE_view_alias_constraint = 16, RULE_create_index = 17, 
		RULE_cluster_index_clause = 18, RULE_cluster_name = 19, RULE_index_attributes = 20, 
		RULE_tablespace = 21, RULE_key_compression = 22, RULE_sort_or_nosort = 23, 
		RULE_visible_or_invisible = 24, RULE_parallel_clause = 25, RULE_table_index_clause = 26, 
		RULE_index_expr = 27, RULE_index_properties = 28, RULE_global_partitioned_index = 29, 
		RULE_index_partitioning_clause = 30, RULE_partition_name = 31, RULE_literal = 32, 
		RULE_string_function = 33, RULE_expressions = 34, RULE_individual_hash_partitions = 35, 
		RULE_partitioning_storage_clause = 36, RULE_table_compression = 37, RULE_lob_partitioning_storage = 38, 
		RULE_lob_item = 39, RULE_lob_segname = 40, RULE_varray_item = 41, RULE_hash_partitions_by_quantity = 42, 
		RULE_hash_partition_quantity = 43, RULE_local_partitioned_index = 44, 
		RULE_on_range_partitioned_table = 45, RULE_on_list_partitioned_table = 46, 
		RULE_on_hash_partitioned_table = 47, RULE_on_comp_partitioned_table = 48, 
		RULE_index_subpartition_clause = 49, RULE_subpartition_name = 50, RULE_domain_index_clause = 51, 
		RULE_indextype = 52, RULE_odci_parameters = 53, RULE_local_domain_index_clause = 54, 
		RULE_xmlindex_clause = 55, RULE_local_xmlindex_clause = 56, RULE_bitmap_join_index_clause = 57, 
		RULE_create_table = 58, RULE_relational_table = 59, RULE_relational_properties = 60, 
		RULE_column_definition = 61, RULE_inline_ref_constraint = 62, RULE_virtual_column_definition = 63, 
		RULE_out_of_line_constraint = 64, RULE_foreign_key_clause = 65, RULE_on_delete_clause = 66, 
		RULE_out_of_line_ref_constraint = 67, RULE_supplemental_logging_props = 68, 
		RULE_supplemental_log_grp_clause = 69, RULE_log_grp = 70, RULE_supplemental_id_key_clause = 71, 
		RULE_physical_properties = 72, RULE_deferred_segment_creation = 73, RULE_segment_attributes_clause = 74, 
		RULE_physical_attributes_clause = 75, RULE_storage_clause = 76, RULE_size_clause = 77, 
		RULE_logging_clause = 78, RULE_column_properties = 79, RULE_object_type_col_properties = 80, 
		RULE_substitutable_column_clause = 81, RULE_nested_table_col_properties = 82, 
		RULE_nested_item = 83, RULE_object_properties = 84, RULE_inline_constraint = 85, 
		RULE_references_clause = 86, RULE_paren_column_list = 87, RULE_column_list = 88, 
		RULE_check_constraint = 89, RULE_constraint_state = 90, RULE_using_index_clause = 91, 
		RULE_varray_col_properties = 92, RULE_varray_storage_clause = 93, RULE_lob_storage_parameters = 94, 
		RULE_lob_parameters = 95, RULE_lob_retention_clause = 96, RULE_lob_deduplicate_clause = 97, 
		RULE_lob_compression_clause = 98, RULE_encryption_spec = 99, RULE_lob_storage_clause = 100, 
		RULE_xmltype_column_properties = 101, RULE_xmltype_storage = 102, RULE_xmlschema_spec = 103, 
		RULE_allow_or_disallow = 104, RULE_table_partitioning_clauses = 105, RULE_range_partitions = 106, 
		RULE_range_values_clause = 107, RULE_table_partition_description = 108, 
		RULE_list_partitions = 109, RULE_list_values_clause = 110, RULE_hash_partitions = 111, 
		RULE_composite_range_partitions = 112, RULE_subpartition_by_range = 113, 
		RULE_subpartition_by_list = 114, RULE_subpartition_template = 115, RULE_range_subpartition_desc = 116, 
		RULE_list_subpartition_desc = 117, RULE_individual_hash_subparts = 118, 
		RULE_hash_subpartition_quantity = 119, RULE_subpartition_by_hash = 120, 
		RULE_range_partition_desc = 121, RULE_hash_subparts_by_quantity = 122, 
		RULE_composite_list_partitions = 123, RULE_list_partition_desc = 124, 
		RULE_composite_hash_partitions = 125, RULE_reference_partitioning = 126, 
		RULE_reference_partition_desc = 127, RULE_system_partitioning = 128, RULE_enable_disable_clause = 129, 
		RULE_exceptions_clause = 130, RULE_row_movement_clause = 131, RULE_flashback_archive_clause = 132, 
		RULE_object_table = 133, RULE_object_table_substitution = 134, RULE_oid_clause = 135, 
		RULE_oid_index_clause = 136, RULE_xmltype_table = 137, RULE_xmltype_virtual_columns = 138, 
		RULE_drop_table = 139, RULE_alter_table = 140, RULE_alter_table_properties = 141, 
		RULE_alter_table_properties_1 = 142, RULE_supplemental_table_logging = 143, 
		RULE_allocate_extent_clause = 144, RULE_deallocate_unused_clause = 145, 
		RULE_upgrade_table_clause = 146, RULE_records_per_block_clause = 147, 
		RULE_alter_iot_clauses = 148, RULE_index_org_table_clause = 149, RULE_mapping_table_clause = 150, 
		RULE_index_org_overflow_clause = 151, RULE_alter_overflow_clause = 152, 
		RULE_add_overflow_clause = 153, RULE_shrink_clause = 154, RULE_alter_mapping_table_clause = 155, 
		RULE_constraint_clauses = 156, RULE_old_constraint_name = 157, RULE_new_constraint_name = 158, 
		RULE_drop_constraint_clause = 159, RULE_drop_primary_key_or_unique_or_generic_clause = 160, 
		RULE_column_clauses = 161, RULE_add_modify_drop_column_clauses = 162, 
		RULE_add_column_clause = 163, RULE_modify_column_clauses = 164, RULE_alter_column_clause = 165, 
		RULE_modify_col_properties = 166, RULE_modify_col_substitutable = 167, 
		RULE_drop_column_clause = 168, RULE_rename_column_clause = 169, RULE_old_column_name = 170, 
		RULE_new_column_name = 171, RULE_modify_collection_retrieval = 172, RULE_collection_item = 173, 
		RULE_modify_lob_storage_clause = 174, RULE_modify_lob_parameters = 175, 
		RULE_drop_function = 176, RULE_alter_function = 177, RULE_create_function_body = 178, 
		RULE_parallel_enable_clause = 179, RULE_partition_by_clause = 180, RULE_result_cache_clause = 181, 
		RULE_relies_on_part = 182, RULE_streaming_clause = 183, RULE_drop_package = 184, 
		RULE_alter_package = 185, RULE_create_package = 186, RULE_package_body = 187, 
		RULE_package_spec = 188, RULE_package_obj_spec = 189, RULE_procedure_spec = 190, 
		RULE_function_spec = 191, RULE_package_obj_body = 192, RULE_drop_procedure = 193, 
		RULE_alter_procedure = 194, RULE_create_procedure_body = 195, RULE_drop_trigger = 196, 
		RULE_alter_trigger = 197, RULE_create_trigger = 198, RULE_trigger_follows_clause = 199, 
		RULE_trigger_when_clause = 200, RULE_simple_dml_trigger = 201, RULE_for_each_row = 202, 
		RULE_compound_dml_trigger = 203, RULE_non_dml_trigger = 204, RULE_trigger_body = 205, 
		RULE_routine_clause = 206, RULE_compound_trigger_block = 207, RULE_timing_point_section = 208, 
		RULE_non_dml_event = 209, RULE_dml_event_clause = 210, RULE_dml_event_element = 211, 
		RULE_dml_event_nested_clause = 212, RULE_referencing_clause = 213, RULE_referencing_element = 214, 
		RULE_drop_type = 215, RULE_alter_type = 216, RULE_compile_type_clause = 217, 
		RULE_replace_type_clause = 218, RULE_alter_method_spec = 219, RULE_alter_method_element = 220, 
		RULE_alter_attribute_definition = 221, RULE_attribute_definition = 222, 
		RULE_alter_collection_clauses = 223, RULE_dependent_handling_clause = 224, 
		RULE_dependent_exceptions_part = 225, RULE_create_type = 226, RULE_type_definition = 227, 
		RULE_object_type_def = 228, RULE_object_as_part = 229, RULE_object_under_part = 230, 
		RULE_nested_table_type_def = 231, RULE_sqlj_object_type = 232, RULE_type_body = 233, 
		RULE_type_body_elements = 234, RULE_map_order_func_declaration = 235, 
		RULE_subprog_decl_in_type = 236, RULE_proc_decl_in_type = 237, RULE_func_decl_in_type = 238, 
		RULE_constructor_declaration = 239, RULE_modifier_clause = 240, RULE_object_member_spec = 241, 
		RULE_sqlj_object_type_attr = 242, RULE_element_spec = 243, RULE_element_spec_options = 244, 
		RULE_subprogram_spec = 245, RULE_type_procedure_spec = 246, RULE_type_function_spec = 247, 
		RULE_constructor_spec = 248, RULE_map_order_function_spec = 249, RULE_pragma_clause = 250, 
		RULE_pragma_elements = 251, RULE_type_elements_parameter = 252, RULE_drop_sequence = 253, 
		RULE_alter_sequence = 254, RULE_create_sequence = 255, RULE_sequence_spec = 256, 
		RULE_sequence_start_clause = 257, RULE_invoker_rights_clause = 258, RULE_compiler_parameters_clause = 259, 
		RULE_call_spec = 260, RULE_java_spec = 261, RULE_c_spec = 262, RULE_c_agent_in_clause = 263, 
		RULE_c_parameters_clause = 264, RULE_parameter = 265, RULE_default_value_part = 266, 
		RULE_declare_spec = 267, RULE_variable_declaration = 268, RULE_subtype_declaration = 269, 
		RULE_cursor_declaration = 270, RULE_parameter_spec = 271, RULE_exception_declaration = 272, 
		RULE_pragma_declaration = 273, RULE_record_declaration = 274, RULE_record_type_dec = 275, 
		RULE_field_spec = 276, RULE_record_var_dec = 277, RULE_table_declaration = 278, 
		RULE_table_type_dec = 279, RULE_table_indexed_by_part = 280, RULE_varray_type_def = 281, 
		RULE_table_var_dec = 282, RULE_seq_of_statements = 283, RULE_label_declaration = 284, 
		RULE_statement = 285, RULE_assignment_statement = 286, RULE_continue_statement = 287, 
		RULE_exit_statement = 288, RULE_goto_statement = 289, RULE_if_statement = 290, 
		RULE_elsif_part = 291, RULE_else_part = 292, RULE_loop_statement = 293, 
		RULE_cursor_loop_param = 294, RULE_forall_statement = 295, RULE_bounds_clause = 296, 
		RULE_between_bound = 297, RULE_lower_bound = 298, RULE_upper_bound = 299, 
		RULE_null_statement = 300, RULE_raise_statement = 301, RULE_return_statement = 302, 
		RULE_function_call = 303, RULE_body = 304, RULE_exception_handler = 305, 
		RULE_trigger_block = 306, RULE_block = 307, RULE_sql_statement = 308, 
		RULE_execute_immediate = 309, RULE_dynamic_returning_clause = 310, RULE_data_manipulation_language_statements = 311, 
		RULE_cursor_manipulation_statements = 312, RULE_close_statement = 313, 
		RULE_open_statement = 314, RULE_fetch_statement = 315, RULE_open_for_statement = 316, 
		RULE_transaction_control_statements = 317, RULE_set_transaction_command = 318, 
		RULE_set_constraint_command = 319, RULE_commit_statement = 320, RULE_write_clause = 321, 
		RULE_rollback_statement = 322, RULE_savepoint_statement = 323, RULE_explain_statement = 324, 
		RULE_select_statement = 325, RULE_subquery_factoring_clause = 326, RULE_factoring_element = 327, 
		RULE_search_clause = 328, RULE_cycle_clause = 329, RULE_subquery = 330, 
		RULE_subquery_operation_part = 331, RULE_query_block = 332, RULE_selected_element = 333, 
		RULE_from_clause = 334, RULE_table_ref_pivot = 335, RULE_table_ref = 336, 
		RULE_table_ref_aux = 337, RULE_join_clause = 338, RULE_join_on_part = 339, 
		RULE_join_using_part = 340, RULE_join_type = 341, RULE_query_partition_clause = 342, 
		RULE_flashback_query_clause = 343, RULE_pivot_clause = 344, RULE_pivot_element = 345, 
		RULE_pivot_for_clause = 346, RULE_pivot_in_clause = 347, RULE_pivot_in_clause_element = 348, 
		RULE_pivot_in_clause_elements = 349, RULE_unpivot_clause = 350, RULE_unpivot_in_clause = 351, 
		RULE_unpivot_in_elements = 352, RULE_hierarchical_query_clause = 353, 
		RULE_start_part = 354, RULE_group_by_clause = 355, RULE_group_by_elements = 356, 
		RULE_rollup_cube_clause = 357, RULE_grouping_sets_clause = 358, RULE_grouping_sets_elements = 359, 
		RULE_having_clause = 360, RULE_model_clause = 361, RULE_cell_reference_options = 362, 
		RULE_return_rows_clause = 363, RULE_reference_model = 364, RULE_main_model = 365, 
		RULE_model_column_clauses = 366, RULE_model_column_partition_part = 367, 
		RULE_model_column_list = 368, RULE_model_column = 369, RULE_model_rules_clause = 370, 
		RULE_model_rules_part = 371, RULE_model_rules_element = 372, RULE_cell_assignment = 373, 
		RULE_model_iterate_clause = 374, RULE_until_part = 375, RULE_order_by_clause = 376, 
		RULE_order_by_elements = 377, RULE_for_update_clause = 378, RULE_for_update_of_part = 379, 
		RULE_for_update_options = 380, RULE_limit_clause = 381, RULE_update_statement = 382, 
		RULE_update_set_clause = 383, RULE_column_based_update_set_clause = 384, 
		RULE_delete_statement = 385, RULE_insert_statement = 386, RULE_single_table_insert = 387, 
		RULE_multi_table_insert = 388, RULE_multi_table_element = 389, RULE_conditional_insert_clause = 390, 
		RULE_conditional_insert_when_part = 391, RULE_conditional_insert_else_part = 392, 
		RULE_insert_into_clause = 393, RULE_values_clause = 394, RULE_merge_statement = 395, 
		RULE_merge_update_clause = 396, RULE_merge_element = 397, RULE_merge_update_delete_part = 398, 
		RULE_merge_insert_clause = 399, RULE_selected_tableview = 400, RULE_lock_table_statement = 401, 
		RULE_wait_nowait_part = 402, RULE_lock_table_element = 403, RULE_lock_mode = 404, 
		RULE_general_table_ref = 405, RULE_static_returning_clause = 406, RULE_error_logging_clause = 407, 
		RULE_error_logging_into_part = 408, RULE_error_logging_reject_part = 409, 
		RULE_dml_table_expression_clause = 410, RULE_table_collection_expression = 411, 
		RULE_subquery_restriction_clause = 412, RULE_sample_clause = 413, RULE_seed_part = 414, 
		RULE_cursor_expression = 415, RULE_expression_list = 416, RULE_condition = 417, 
		RULE_expression = 418, RULE_is_part = 419, RULE_cursor_part = 420, RULE_multiset_type = 421, 
		RULE_relational_operator = 422, RULE_like_type = 423, RULE_like_escape_part = 424, 
		RULE_between_elements = 425, RULE_concatenation = 426, RULE_binary_expression = 427, 
		RULE_interval_expression = 428, RULE_model_expression = 429, RULE_model_expression_element = 430, 
		RULE_single_column_for_loop = 431, RULE_for_like_part = 432, RULE_for_increment_decrement_type = 433, 
		RULE_multi_column_for_loop = 434, RULE_unary_expression = 435, RULE_case_statement = 436, 
		RULE_simple_case_statement = 437, RULE_simple_case_when_part = 438, RULE_searched_case_statement = 439, 
		RULE_searched_case_when_part = 440, RULE_case_else_part = 441, RULE_atom = 442, 
		RULE_expression_or_vector = 443, RULE_vector_expr = 444, RULE_quantified_expression = 445, 
		RULE_standard_function = 446, RULE_aggregate_windowed_function = 447, 
		RULE_over_clause_keyword = 448, RULE_within_or_over_clause_keyword = 449, 
		RULE_standard_prediction_function_keyword = 450, RULE_over_clause = 451, 
		RULE_windowing_clause = 452, RULE_windowing_type = 453, RULE_windowing_elements = 454, 
		RULE_using_clause = 455, RULE_using_element = 456, RULE_collect_order_by_part = 457, 
		RULE_within_or_over_part = 458, RULE_cost_matrix_clause = 459, RULE_xml_passing_clause = 460, 
		RULE_xml_attributes_clause = 461, RULE_xml_namespaces_clause = 462, RULE_xml_table_column = 463, 
		RULE_xml_general_default_part = 464, RULE_xml_multiuse_expression_element = 465, 
		RULE_xmlroot_param_version_part = 466, RULE_xmlroot_param_standalone_part = 467, 
		RULE_xmlserialize_param_enconding_part = 468, RULE_xmlserialize_param_version_part = 469, 
		RULE_xmlserialize_param_ident_part = 470, RULE_sql_plus_command = 471, 
		RULE_whenever_command = 472, RULE_set_command = 473, RULE_exit_command = 474, 
		RULE_prompt_command = 475, RULE_show_errors_command = 476, RULE_partition_extension_clause = 477, 
		RULE_column_alias = 478, RULE_table_alias = 479, RULE_alias_quoted_string = 480, 
		RULE_where_clause = 481, RULE_current_of_clause = 482, RULE_into_clause = 483, 
		RULE_xml_column_name = 484, RULE_cost_class_name = 485, RULE_attribute_name = 486, 
		RULE_savepoint_name = 487, RULE_rollback_segment_name = 488, RULE_table_var_name = 489, 
		RULE_schema_name = 490, RULE_routine_name = 491, RULE_package_name = 492, 
		RULE_implementation_type_name = 493, RULE_parameter_name = 494, RULE_reference_model_name = 495, 
		RULE_main_model_name = 496, RULE_aggregate_function_name = 497, RULE_query_name = 498, 
		RULE_constraint_name = 499, RULE_label_name = 500, RULE_type_name = 501, 
		RULE_sequence_name = 502, RULE_exception_name = 503, RULE_function_name = 504, 
		RULE_procedure_name = 505, RULE_trigger_name = 506, RULE_variable_name = 507, 
		RULE_index_name = 508, RULE_cursor_name = 509, RULE_record_name = 510, 
		RULE_collection_name = 511, RULE_link_name = 512, RULE_column_name = 513, 
		RULE_role_name = 514, RULE_tableview_name = 515, RULE_dot_id = 516, RULE_star = 517, 
		RULE_keep_clause = 518, RULE_function_argument = 519, RULE_function_argument_analytic = 520, 
		RULE_function_argument_modeling = 521, RULE_respect_or_ignore_nulls = 522, 
		RULE_argument = 523, RULE_type_spec = 524, RULE_datatype = 525, RULE_precision_part = 526, 
		RULE_native_datatype_element = 527, RULE_bind_variable = 528, RULE_general_element = 529, 
		RULE_table_element = 530, RULE_constant = 531, RULE_numeric = 532, RULE_numeric_negative = 533, 
		RULE_quoted_string = 534, RULE_r_id = 535, RULE_id_expression = 536, RULE_not_equal_op = 537, 
		RULE_greater_than_or_equals_op = 538, RULE_less_than_or_equals_op = 539, 
		RULE_concatenation_op = 540, RULE_outer_join_sign = 541, RULE_regular_id = 542;
	private static String[] makeRuleNames() {
		return new String[] {
			"swallow_to_semi", "compilation_unit", "sql_script", "sql_explain", "unit_statement", 
			"unit_statement_body", "create_role", "role_option", "refresh_materialized_view", 
			"create_materialized_view", "create_mv_refresh", "build_clause", "alter_permission", 
			"permission_options", "create_view", "view_options", "view_alias_constraint", 
			"create_index", "cluster_index_clause", "cluster_name", "index_attributes", 
			"tablespace", "key_compression", "sort_or_nosort", "visible_or_invisible", 
			"parallel_clause", "table_index_clause", "index_expr", "index_properties", 
			"global_partitioned_index", "index_partitioning_clause", "partition_name", 
			"literal", "string_function", "expressions", "individual_hash_partitions", 
			"partitioning_storage_clause", "table_compression", "lob_partitioning_storage", 
			"lob_item", "lob_segname", "varray_item", "hash_partitions_by_quantity", 
			"hash_partition_quantity", "local_partitioned_index", "on_range_partitioned_table", 
			"on_list_partitioned_table", "on_hash_partitioned_table", "on_comp_partitioned_table", 
			"index_subpartition_clause", "subpartition_name", "domain_index_clause", 
			"indextype", "odci_parameters", "local_domain_index_clause", "xmlindex_clause", 
			"local_xmlindex_clause", "bitmap_join_index_clause", "create_table", 
			"relational_table", "relational_properties", "column_definition", "inline_ref_constraint", 
			"virtual_column_definition", "out_of_line_constraint", "foreign_key_clause", 
			"on_delete_clause", "out_of_line_ref_constraint", "supplemental_logging_props", 
			"supplemental_log_grp_clause", "log_grp", "supplemental_id_key_clause", 
			"physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
			"physical_attributes_clause", "storage_clause", "size_clause", "logging_clause", 
			"column_properties", "object_type_col_properties", "substitutable_column_clause", 
			"nested_table_col_properties", "nested_item", "object_properties", "inline_constraint", 
			"references_clause", "paren_column_list", "column_list", "check_constraint", 
			"constraint_state", "using_index_clause", "varray_col_properties", "varray_storage_clause", 
			"lob_storage_parameters", "lob_parameters", "lob_retention_clause", "lob_deduplicate_clause", 
			"lob_compression_clause", "encryption_spec", "lob_storage_clause", "xmltype_column_properties", 
			"xmltype_storage", "xmlschema_spec", "allow_or_disallow", "table_partitioning_clauses", 
			"range_partitions", "range_values_clause", "table_partition_description", 
			"list_partitions", "list_values_clause", "hash_partitions", "composite_range_partitions", 
			"subpartition_by_range", "subpartition_by_list", "subpartition_template", 
			"range_subpartition_desc", "list_subpartition_desc", "individual_hash_subparts", 
			"hash_subpartition_quantity", "subpartition_by_hash", "range_partition_desc", 
			"hash_subparts_by_quantity", "composite_list_partitions", "list_partition_desc", 
			"composite_hash_partitions", "reference_partitioning", "reference_partition_desc", 
			"system_partitioning", "enable_disable_clause", "exceptions_clause", 
			"row_movement_clause", "flashback_archive_clause", "object_table", "object_table_substitution", 
			"oid_clause", "oid_index_clause", "xmltype_table", "xmltype_virtual_columns", 
			"drop_table", "alter_table", "alter_table_properties", "alter_table_properties_1", 
			"supplemental_table_logging", "allocate_extent_clause", "deallocate_unused_clause", 
			"upgrade_table_clause", "records_per_block_clause", "alter_iot_clauses", 
			"index_org_table_clause", "mapping_table_clause", "index_org_overflow_clause", 
			"alter_overflow_clause", "add_overflow_clause", "shrink_clause", "alter_mapping_table_clause", 
			"constraint_clauses", "old_constraint_name", "new_constraint_name", "drop_constraint_clause", 
			"drop_primary_key_or_unique_or_generic_clause", "column_clauses", "add_modify_drop_column_clauses", 
			"add_column_clause", "modify_column_clauses", "alter_column_clause", 
			"modify_col_properties", "modify_col_substitutable", "drop_column_clause", 
			"rename_column_clause", "old_column_name", "new_column_name", "modify_collection_retrieval", 
			"collection_item", "modify_lob_storage_clause", "modify_lob_parameters", 
			"drop_function", "alter_function", "create_function_body", "parallel_enable_clause", 
			"partition_by_clause", "result_cache_clause", "relies_on_part", "streaming_clause", 
			"drop_package", "alter_package", "create_package", "package_body", "package_spec", 
			"package_obj_spec", "procedure_spec", "function_spec", "package_obj_body", 
			"drop_procedure", "alter_procedure", "create_procedure_body", "drop_trigger", 
			"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
			"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
			"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
			"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
			"referencing_clause", "referencing_element", "drop_type", "alter_type", 
			"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
			"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
			"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
			"type_definition", "object_type_def", "object_as_part", "object_under_part", 
			"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
			"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
			"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
			"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
			"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
			"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
			"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
			"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
			"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
			"declare_spec", "variable_declaration", "subtype_declaration", "cursor_declaration", 
			"parameter_spec", "exception_declaration", "pragma_declaration", "record_declaration", 
			"record_type_dec", "field_spec", "record_var_dec", "table_declaration", 
			"table_type_dec", "table_indexed_by_part", "varray_type_def", "table_var_dec", 
			"seq_of_statements", "label_declaration", "statement", "assignment_statement", 
			"continue_statement", "exit_statement", "goto_statement", "if_statement", 
			"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
			"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
			"raise_statement", "return_statement", "function_call", "body", "exception_handler", 
			"trigger_block", "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
			"data_manipulation_language_statements", "cursor_manipulation_statements", 
			"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
			"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
			"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
			"explain_statement", "select_statement", "subquery_factoring_clause", 
			"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
			"query_block", "selected_element", "from_clause", "table_ref_pivot", 
			"table_ref", "table_ref_aux", "join_clause", "join_on_part", "join_using_part", 
			"join_type", "query_partition_clause", "flashback_query_clause", "pivot_clause", 
			"pivot_element", "pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", 
			"pivot_in_clause_elements", "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", 
			"hierarchical_query_clause", "start_part", "group_by_clause", "group_by_elements", 
			"rollup_cube_clause", "grouping_sets_clause", "grouping_sets_elements", 
			"having_clause", "model_clause", "cell_reference_options", "return_rows_clause", 
			"reference_model", "main_model", "model_column_clauses", "model_column_partition_part", 
			"model_column_list", "model_column", "model_rules_clause", "model_rules_part", 
			"model_rules_element", "cell_assignment", "model_iterate_clause", "until_part", 
			"order_by_clause", "order_by_elements", "for_update_clause", "for_update_of_part", 
			"for_update_options", "limit_clause", "update_statement", "update_set_clause", 
			"column_based_update_set_clause", "delete_statement", "insert_statement", 
			"single_table_insert", "multi_table_insert", "multi_table_element", "conditional_insert_clause", 
			"conditional_insert_when_part", "conditional_insert_else_part", "insert_into_clause", 
			"values_clause", "merge_statement", "merge_update_clause", "merge_element", 
			"merge_update_delete_part", "merge_insert_clause", "selected_tableview", 
			"lock_table_statement", "wait_nowait_part", "lock_table_element", "lock_mode", 
			"general_table_ref", "static_returning_clause", "error_logging_clause", 
			"error_logging_into_part", "error_logging_reject_part", "dml_table_expression_clause", 
			"table_collection_expression", "subquery_restriction_clause", "sample_clause", 
			"seed_part", "cursor_expression", "expression_list", "condition", "expression", 
			"is_part", "cursor_part", "multiset_type", "relational_operator", "like_type", 
			"like_escape_part", "between_elements", "concatenation", "binary_expression", 
			"interval_expression", "model_expression", "model_expression_element", 
			"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
			"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
			"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
			"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
			"standard_function", "aggregate_windowed_function", "over_clause_keyword", 
			"within_or_over_clause_keyword", "standard_prediction_function_keyword", 
			"over_clause", "windowing_clause", "windowing_type", "windowing_elements", 
			"using_clause", "using_element", "collect_order_by_part", "within_or_over_part", 
			"cost_matrix_clause", "xml_passing_clause", "xml_attributes_clause", 
			"xml_namespaces_clause", "xml_table_column", "xml_general_default_part", 
			"xml_multiuse_expression_element", "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
			"xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
			"xmlserialize_param_ident_part", "sql_plus_command", "whenever_command", 
			"set_command", "exit_command", "prompt_command", "show_errors_command", 
			"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
			"where_clause", "current_of_clause", "into_clause", "xml_column_name", 
			"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
			"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
			"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
			"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
			"exception_name", "function_name", "procedure_name", "trigger_name", 
			"variable_name", "index_name", "cursor_name", "record_name", "collection_name", 
			"link_name", "column_name", "role_name", "tableview_name", "dot_id", 
			"star", "keep_clause", "function_argument", "function_argument_analytic", 
			"function_argument_modeling", "respect_or_ignore_nulls", "argument", 
			"type_spec", "datatype", "precision_part", "native_datatype_element", 
			"bind_variable", "general_element", "table_element", "constant", "numeric", 
			"numeric_negative", "quoted_string", "r_id", "id_expression", "not_equal_op", 
			"greater_than_or_equals_op", "less_than_or_equals_op", "concatenation_op", 
			"outer_join_sign", "regular_id"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'..'", "'@@'", "'::'", null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'.'", null, null, null, null, "'%'", "'&'", "'('", 
			"')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", null, 
			"':'", "';'", "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", "'>'", 
			"'||'", "'|'", "'='", "'['", "']'", "'_'", null, null, null, null, null, 
			"'@!'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
			"ALL", "ALLOCATE", "ALLOW", "ALTER", "ALWAYS", "ANALYZE", "AND", "ANY", 
			"ANYSCHEMA", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
			"AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BASIC", 
			"BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY", 
			"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BITMAP", "BUFFER_POOL", 
			"BUILD", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", 
			"BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", 
			"CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHECKPOINT", "CHR", 
			"CHUNK", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COLLECT", "COLUMN", 
			"COLUMNS", "COLUMN_VALUE", "COMMENT", "COMMIT", "COMMITTED", "COMPACT", 
			"COMPATIBILITY", "COMPILE", "COMPLETE", "COMPOUND", "COMPRESS", "CONCAT", 
			"CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
			"CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
			"CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CREATEDB", "CREATEROLE", 
			"CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
			"CYCLE", "DATA", "DATABASE", "DATAFILE", "DATE", "DAY", "DB_ROLE_CHANGE", 
			"DBTIMEZONE", "DDL", "DEBUG", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", 
			"DECODE", "DECOMPOSE", "DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", 
			"DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE", "DEMAND", 
			"DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISALLOW", 
			"DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
			"EACH", "EDITIONING", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
			"ENCODING", "ENCRYPT", "END", "ENFORCED", "ENTITYESCAPING", "ERR", "ERRORS", 
			"ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
			"EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTENT", 
			"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FAST", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
			"FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", "FLOAT", 
			"FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", "FOREIGN", "FREELIST", 
			"FREELISTS", "FREEPOOLS", "FROM", "FULL", "FUNCTION", "GENERATED", "GLOBAL", 
			"GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", "HASH", "HAVING", "HIDE", 
			"HIGH", "HOUR", "IDENTIFIED", "IDENTIFIER", "IF", "IGNORE", "ILIKE", 
			"IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", 
			"INDEXED", "INDEXTYPE", "INDICATOR", "INDICES", "INFINITE", "INITIAL", 
			"INITIALLY", "INITRANS", "INLINE", "INNER", "INOUT", "INSERT", "INSTANCE", 
			"INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", 
			"INTO", "INVALIDATE", "INVISIBLE", "IS", "ISOLATION", "ITERATE", "JAVA", 
			"JOIN", "KEEP", "KEEP_DUPLICATES", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
			"LEADING", "LEFT", "LESS", "LEVEL", "LEVELS", "LIBRARY", "LIKE", "LIKE2", 
			"LIKE4", "LIKEC", "LIMIT", "LIST", "LOCAL", "LOB", "LOBS", "LOCATOR", 
			"LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGIN", "LOGON", "LONG", 
			"LOOP", "LOW", "MAIN", "MAP", "MAPPING", "MASTER", "MATCHED", "MAXEXTENTS", 
			"MAXVALUE", "MEASURES", "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINIMIZE", 
			"MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
			"MONTH", "MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
			"NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEVER", "NEW", "NEXT", 
			"NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
			"NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NOMINIMIZE", "NOMINVALUE", "NONE", 
			"NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", "NOROWDEPENDENCIES", 
			"NOSCHEMACHECK", "NOSORT", "NOT", "NOVALIDATE", "NOWAIT", "NVL", "NULL", 
			"NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "MATERIALIZED", "OBJECT", 
			"OF", "OFF", "OID", "OIDINDEX", "OLD", "OLTP", "ON", "ONLY", "OPEN", 
			"OPTIMAL", "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", 
			"OUT", "OUTER", "OVER", "OVERFLOW", "OVERRIDING", "PACKAGE", "PARALLEL", 
			"PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", "PATH", 
			"PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", "PERCENT_ROWTYPE", 
			"PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", "PARTITIONS", 
			"POSITION", "POSITIVE", "POSITIVEN", "PRAGMA", "PREBUILT", "PRECEDING", 
			"PRECISION", "PRESENT", "PRESERVE", "PRIMARY", "PRIOR", "PROCEDURE", 
			"PUBLIC", "PURGE", "QUERY", "RAISE", "RANGE", "RAW", "READ", "READS", 
			"REAL", "REBUILD", "RECORD", "RECORDS_PER_BLOCK", "RECYCLE", "REDUCED", 
			"REF", "REFERENCE", "REFERENCES", "REFERENCING", "REFRESH", "REJECT", 
			"REKEY", "RELATIONAL", "RELIES_ON", "RELY", "RENAME", "REPLACE", "RESPECT", 
			"RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", "RETENTION", "RETURN", 
			"RETURNING", "REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROW", "ROWDEPENDENCIES", "ROWID", "ROWS", "RULES", 
			"SALT", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", 
			"SCOPE", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
			"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
			"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
			"SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
			"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SORT", "SPACE_KEYWORD", 
			"SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", "START", "STARTUP", 
			"STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STORAGE", "STORE", 
			"STRING", "SUBMULTISET", "SUBPARTITION", "SUBPARTITIONS", "SUBSTITUTABLE", 
			"SUBSTRING", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL", "SUSPEND", "SYSTEM", 
			"TABLE", "TABLES", "TABLESPACE", "TEMPLATE", "TEMPORARY", "THAN", "THE", 
			"THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
			"TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMEZONE_REGION", "TO", "TO_CHAR", "TO_DATE", "TRAILING", "TRANSACTION", 
			"TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TRUSTED", 
			"TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", "UNPIVOT", 
			"UNTIL", "UNUSABLE", "UNUSED", "UPDATE", "UPDATED", "UPGRADE", "UPSERT", 
			"UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
			"VARIABLE", "VARRAY", "VARRAYS", "VARYING", "VERBOSE", "VERSION", "VERSIONS", 
			"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNING", "WELLFORMED", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WITHOUT", "WITHIN", "WORK", "WRITE", 
			"XDB", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", 
			"XMLEXISTS", "XMLFOREST", "XMLINDEX", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
			"XMLQUERY", "XMLROOT", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", "XMLTYPE", 
			"YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
			"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
			"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "RANK", "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", 
			"MIN", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", 
			"STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
			"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
			"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", 
			"RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", 
			"COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", 
			"LESS_THAN_OR_EQUALS_OP", "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
			"NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
			"GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
			"PROMPT", "REGULAR_ID", "ZV"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public List<TerminalNode> SEMICOLON() { return getTokens(plsqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(plsqlParser.SEMICOLON, i);
		}
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1087); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1086);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1089); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -1L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -1L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & 274877775871L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 70385924046849L) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 4611686019568238593L) != 0) || _la==LOCK || _la==MERGE || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 1152921573326848001L) != 0) || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(1091);
				unit_statement();
				}
				}
				setState(1096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1097);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(plsqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(plsqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || ((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & 70385924046849L) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & -9223372034573074429L) != 0) || _la==LOCK || _la==MERGE || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 1152921573326848001L) != 0) || _la==SET || _la==SHOW || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & 603979777L) != 0) || ((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & 1073741953L) != 0)) {
				{
				setState(1101);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case GRANT:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case REFRESH:
				case REVOKE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(1099);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(1100);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1110);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1103);
						match(SEMICOLON);
						setState(1106);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALTER:
						case CREATE:
						case DELETE:
						case DROP:
						case EXPLAIN:
						case FUNCTION:
						case GRANT:
						case INSERT:
						case LOCK:
						case MERGE:
						case PROCEDURE:
						case REFRESH:
						case REVOKE:
						case SELECT:
						case UPDATE:
						case WITH:
						case LEFT_PAREN:
							{
							setState(1104);
							unit_statement();
							}
							break;
						case EXIT:
						case SET:
						case SHOW:
						case WHENEVER:
						case SOLIDUS:
						case PROMPT:
							{
							setState(1105);
							sql_plus_command();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(1112);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
				}
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(1113);
					match(SEMICOLON);
					}
				}

				}
			}

			setState(1118);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_explainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(plsqlParser.VERBOSE, 0); }
		public Sql_explainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_explain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_explain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_explain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_explainContext sql_explain() throws RecognitionException {
		Sql_explainContext _localctx = new Sql_explainContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1120);
			match(EXPLAIN);
			setState(1122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANALYZE) {
				{
				setState(1121);
				match(ANALYZE);
				}
			}

			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(1124);
				match(VERBOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unit_statementContext extends ParserRuleContext {
		public Unit_statement_bodyContext unit_statement_body() {
			return getRuleContext(Unit_statement_bodyContext.class,0);
		}
		public Sql_explainContext sql_explain() {
			return getRuleContext(Sql_explainContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_unit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1127);
				sql_explain();
				}
				break;
			}
			setState(1130);
			unit_statement_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unit_statement_bodyContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_permissionContext alter_permission() {
			return getRuleContext(Alter_permissionContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_materialized_viewContext create_materialized_view() {
			return getRuleContext(Create_materialized_viewContext.class,0);
		}
		public Refresh_materialized_viewContext refresh_materialized_view() {
			return getRuleContext(Refresh_materialized_viewContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_roleContext create_role() {
			return getRuleContext(Create_roleContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Unit_statement_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnit_statement_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statement_bodyContext unit_statement_body() throws RecognitionException {
		Unit_statement_bodyContext _localctx = new Unit_statement_bodyContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_unit_statement_body);
		try {
			setState(1160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1132);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1133);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1134);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1135);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1136);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1137);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1138);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1139);
				alter_permission();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1140);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1141);
				create_procedure_body();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1142);
				create_package();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1143);
				create_index();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1144);
				create_table();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1145);
				create_view();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1146);
				create_materialized_view();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1147);
				refresh_materialized_view();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1148);
				create_sequence();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1149);
				create_trigger();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1150);
				create_type();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1151);
				create_role();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1152);
				drop_function();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1153);
				drop_package();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1154);
				drop_procedure();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1155);
				drop_sequence();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1156);
				drop_trigger();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1157);
				drop_type();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1158);
				data_manipulation_language_statements();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1159);
				drop_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_roleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(plsqlParser.ROLE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Role_optionContext> role_option() {
			return getRuleContexts(Role_optionContext.class);
		}
		public Role_optionContext role_option(int i) {
			return getRuleContext(Role_optionContext.class,i);
		}
		public Create_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_roleContext create_role() throws RecognitionException {
		Create_roleContext _localctx = new Create_roleContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162);
			match(CREATE);
			setState(1163);
			match(ROLE);
			setState(1164);
			role_name();
			setState(1173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1165);
					match(WITH);
					}
				}

				setState(1169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1168);
					role_option();
					}
					}
					setState(1171); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CREATEDB || _la==CREATEROLE || _la==LOGIN );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_optionContext extends ParserRuleContext {
		public TerminalNode LOGIN() { return getToken(plsqlParser.LOGIN, 0); }
		public TerminalNode CREATEDB() { return getToken(plsqlParser.CREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(plsqlParser.CREATEROLE, 0); }
		public Role_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRole_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRole_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRole_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_optionContext role_option() throws RecognitionException {
		Role_optionContext _localctx = new Role_optionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_role_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			_la = _input.LA(1);
			if ( !(_la==CREATEDB || _la==CREATEROLE || _la==LOGIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Refresh_materialized_viewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(plsqlParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(plsqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Refresh_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRefresh_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRefresh_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRefresh_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Refresh_materialized_viewContext refresh_materialized_view() throws RecognitionException {
		Refresh_materialized_viewContext _localctx = new Refresh_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_refresh_materialized_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(REFRESH);
			setState(1178);
			match(MATERIALIZED);
			setState(1179);
			match(VIEW);
			setState(1180);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_materialized_viewContext extends ParserRuleContext {
		public Id_expressionContext mv_tablespace;
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(plsqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode PREBUILT() { return getToken(plsqlParser.PREBUILT, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Create_mv_refreshContext create_mv_refresh() {
			return getRuleContext(Create_mv_refreshContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode QUERY() { return getToken(plsqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(plsqlParser.REWRITE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode REDUCED() { return getToken(plsqlParser.REDUCED, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Build_clauseContext build_clause() {
			return getRuleContext(Build_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(plsqlParser.WITHOUT, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_materialized_viewContext create_materialized_view() throws RecognitionException {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_create_materialized_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1182);
			match(CREATE);
			setState(1183);
			match(MATERIALIZED);
			setState(1184);
			match(VIEW);
			setState(1185);
			tableview_name();
			setState(1188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1186);
				match(OF);
				setState(1187);
				type_name();
				}
			}

			setState(1210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(1190);
				match(ON);
				setState(1191);
				match(PREBUILT);
				setState(1192);
				match(TABLE);
				setState(1196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(1193);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1194);
					match(REDUCED);
					setState(1195);
					match(PRECISION);
					}
				}

				}
				break;
			case AS:
			case BUILD:
			case CACHE:
			case DISABLE:
			case ENABLE:
			case FILESYSTEM_LIKE_LOGGING:
			case FOR:
			case INITRANS:
			case LOGGING:
			case NEVER:
			case NOCACHE:
			case NOLOGGING:
			case NOPARALLEL:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REFRESH:
			case SEGMENT:
			case STORAGE:
			case TABLESPACE:
			case USING:
				{
				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4503737066323969L) != 0)) {
					{
					setState(1198);
					physical_properties();
					}
				}

				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CACHE || _la==NOCACHE) {
					{
					setState(1201);
					_la = _input.LA(1);
					if ( !(_la==CACHE || _la==NOCACHE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOPARALLEL || _la==PARALLEL) {
					{
					setState(1204);
					parallel_clause();
					}
				}

				setState(1208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BUILD) {
					{
					setState(1207);
					build_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1212);
				match(USING);
				setState(1213);
				match(INDEX);
				setState(1223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1217); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(1217);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case INITRANS:
							case PCTFREE:
							case PCTUSED:
							case STORAGE:
								{
								setState(1214);
								physical_attributes_clause();
								}
								break;
							case TABLESPACE:
								{
								setState(1215);
								match(TABLESPACE);
								setState(1216);
								((Create_materialized_viewContext)_localctx).mv_tablespace = id_expression();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1219); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(1225);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1226);
				match(USING);
				setState(1227);
				match(NO);
				setState(1228);
				match(INDEX);
				}
				break;
			}
			setState(1232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEVER || _la==REFRESH) {
				{
				setState(1231);
				create_mv_refresh();
				}
			}

			setState(1236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1234);
				match(FOR);
				setState(1235);
				match(UPDATE);
				}
			}

			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1238);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1239);
				match(QUERY);
				setState(1240);
				match(REWRITE);
				}
			}

			setState(1243);
			match(AS);
			setState(1244);
			subquery(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_mv_refreshContext extends ParserRuleContext {
		public Token rb_segment;
		public TerminalNode NEVER() { return getToken(plsqlParser.NEVER, 0); }
		public TerminalNode REFRESH() { return getToken(plsqlParser.REFRESH, 0); }
		public List<TerminalNode> ON() { return getTokens(plsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(plsqlParser.ON, i);
		}
		public List<TerminalNode> WITH() { return getTokens(plsqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(plsqlParser.WITH, i);
		}
		public List<TerminalNode> USING() { return getTokens(plsqlParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(plsqlParser.USING, i);
		}
		public List<TerminalNode> CONSTRAINTS() { return getTokens(plsqlParser.CONSTRAINTS); }
		public TerminalNode CONSTRAINTS(int i) {
			return getToken(plsqlParser.CONSTRAINTS, i);
		}
		public List<TerminalNode> FAST() { return getTokens(plsqlParser.FAST); }
		public TerminalNode FAST(int i) {
			return getToken(plsqlParser.FAST, i);
		}
		public List<TerminalNode> COMPLETE() { return getTokens(plsqlParser.COMPLETE); }
		public TerminalNode COMPLETE(int i) {
			return getToken(plsqlParser.COMPLETE, i);
		}
		public List<TerminalNode> FORCE() { return getTokens(plsqlParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(plsqlParser.FORCE, i);
		}
		public List<TerminalNode> DEMAND() { return getTokens(plsqlParser.DEMAND); }
		public TerminalNode DEMAND(int i) {
			return getToken(plsqlParser.DEMAND, i);
		}
		public List<TerminalNode> COMMIT() { return getTokens(plsqlParser.COMMIT); }
		public TerminalNode COMMIT(int i) {
			return getToken(plsqlParser.COMMIT, i);
		}
		public List<TerminalNode> ENFORCED() { return getTokens(plsqlParser.ENFORCED); }
		public TerminalNode ENFORCED(int i) {
			return getToken(plsqlParser.ENFORCED, i);
		}
		public List<TerminalNode> TRUSTED() { return getTokens(plsqlParser.TRUSTED); }
		public TerminalNode TRUSTED(int i) {
			return getToken(plsqlParser.TRUSTED, i);
		}
		public List<TerminalNode> START() { return getTokens(plsqlParser.START); }
		public TerminalNode START(int i) {
			return getToken(plsqlParser.START, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(plsqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(plsqlParser.NEXT, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(plsqlParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(plsqlParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(plsqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(plsqlParser.KEY, i);
		}
		public List<TerminalNode> ROWID() { return getTokens(plsqlParser.ROWID); }
		public TerminalNode ROWID(int i) {
			return getToken(plsqlParser.ROWID, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> ROLLBACK() { return getTokens(plsqlParser.ROLLBACK); }
		public TerminalNode ROLLBACK(int i) {
			return getToken(plsqlParser.ROLLBACK, i);
		}
		public List<TerminalNode> SEGMENT() { return getTokens(plsqlParser.SEGMENT); }
		public TerminalNode SEGMENT(int i) {
			return getToken(plsqlParser.SEGMENT, i);
		}
		public List<TerminalNode> REGULAR_ID() { return getTokens(plsqlParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(plsqlParser.REGULAR_ID, i);
		}
		public List<TerminalNode> MASTER() { return getTokens(plsqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(plsqlParser.MASTER, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(plsqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(plsqlParser.LOCAL, i);
		}
		public Create_mv_refreshContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_mv_refresh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_mv_refresh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_mv_refresh(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_mv_refresh(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_mv_refreshContext create_mv_refresh() throws RecognitionException {
		Create_mv_refreshContext _localctx = new Create_mv_refreshContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_create_mv_refresh);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEVER:
				{
				setState(1246);
				match(NEVER);
				setState(1247);
				match(REFRESH);
				}
				break;
			case REFRESH:
				{
				setState(1248);
				match(REFRESH);
				setState(1281); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1281);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						setState(1249);
						_la = _input.LA(1);
						if ( !(_la==COMPLETE || _la==FAST || _la==FORCE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(1250);
						match(ON);
						setState(1251);
						_la = _input.LA(1);
						if ( !(_la==COMMIT || _la==DEMAND) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 3:
						{
						setState(1255);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case START:
							{
							setState(1252);
							match(START);
							setState(1253);
							match(WITH);
							}
							break;
						case NEXT:
							{
							setState(1254);
							match(NEXT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						setState(1257);
						match(WITH);
						setState(1261);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PRIMARY:
							{
							setState(1258);
							match(PRIMARY);
							setState(1259);
							match(KEY);
							}
							break;
						case ROWID:
							{
							setState(1260);
							match(ROWID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 5:
						{
						setState(1263);
						match(USING);
						setState(1276);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DEFAULT:
							{
							setState(1264);
							match(DEFAULT);
							setState(1266);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(1265);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(1268);
							match(ROLLBACK);
							setState(1269);
							match(SEGMENT);
							}
							break;
						case LOCAL:
						case MASTER:
						case ROLLBACK:
							{
							setState(1271);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==LOCAL || _la==MASTER) {
								{
								setState(1270);
								_la = _input.LA(1);
								if ( !(_la==LOCAL || _la==MASTER) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(1273);
							match(ROLLBACK);
							setState(1274);
							match(SEGMENT);
							setState(1275);
							((Create_mv_refreshContext)_localctx).rb_segment = match(REGULAR_ID);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(1278);
						match(USING);
						setState(1279);
						_la = _input.LA(1);
						if ( !(_la==ENFORCED || _la==TRUSTED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1280);
						match(CONSTRAINTS);
						}
						break;
					}
					}
					setState(1283); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPLETE || _la==FAST || _la==FORCE || _la==NEXT || _la==ON || _la==START || _la==USING || _la==WITH );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Build_clauseContext extends ParserRuleContext {
		public TerminalNode BUILD() { return getToken(plsqlParser.BUILD, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public Build_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_build_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBuild_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBuild_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBuild_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Build_clauseContext build_clause() throws RecognitionException {
		Build_clauseContext _localctx = new Build_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_build_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			match(BUILD);
			setState(1288);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_permissionContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public Permission_optionsContext permission_options() {
			return getRuleContext(Permission_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode PUBLIC() { return getToken(plsqlParser.PUBLIC, 0); }
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Alter_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_permissionContext alter_permission() throws RecognitionException {
		Alter_permissionContext _localctx = new Alter_permissionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_permission);
		int _la;
		try {
			setState(1356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1290);
				match(REVOKE);
				setState(1291);
				permission_options();
				setState(1292);
				match(ON);
				setState(1294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1293);
					match(TABLE);
					}
				}

				setState(1296);
				tableview_name();
				setState(1297);
				match(FROM);
				setState(1299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(1298);
					match(GROUP);
					}
				}

				setState(1303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1301);
					match(PUBLIC);
					}
					break;
				case 2:
					{
					setState(1302);
					role_name();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1305);
				match(GRANT);
				setState(1306);
				permission_options();
				setState(1307);
				match(ON);
				setState(1309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1308);
					match(TABLE);
					}
				}

				setState(1311);
				tableview_name();
				setState(1312);
				match(TO);
				setState(1314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(1313);
					match(GROUP);
					}
				}

				setState(1318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(1316);
					match(PUBLIC);
					}
					break;
				case 2:
					{
					setState(1317);
					role_name();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1320);
				match(GRANT);
				setState(1321);
				role_name();
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1322);
					match(COMMA);
					setState(1323);
					role_name();
					}
					}
					setState(1328);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1329);
				match(TO);
				setState(1330);
				role_name();
				setState(1335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1331);
					match(COMMA);
					setState(1332);
					role_name();
					}
					}
					setState(1337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1338);
				match(REVOKE);
				setState(1339);
				role_name();
				setState(1344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1340);
					match(COMMA);
					setState(1341);
					role_name();
					}
					}
					setState(1346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1347);
				match(FROM);
				setState(1348);
				role_name();
				setState(1353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1349);
					match(COMMA);
					setState(1350);
					role_name();
					}
					}
					setState(1355);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Permission_optionsContext extends ParserRuleContext {
		public List<TerminalNode> SELECT() { return getTokens(plsqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(plsqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(plsqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(plsqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(plsqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(plsqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(plsqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(plsqlParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(plsqlParser.TRUNCATE); }
		public TerminalNode TRUNCATE(int i) {
			return getToken(plsqlParser.TRUNCATE, i);
		}
		public List<TerminalNode> REFERENCES() { return getTokens(plsqlParser.REFERENCES); }
		public TerminalNode REFERENCES(int i) {
			return getToken(plsqlParser.REFERENCES, i);
		}
		public List<TerminalNode> TRIGGER() { return getTokens(plsqlParser.TRIGGER); }
		public TerminalNode TRIGGER(int i) {
			return getToken(plsqlParser.TRIGGER, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Permission_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPermission_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPermission_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPermission_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Permission_optionsContext permission_options() throws RecognitionException {
		Permission_optionsContext _localctx = new Permission_optionsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_permission_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1358);
					match(COMMA);
					}
				}

				setState(1361);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==INSERT || _la==REFERENCES || _la==SELECT || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & 32777L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1364); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==INSERT || _la==REFERENCES || _la==SELECT || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & 32777L) != 0) || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode EDITIONING() { return getToken(plsqlParser.EDITIONING, 0); }
		public View_optionsContext view_options() {
			return getRuleContext(View_optionsContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(CREATE);
			setState(1369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(1367);
				match(OR);
				setState(1368);
				match(REPLACE);
				}
				break;
			}
			setState(1375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==OR) {
				{
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1371);
					match(OR);
					}
				}

				setState(1374);
				match(FORCE);
				}
			}

			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EDITIONING) {
				{
				setState(1377);
				match(EDITIONING);
				}
			}

			setState(1380);
			match(VIEW);
			setState(1381);
			tableview_name();
			setState(1383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1382);
				view_options();
				}
			}

			setState(1385);
			match(AS);
			setState(1386);
			subquery(0);
			setState(1388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1387);
				subquery_restriction_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class View_optionsContext extends ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return getRuleContext(View_alias_constraintContext.class,0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterView_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitView_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitView_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_optionsContext view_options() throws RecognitionException {
		View_optionsContext _localctx = new View_optionsContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_view_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			view_alias_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class View_alias_constraintContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_alias_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterView_alias_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitView_alias_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitView_alias_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_alias_constraintContext view_alias_constraint() throws RecognitionException {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1392);
			match(LEFT_PAREN);
			setState(1406); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1393);
					match(COMMA);
					}
				}

				setState(1404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1396);
					table_alias();
					setState(1400);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1397);
							inline_constraint();
							}
							} 
						}
						setState(1402);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(1403);
					out_of_line_constraint();
					}
					break;
				}
				}
				}
				setState(1408); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -309066313700458000L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1264687428713654483L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641297L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545483706385L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(1410);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Cluster_index_clauseContext cluster_index_clause() {
			return getRuleContext(Cluster_index_clauseContext.class,0);
		}
		public Table_index_clauseContext table_index_clause() {
			return getRuleContext(Table_index_clauseContext.class,0);
		}
		public Bitmap_join_index_clauseContext bitmap_join_index_clause() {
			return getRuleContext(Bitmap_join_index_clauseContext.class,0);
		}
		public TerminalNode UNUSABLE() { return getToken(plsqlParser.UNUSABLE, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode BITMAP() { return getToken(plsqlParser.BITMAP, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1412);
			match(CREATE);
			setState(1414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BITMAP || _la==UNIQUE) {
				{
				setState(1413);
				_la = _input.LA(1);
				if ( !(_la==BITMAP || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1416);
			match(INDEX);
			setState(1417);
			index_name();
			setState(1418);
			match(ON);
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1419);
				cluster_index_clause();
				}
				break;
			case 2:
				{
				setState(1420);
				table_index_clause();
				}
				break;
			case 3:
				{
				setState(1421);
				bitmap_join_index_clause();
				}
				break;
			}
			setState(1425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE) {
				{
				setState(1424);
				match(UNUSABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_index_clauseContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public Cluster_nameContext cluster_name() {
			return getRuleContext(Cluster_nameContext.class,0);
		}
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public Cluster_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCluster_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCluster_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCluster_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_index_clauseContext cluster_index_clause() throws RecognitionException {
		Cluster_index_clauseContext _localctx = new Cluster_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_cluster_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1427);
			match(CLUSTER);
			setState(1428);
			cluster_name();
			setState(1430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==INVISIBLE || _la==LOGGING || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & 1298162592589615121L) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & 2306405959167115265L) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(1429);
				index_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Cluster_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCluster_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCluster_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCluster_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_nameContext cluster_name() throws RecognitionException {
		Cluster_nameContext _localctx = new Cluster_nameContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_cluster_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1432);
				id_expression();
				setState(1433);
				match(PERIOD);
				}
				break;
			}
			setState(1437);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_attributesContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<Sort_or_nosortContext> sort_or_nosort() {
			return getRuleContexts(Sort_or_nosortContext.class);
		}
		public Sort_or_nosortContext sort_or_nosort(int i) {
			return getRuleContext(Sort_or_nosortContext.class,i);
		}
		public List<TerminalNode> REVERSE() { return getTokens(plsqlParser.REVERSE); }
		public TerminalNode REVERSE(int i) {
			return getToken(plsqlParser.REVERSE, i);
		}
		public List<Visible_or_invisibleContext> visible_or_invisible() {
			return getRuleContexts(Visible_or_invisibleContext.class);
		}
		public Visible_or_invisibleContext visible_or_invisible(int i) {
			return getRuleContext(Visible_or_invisibleContext.class,i);
		}
		public List<Parallel_clauseContext> parallel_clause() {
			return getRuleContexts(Parallel_clauseContext.class);
		}
		public Parallel_clauseContext parallel_clause(int i) {
			return getRuleContext(Parallel_clauseContext.class,i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_attributesContext index_attributes() throws RecognitionException {
		Index_attributesContext _localctx = new Index_attributesContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_index_attributes);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1451); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1451);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(1439);
						physical_attributes_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(1440);
						logging_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(1441);
						match(TABLESPACE);
						setState(1444);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BUILD:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPLETE:
						case COMPOUND:
						case CONCAT:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECODE:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DEMAND:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case EDITIONING:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENFORCED:
						case ENTITYESCAPING:
						case ERR:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FAST:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LIST:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MASTER:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEVER:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NVL:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case MATERIALIZED:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PREBUILT:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case PUBLIC:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REDUCED:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REFRESH:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case REWRITE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SIZE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBSTRING:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TABLES:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TO_CHAR:
						case TO_DATE:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERBOSE:
						case VERSION:
						case VERSIONS:
						case VIEW:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHOUT:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case REGULAR_ID:
							{
							setState(1442);
							tablespace();
							}
							break;
						case DEFAULT:
							{
							setState(1443);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(1446);
						key_compression();
						}
						break;
					case NOSORT:
					case SORT:
						{
						setState(1447);
						sort_or_nosort();
						}
						break;
					case REVERSE:
						{
						setState(1448);
						match(REVERSE);
						}
						break;
					case INVISIBLE:
					case VISIBLE:
						{
						setState(1449);
						visible_or_invisible();
						}
						break;
					case NOPARALLEL:
					case PARALLEL:
						{
						setState(1450);
						parallel_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1453); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,66,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TablespaceContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceContext tablespace() throws RecognitionException {
		TablespaceContext _localctx = new TablespaceContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_tablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Key_compressionContext extends ParserRuleContext {
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Key_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKey_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKey_compression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitKey_compression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_compressionContext key_compression() throws RecognitionException {
		Key_compressionContext _localctx = new Key_compressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_key_compression);
		try {
			setState(1460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1457);
				match(NOCOMPRESS);
				}
				break;
			case COMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1458);
				match(COMPRESS);
				setState(1459);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sort_or_nosortContext extends ParserRuleContext {
		public TerminalNode SORT() { return getToken(plsqlParser.SORT, 0); }
		public TerminalNode NOSORT() { return getToken(plsqlParser.NOSORT, 0); }
		public Sort_or_nosortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_or_nosort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSort_or_nosort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSort_or_nosort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSort_or_nosort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sort_or_nosortContext sort_or_nosort() throws RecognitionException {
		Sort_or_nosortContext _localctx = new Sort_or_nosortContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_sort_or_nosort);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			_la = _input.LA(1);
			if ( !(_la==NOSORT || _la==SORT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Visible_or_invisibleContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(plsqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(plsqlParser.INVISIBLE, 0); }
		public Visible_or_invisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visible_or_invisible; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVisible_or_invisible(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVisible_or_invisible(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVisible_or_invisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Visible_or_invisibleContext visible_or_invisible() throws RecognitionException {
		Visible_or_invisibleContext _localctx = new Visible_or_invisibleContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_visible_or_invisible);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1464);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parallel_clauseContext extends ParserRuleContext {
		public Token parallel_count;
		public TerminalNode NOPARALLEL() { return getToken(plsqlParser.NOPARALLEL, 0); }
		public TerminalNode PARALLEL() { return getToken(plsqlParser.PARALLEL, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParallel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_clauseContext parallel_clause() throws RecognitionException {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_parallel_clause);
		int _la;
		try {
			setState(1471);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOPARALLEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				match(PARALLEL);
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED_INTEGER) {
					{
					setState(1468);
					((Parallel_clauseContext)_localctx).parallel_count = match(UNSIGNED_INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_index_clauseContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public List<Index_exprContext> index_expr() {
			return getRuleContexts(Index_exprContext.class);
		}
		public Index_exprContext index_expr(int i) {
			return getRuleContext(Index_exprContext.class,i);
		}
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public Table_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_index_clauseContext table_index_clause() throws RecognitionException {
		Table_index_clauseContext _localctx = new Table_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_table_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			tableview_name();
			setState(1475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(1474);
				table_alias();
				}
			}

			setState(1477);
			match(LEFT_PAREN);
			setState(1485); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1478);
					match(COMMA);
					}
				}

				setState(1481);
				index_expr();
				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(1482);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(1487); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 9202536099305047024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -7079800708925760131L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958968282141095725L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -684268148513834687L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641265L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998929L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484746769L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & -8511240345776834593L) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & 67108963L) != 0) );
			setState(1489);
			match(RIGHT_PAREN);
			setState(1491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 1143492093935617L) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & 2164260865L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & 1298162592589615121L) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & 2306405959167115265L) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(1490);
				index_properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_exprContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_exprContext index_expr() throws RecognitionException {
		Index_exprContext _localctx = new Index_exprContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_index_expr);
		try {
			setState(1495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1493);
				column_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1494);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_propertiesContext extends ParserRuleContext {
		public List<Global_partitioned_indexContext> global_partitioned_index() {
			return getRuleContexts(Global_partitioned_indexContext.class);
		}
		public Global_partitioned_indexContext global_partitioned_index(int i) {
			return getRuleContext(Global_partitioned_indexContext.class,i);
		}
		public List<Local_partitioned_indexContext> local_partitioned_index() {
			return getRuleContexts(Local_partitioned_indexContext.class);
		}
		public Local_partitioned_indexContext local_partitioned_index(int i) {
			return getRuleContext(Local_partitioned_indexContext.class,i);
		}
		public List<Index_attributesContext> index_attributes() {
			return getRuleContexts(Index_attributesContext.class);
		}
		public Index_attributesContext index_attributes(int i) {
			return getRuleContext(Index_attributesContext.class,i);
		}
		public TerminalNode INDEXTYPE() { return getToken(plsqlParser.INDEXTYPE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Domain_index_clauseContext domain_index_clause() {
			return getRuleContext(Domain_index_clauseContext.class,0);
		}
		public Xmlindex_clauseContext xmlindex_clause() {
			return getRuleContext(Xmlindex_clauseContext.class,0);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_propertiesContext index_properties() throws RecognitionException {
		Index_propertiesContext _localctx = new Index_propertiesContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_index_properties);
		int _la;
		try {
			setState(1510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
			case FILESYSTEM_LIKE_LOGGING:
			case GLOBAL:
			case INITRANS:
			case INVISIBLE:
			case LOCAL:
			case LOGGING:
			case NOCOMPRESS:
			case NOLOGGING:
			case NOPARALLEL:
			case NOSORT:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REVERSE:
			case SORT:
			case STORAGE:
			case TABLESPACE:
			case VISIBLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1500); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1500);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GLOBAL:
						{
						setState(1497);
						global_partitioned_index();
						}
						break;
					case LOCAL:
						{
						setState(1498);
						local_partitioned_index();
						}
						break;
					case COMPRESS:
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case INVISIBLE:
					case LOGGING:
					case NOCOMPRESS:
					case NOLOGGING:
					case NOPARALLEL:
					case NOSORT:
					case PARALLEL:
					case PCTFREE:
					case PCTUSED:
					case REVERSE:
					case SORT:
					case STORAGE:
					case TABLESPACE:
					case VISIBLE:
						{
						setState(1499);
						index_attributes();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1502); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPRESS || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 1125899907891201L) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & 2164260865L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & 1298162592589615121L) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & 2306405959167115265L) != 0) || _la==TABLESPACE || _la==VISIBLE );
				}
				break;
			case INDEXTYPE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1504);
				match(INDEXTYPE);
				setState(1505);
				match(IS);
				setState(1508);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(1506);
					domain_index_clause();
					}
					break;
				case XDB:
				case XMLINDEX:
					{
					setState(1507);
					xmlindex_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Global_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(plsqlParser.GLOBAL, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Index_partitioning_clauseContext index_partitioning_clause() {
			return getRuleContext(Index_partitioning_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Global_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_partitioned_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGlobal_partitioned_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGlobal_partitioned_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGlobal_partitioned_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_partitioned_indexContext global_partitioned_index() throws RecognitionException {
		Global_partitioned_indexContext _localctx = new Global_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_global_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1512);
			match(GLOBAL);
			setState(1513);
			match(PARTITION);
			setState(1514);
			match(BY);
			setState(1527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				setState(1515);
				match(RANGE);
				setState(1516);
				paren_column_list();
				setState(1517);
				match(LEFT_PAREN);
				setState(1518);
				index_partitioning_clause();
				setState(1519);
				match(RIGHT_PAREN);
				}
				break;
			case HASH:
				{
				setState(1521);
				match(HASH);
				setState(1522);
				paren_column_list();
				setState(1525);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(1523);
					individual_hash_partitions();
					}
					break;
				case PARTITIONS:
					{
					setState(1524);
					hash_partitions_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_partitioning_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(plsqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(plsqlParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Index_partitioning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partitioning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_partitioning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_partitioning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_partitioning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_partitioning_clauseContext index_partitioning_clause() throws RecognitionException {
		Index_partitioning_clauseContext _localctx = new Index_partitioning_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_index_partitioning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			match(PARTITION);
			setState(1531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
				{
				setState(1530);
				partition_name();
				}
			}

			setState(1533);
			match(VALUES);
			setState(1534);
			match(LESS);
			setState(1535);
			match(THAN);
			setState(1536);
			match(LEFT_PAREN);
			setState(1541); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1537);
					match(COMMA);
					}
				}

				setState(1540);
				literal();
				}
				}
				setState(1543); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376152236033L) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & 2197815297L) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & 4103L) != 0) );
			setState(1545);
			match(RIGHT_PAREN);
			setState(1547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(1546);
				segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_nameContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartition_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_nameContext partition_name() throws RecognitionException {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_partition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1549);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_literal);
		try {
			setState(1555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1551);
				match(CHAR_STRING);
				}
				break;
			case CHR:
			case CONCAT:
			case DECODE:
			case NVL:
			case SUBSTRING:
			case TO_CHAR:
			case TO_DATE:
			case TRIM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1552);
				string_function();
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1553);
				numeric();
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1554);
				match(MAXVALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class String_functionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTRING() { return getToken(plsqlParser.SUBSTRING, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public List<AtomContext> atom() {
			return getRuleContexts(AtomContext.class);
		}
		public AtomContext atom(int i) {
			return getRuleContext(AtomContext.class,i);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode TO_CHAR() { return getToken(plsqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode DECODE() { return getToken(plsqlParser.DECODE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode NVL() { return getToken(plsqlParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(plsqlParser.TO_DATE, 0); }
		public TerminalNode CONCAT() { return getToken(plsqlParser.CONCAT, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitString_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitString_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_string_function);
		int _la;
		try {
			int _alt;
			setState(1658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1557);
				((String_functionContext)_localctx).name = match(SUBSTRING);
				setState(1558);
				match(LEFT_PAREN);
				setState(1559);
				expression(0);
				setState(1560);
				match(COMMA);
				setState(1561);
				expression(0);
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1562);
					match(COMMA);
					setState(1563);
					expression(0);
					}
				}

				setState(1566);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1568);
				((String_functionContext)_localctx).name = match(SUBSTRING);
				setState(1569);
				match(LEFT_PAREN);
				setState(1570);
				expression(0);
				setState(1573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(1571);
					match(FROM);
					setState(1572);
					atom();
					}
				}

				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1575);
					match(FOR);
					setState(1576);
					atom();
					}
				}

				setState(1579);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1581);
				((String_functionContext)_localctx).name = match(TO_CHAR);
				setState(1582);
				match(LEFT_PAREN);
				setState(1586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(1583);
					table_element();
					}
					break;
				case 2:
					{
					setState(1584);
					standard_function(0);
					}
					break;
				case 3:
					{
					setState(1585);
					expression(0);
					}
					break;
				}
				setState(1590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
				case 1:
					{
					setState(1588);
					match(COMMA);
					setState(1589);
					quoted_string();
					}
					break;
				}
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1592);
					match(COMMA);
					setState(1593);
					quoted_string();
					}
				}

				setState(1596);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1598);
				((String_functionContext)_localctx).name = match(DECODE);
				setState(1599);
				match(LEFT_PAREN);
				setState(1600);
				expressions();
				setState(1601);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1603);
				((String_functionContext)_localctx).name = match(CHR);
				setState(1604);
				match(LEFT_PAREN);
				setState(1605);
				concatenation();
				setState(1606);
				match(USING);
				setState(1607);
				match(NCHAR_CS);
				setState(1608);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1610);
				((String_functionContext)_localctx).name = match(NVL);
				setState(1611);
				match(LEFT_PAREN);
				setState(1612);
				expression(0);
				setState(1613);
				match(COMMA);
				setState(1614);
				expression(0);
				setState(1615);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1617);
				((String_functionContext)_localctx).name = match(TRIM);
				setState(1618);
				match(LEFT_PAREN);
				setState(1626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1620);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(1619);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1623);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(1622);
						quoted_string();
						}
					}

					setState(1625);
					match(FROM);
					}
					break;
				}
				setState(1628);
				concatenation();
				setState(1629);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1631);
				((String_functionContext)_localctx).name = match(TO_DATE);
				setState(1632);
				match(LEFT_PAREN);
				setState(1633);
				expression(0);
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1634);
					match(COMMA);
					setState(1635);
					quoted_string();
					}
				}

				setState(1638);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1640);
				((String_functionContext)_localctx).name = match(CONCAT);
				setState(1641);
				match(LEFT_PAREN);
				setState(1648); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1644);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
						case 1:
							{
							setState(1642);
							quoted_string();
							}
							break;
						case 2:
							{
							setState(1643);
							expression(0);
							}
							break;
						}
						setState(1646);
						match(COMMA);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1650); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1652);
					quoted_string();
					}
					break;
				case 2:
					{
					setState(1653);
					expression(0);
					}
					break;
				}
				setState(1656);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1660);
			expression(0);
			setState(1665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1661);
				match(COMMA);
				setState(1662);
				expression(0);
				}
				}
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Individual_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<Partitioning_storage_clauseContext> partitioning_storage_clause() {
			return getRuleContexts(Partitioning_storage_clauseContext.class);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause(int i) {
			return getRuleContext(Partitioning_storage_clauseContext.class,i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndividual_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndividual_hash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndividual_hash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Individual_hash_partitionsContext individual_hash_partitions() throws RecognitionException {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_individual_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			match(LEFT_PAREN);
			setState(1679); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1669);
					match(COMMA);
					}
				}

				setState(1672);
				match(PARTITION);
				setState(1674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1673);
					partition_name();
					}
					break;
				}
				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
					{
					setState(1676);
					partitioning_storage_clause();
					}
				}

				}
				}
				setState(1681); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1683);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partitioning_storage_clauseContext extends ParserRuleContext {
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> OVERFLOW() { return getTokens(plsqlParser.OVERFLOW); }
		public TerminalNode OVERFLOW(int i) {
			return getToken(plsqlParser.OVERFLOW, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<Lob_partitioning_storageContext> lob_partitioning_storage() {
			return getRuleContexts(Lob_partitioning_storageContext.class);
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return getRuleContext(Lob_partitioning_storageContext.class,i);
		}
		public List<TerminalNode> VARRAY() { return getTokens(plsqlParser.VARRAY); }
		public TerminalNode VARRAY(int i) {
			return getToken(plsqlParser.VARRAY, i);
		}
		public List<Varray_itemContext> varray_item() {
			return getRuleContexts(Varray_itemContext.class);
		}
		public Varray_itemContext varray_item(int i) {
			return getRuleContext(Varray_itemContext.class,i);
		}
		public List<TerminalNode> STORE() { return getTokens(plsqlParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(plsqlParser.STORE, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public List<TerminalNode> LOB() { return getTokens(plsqlParser.LOB); }
		public TerminalNode LOB(int i) {
			return getToken(plsqlParser.LOB, i);
		}
		public List<Lob_segnameContext> lob_segname() {
			return getRuleContexts(Lob_segnameContext.class);
		}
		public Lob_segnameContext lob_segname(int i) {
			return getRuleContext(Lob_segnameContext.class,i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(plsqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(plsqlParser.BASICFILE, i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(plsqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(plsqlParser.SECUREFILE, i);
		}
		public Partitioning_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioning_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartitioning_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartitioning_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartitioning_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partitioning_storage_clauseContext partitioning_storage_clause() throws RecognitionException {
		Partitioning_storage_clauseContext _localctx = new Partitioning_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_partitioning_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1685);
					match(TABLESPACE);
					setState(1686);
					tablespace();
					}
					break;
				case 2:
					{
					setState(1687);
					match(OVERFLOW);
					setState(1690);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
					case 1:
						{
						setState(1688);
						match(TABLESPACE);
						setState(1689);
						tablespace();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1692);
					table_compression();
					}
					break;
				case 4:
					{
					setState(1693);
					key_compression();
					}
					break;
				case 5:
					{
					setState(1694);
					lob_partitioning_storage();
					}
					break;
				case 6:
					{
					setState(1695);
					match(VARRAY);
					setState(1696);
					varray_item();
					setState(1697);
					match(STORE);
					setState(1698);
					match(AS);
					setState(1700);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						setState(1699);
						_la = _input.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1702);
					match(LOB);
					setState(1703);
					lob_segname();
					}
					break;
				}
				}
				setState(1707); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(plsqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(plsqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(plsqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(plsqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_compression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_compression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_table_compression);
		int _la;
		try {
			setState(1722);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1709);
				match(COMPRESS);
				setState(1719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1710);
					match(BASIC);
					}
					break;
				case 2:
					{
					setState(1711);
					match(FOR);
					setState(1717);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(1712);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(1713);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1715);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(1714);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_partitioning_storageContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Lob_itemContext lob_item() {
			return getRuleContext(Lob_itemContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(plsqlParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public TerminalNode BASICFILE() { return getToken(plsqlParser.BASICFILE, 0); }
		public TerminalNode SECUREFILE() { return getToken(plsqlParser.SECUREFILE, 0); }
		public Lob_partitioning_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_partitioning_storage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_partitioning_storage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_partitioning_storage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_partitioning_storage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_partitioning_storageContext lob_partitioning_storage() throws RecognitionException {
		Lob_partitioning_storageContext _localctx = new Lob_partitioning_storageContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_lob_partitioning_storage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			match(LOB);
			setState(1725);
			match(LEFT_PAREN);
			setState(1726);
			lob_item();
			setState(1727);
			match(RIGHT_PAREN);
			setState(1728);
			match(STORE);
			setState(1729);
			match(AS);
			setState(1731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(1730);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1746);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				{
				setState(1733);
				lob_segname();
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1734);
					match(LEFT_PAREN);
					setState(1735);
					match(TABLESPACE);
					setState(1736);
					tablespace();
					setState(1737);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(1741);
				match(LEFT_PAREN);
				setState(1742);
				match(TABLESPACE);
				setState(1743);
				tablespace();
				setState(1744);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_itemContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Lob_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_itemContext lob_item() throws RecognitionException {
		Lob_itemContext _localctx = new Lob_itemContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_lob_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_segnameContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Lob_segnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_segname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_segname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_segname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_segname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_segnameContext lob_segname() throws RecognitionException {
		Lob_segnameContext _localctx = new Lob_segnameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_lob_segname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varray_itemContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public Varray_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVarray_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_itemContext varray_item() throws RecognitionException {
		Varray_itemContext _localctx = new Varray_itemContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_varray_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1752);
				id_expression();
				setState(1753);
				match(PERIOD);
				}
				break;
			}
			setState(1760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1757);
				id_expression();
				setState(1758);
				match(PERIOD);
				}
				break;
			}
			setState(1762);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partitions_by_quantityContext extends ParserRuleContext {
		public TerminalNode PARTITIONS() { return getToken(plsqlParser.PARTITIONS, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return getRuleContext(Hash_partition_quantityContext.class,0);
		}
		public List<TerminalNode> STORE() { return getTokens(plsqlParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(plsqlParser.STORE, i);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(plsqlParser.OVERFLOW, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHash_partitions_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHash_partitions_by_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHash_partitions_by_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partitions_by_quantityContext hash_partitions_by_quantity() throws RecognitionException {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_hash_partitions_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			match(PARTITIONS);
			setState(1765);
			hash_partition_quantity();
			setState(1779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(1766);
				match(STORE);
				setState(1767);
				match(IN);
				setState(1768);
				match(LEFT_PAREN);
				setState(1773); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1770);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1769);
						match(COMMA);
						}
					}

					setState(1772);
					tablespace();
					}
					}
					setState(1775); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1777);
				match(RIGHT_PAREN);
				}
			}

			setState(1783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1781);
				table_compression();
				}
				break;
			case 2:
				{
				setState(1782);
				key_compression();
				}
				break;
			}
			setState(1799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(1785);
				match(OVERFLOW);
				setState(1786);
				match(STORE);
				setState(1787);
				match(IN);
				setState(1788);
				match(LEFT_PAREN);
				setState(1793); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1790);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1789);
						match(COMMA);
						}
					}

					setState(1792);
					tablespace();
					}
					}
					setState(1795); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1797);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partition_quantityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Hash_partition_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHash_partition_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHash_partition_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHash_partition_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partition_quantityContext hash_partition_quantity() throws RecognitionException {
		Hash_partition_quantityContext _localctx = new Hash_partition_quantityContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_hash_partition_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Local_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public On_range_partitioned_tableContext on_range_partitioned_table() {
			return getRuleContext(On_range_partitioned_tableContext.class,0);
		}
		public On_list_partitioned_tableContext on_list_partitioned_table() {
			return getRuleContext(On_list_partitioned_tableContext.class,0);
		}
		public On_hash_partitioned_tableContext on_hash_partitioned_table() {
			return getRuleContext(On_hash_partitioned_tableContext.class,0);
		}
		public On_comp_partitioned_tableContext on_comp_partitioned_table() {
			return getRuleContext(On_comp_partitioned_tableContext.class,0);
		}
		public Local_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_partitioned_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLocal_partitioned_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLocal_partitioned_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLocal_partitioned_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_partitioned_indexContext local_partitioned_index() throws RecognitionException {
		Local_partitioned_indexContext _localctx = new Local_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_local_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			match(LOCAL);
			setState(1808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1804);
				on_range_partitioned_table();
				}
				break;
			case 2:
				{
				setState(1805);
				on_list_partitioned_table();
				}
				break;
			case 3:
				{
				setState(1806);
				on_hash_partitioned_table();
				}
				break;
			case 4:
				{
				setState(1807);
				on_comp_partitioned_table();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_range_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(plsqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(plsqlParser.UNUSABLE, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_range_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_range_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOn_range_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOn_range_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOn_range_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_range_partitioned_tableContext on_range_partitioned_table() throws RecognitionException {
		On_range_partitioned_tableContext _localctx = new On_range_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_on_range_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1810);
			match(LEFT_PAREN);
			setState(1829); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1811);
					match(COMMA);
					}
				}

				setState(1814);
				match(PARTITION);
				setState(1816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1815);
					partition_name();
					}
					break;
				}
				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1820); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1820);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1818);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1819);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1822); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE) {
					{
					setState(1826);
					match(UNUSABLE);
					}
				}

				}
				}
				setState(1831); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1833);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_list_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(plsqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(plsqlParser.UNUSABLE, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_list_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_list_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOn_list_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOn_list_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOn_list_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_list_partitioned_tableContext on_list_partitioned_table() throws RecognitionException {
		On_list_partitioned_tableContext _localctx = new On_list_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_on_list_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1835);
			match(LEFT_PAREN);
			setState(1854); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1836);
					match(COMMA);
					}
				}

				setState(1839);
				match(PARTITION);
				setState(1841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1840);
					partition_name();
					}
					break;
				}
				setState(1849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1845); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1845);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1843);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1844);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1847); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE) {
					{
					setState(1851);
					match(UNUSABLE);
					}
				}

				}
				}
				setState(1856); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1858);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_hash_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(plsqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(plsqlParser.UNUSABLE, i);
		}
		public On_hash_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_hash_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOn_hash_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOn_hash_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOn_hash_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_hash_partitioned_tableContext on_hash_partitioned_table() throws RecognitionException {
		On_hash_partitioned_tableContext _localctx = new On_hash_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_on_hash_partitioned_table);
		int _la;
		try {
			setState(1896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1860);
				match(STORE);
				setState(1861);
				match(IN);
				setState(1862);
				match(LEFT_PAREN);
				setState(1867); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1863);
						match(COMMA);
						}
					}

					setState(1866);
					tablespace();
					}
					}
					setState(1869); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1871);
				match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1873);
				match(LEFT_PAREN);
				setState(1891); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1875);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1874);
						match(COMMA);
						}
					}

					setState(1877);
					match(PARTITION);
					setState(1879);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
					case 1:
						{
						setState(1878);
						partition_name();
						}
						break;
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(1881);
						match(TABLESPACE);
						setState(1882);
						tablespace();
						}
					}

					setState(1886);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(1885);
						key_compression();
						}
					}

					setState(1889);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE) {
						{
						setState(1888);
						match(UNUSABLE);
						}
					}

					}
					}
					setState(1893); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(1895);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_comp_partitioned_tableContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(plsqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(plsqlParser.UNUSABLE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<Index_subpartition_clauseContext> index_subpartition_clause() {
			return getRuleContexts(Index_subpartition_clauseContext.class);
		}
		public Index_subpartition_clauseContext index_subpartition_clause(int i) {
			return getRuleContext(Index_subpartition_clauseContext.class,i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public On_comp_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_comp_partitioned_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOn_comp_partitioned_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOn_comp_partitioned_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOn_comp_partitioned_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_comp_partitioned_tableContext on_comp_partitioned_table() throws RecognitionException {
		On_comp_partitioned_tableContext _localctx = new On_comp_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_on_comp_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(1898);
				match(STORE);
				setState(1899);
				match(IN);
				setState(1900);
				match(LEFT_PAREN);
				setState(1905); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1902);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1901);
						match(COMMA);
						}
					}

					setState(1904);
					tablespace();
					}
					}
					setState(1907); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1909);
				match(RIGHT_PAREN);
				}
			}

			setState(1913);
			match(LEFT_PAREN);
			setState(1933); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1914);
					match(COMMA);
					}
				}

				setState(1917);
				match(PARTITION);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
					{
					setState(1918);
					partition_name();
					}
				}

				setState(1927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(1923); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1923);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(1921);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(1922);
							key_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1925); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & 598134325510145L) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(1929);
				match(UNUSABLE);
				setState(1931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE || _la==LEFT_PAREN) {
					{
					setState(1930);
					index_subpartition_clause();
					}
				}

				}
				}
				setState(1935); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(1937);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_subpartition_clauseContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> SUBPARTITION() { return getTokens(plsqlParser.SUBPARTITION); }
		public TerminalNode SUBPARTITION(int i) {
			return getToken(plsqlParser.SUBPARTITION, i);
		}
		public List<Subpartition_nameContext> subpartition_name() {
			return getRuleContexts(Subpartition_nameContext.class);
		}
		public Subpartition_nameContext subpartition_name(int i) {
			return getRuleContext(Subpartition_nameContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Key_compressionContext> key_compression() {
			return getRuleContexts(Key_compressionContext.class);
		}
		public Key_compressionContext key_compression(int i) {
			return getRuleContext(Key_compressionContext.class,i);
		}
		public List<TerminalNode> UNUSABLE() { return getTokens(plsqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(plsqlParser.UNUSABLE, i);
		}
		public Index_subpartition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_subpartition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_subpartition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_subpartition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_subpartition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_subpartition_clauseContext index_subpartition_clause() throws RecognitionException {
		Index_subpartition_clauseContext _localctx = new Index_subpartition_clauseContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_index_subpartition_clause);
		int _la;
		try {
			setState(1975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1939);
				match(STORE);
				setState(1940);
				match(IN);
				setState(1941);
				match(LEFT_PAREN);
				setState(1946); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1943);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1942);
						match(COMMA);
						}
					}

					setState(1945);
					tablespace();
					}
					}
					setState(1948); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(1950);
				match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1952);
				match(LEFT_PAREN);
				setState(1970); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1954);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1953);
						match(COMMA);
						}
					}

					setState(1956);
					match(SUBPARTITION);
					setState(1958);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
					case 1:
						{
						setState(1957);
						subpartition_name();
						}
						break;
					}
					setState(1962);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(1960);
						match(TABLESPACE);
						setState(1961);
						tablespace();
						}
					}

					setState(1965);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(1964);
						key_compression();
						}
					}

					setState(1968);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE) {
						{
						setState(1967);
						match(UNUSABLE);
						}
					}

					}
					}
					setState(1972); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==SUBPARTITION || _la==COMMA );
				setState(1974);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subpartition_nameContext extends ParserRuleContext {
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Subpartition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubpartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubpartition_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubpartition_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_nameContext subpartition_name() throws RecognitionException {
		Subpartition_nameContext _localctx = new Subpartition_nameContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Domain_index_clauseContext extends ParserRuleContext {
		public IndextypeContext indextype() {
			return getRuleContext(IndextypeContext.class,0);
		}
		public Local_domain_index_clauseContext local_domain_index_clause() {
			return getRuleContext(Local_domain_index_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Odci_parametersContext odci_parameters() {
			return getRuleContext(Odci_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDomain_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDomain_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDomain_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_index_clauseContext domain_index_clause() throws RecognitionException {
		Domain_index_clauseContext _localctx = new Domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_domain_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1979);
			indextype();
			setState(1981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(1980);
				local_domain_index_clause();
				}
			}

			setState(1984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(1983);
				parallel_clause();
				}
			}

			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1986);
				match(PARAMETERS);
				setState(1987);
				match(LEFT_PAREN);
				setState(1988);
				odci_parameters();
				setState(1989);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IndextypeContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public IndextypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indextype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndextype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndextype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndextype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndextypeContext indextype() throws RecognitionException {
		IndextypeContext _localctx = new IndextypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_indextype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1993);
				id_expression();
				setState(1994);
				match(PERIOD);
				}
				break;
			}
			setState(1998);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Odci_parametersContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Odci_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_odci_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOdci_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOdci_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOdci_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Odci_parametersContext odci_parameters() throws RecognitionException {
		Odci_parametersContext _localctx = new Odci_parametersContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_odci_parameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2000);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Local_domain_index_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> PARAMETERS() { return getTokens(plsqlParser.PARAMETERS); }
		public TerminalNode PARAMETERS(int i) {
			return getToken(plsqlParser.PARAMETERS, i);
		}
		public List<Odci_parametersContext> odci_parameters() {
			return getRuleContexts(Odci_parametersContext.class);
		}
		public Odci_parametersContext odci_parameters(int i) {
			return getRuleContext(Odci_parametersContext.class,i);
		}
		public Local_domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_domain_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLocal_domain_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLocal_domain_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLocal_domain_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_domain_index_clauseContext local_domain_index_clause() throws RecognitionException {
		Local_domain_index_clauseContext _localctx = new Local_domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_local_domain_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2002);
			match(LOCAL);
			setState(2022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2003);
				match(LEFT_PAREN);
				setState(2016); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2004);
						match(COMMA);
						}
					}

					setState(2007);
					match(PARTITION);
					setState(2008);
					partition_name();
					setState(2014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PARAMETERS) {
						{
						setState(2009);
						match(PARAMETERS);
						setState(2010);
						match(LEFT_PAREN);
						setState(2011);
						odci_parameters();
						setState(2012);
						match(RIGHT_PAREN);
						}
					}

					}
					}
					setState(2018); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2020);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlindex_clauseContext extends ParserRuleContext {
		public TerminalNode XMLINDEX() { return getToken(plsqlParser.XMLINDEX, 0); }
		public TerminalNode XDB() { return getToken(plsqlParser.XDB, 0); }
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Local_xmlindex_clauseContext local_xmlindex_clause() {
			return getRuleContext(Local_xmlindex_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Xmlindex_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlindex_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlindex_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlindex_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlindex_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlindex_clauseContext xmlindex_clause() throws RecognitionException {
		Xmlindex_clauseContext _localctx = new Xmlindex_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_xmlindex_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XDB) {
				{
				setState(2024);
				match(XDB);
				setState(2025);
				match(PERIOD);
				}
			}

			setState(2028);
			match(XMLINDEX);
			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2029);
				local_xmlindex_clause();
				}
			}

			setState(2033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(2032);
				parallel_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Local_xmlindex_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Local_xmlindex_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_xmlindex_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLocal_xmlindex_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLocal_xmlindex_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLocal_xmlindex_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_xmlindex_clauseContext local_xmlindex_clause() throws RecognitionException {
		Local_xmlindex_clauseContext _localctx = new Local_xmlindex_clauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_local_xmlindex_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(LOCAL);
			setState(2048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2036);
				match(LEFT_PAREN);
				setState(2042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2037);
						match(COMMA);
						}
					}

					setState(2040);
					match(PARTITION);
					setState(2041);
					partition_name();
					}
					}
					setState(2044); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2046);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bitmap_join_index_clauseContext extends ParserRuleContext {
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public Local_partitioned_indexContext local_partitioned_index() {
			return getRuleContext(Local_partitioned_indexContext.class,0);
		}
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public Bitmap_join_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitmap_join_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBitmap_join_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBitmap_join_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBitmap_join_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bitmap_join_index_clauseContext bitmap_join_index_clause() throws RecognitionException {
		Bitmap_join_index_clauseContext _localctx = new Bitmap_join_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_bitmap_join_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			tableview_name();
			setState(2051);
			match(LEFT_PAREN);
			setState(2063); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2052);
					match(COMMA);
					}
				}

				setState(2057);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
				case 1:
					{
					setState(2055);
					tableview_name();
					}
					break;
				case 2:
					{
					setState(2056);
					table_alias();
					}
					break;
				}
				setState(2059);
				column_name();
				setState(2061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(2060);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(2065); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2067);
			match(RIGHT_PAREN);
			setState(2068);
			match(FROM);
			setState(2075); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2069);
					match(COMMA);
					}
				}

				setState(2072);
				tableview_name();
				setState(2073);
				table_alias();
				}
				}
				setState(2077); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2079);
			where_clause();
			setState(2081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2080);
				local_partitioned_index();
				}
			}

			setState(2084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==INVISIBLE || _la==LOGGING || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & 1298162592589615121L) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & 2306405959167115265L) != 0) || _la==TABLESPACE || _la==VISIBLE) {
				{
				setState(2083);
				index_attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relational_tableContext relational_table() {
			return getRuleContext(Relational_tableContext.class,0);
		}
		public Object_tableContext object_table() {
			return getRuleContext(Object_tableContext.class,0);
		}
		public Xmltype_tableContext xmltype_table() {
			return getRuleContext(Xmltype_tableContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(plsqlParser.TEMPORARY, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode GLOBAL() { return getToken(plsqlParser.GLOBAL, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086);
			match(CREATE);
			setState(2091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==TEMPORARY) {
				{
				setState(2088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(2087);
					match(GLOBAL);
					}
				}

				setState(2090);
				match(TEMPORARY);
				}
			}

			setState(2093);
			match(TABLE);
			setState(2094);
			tableview_name();
			setState(2098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2095);
				relational_table();
				}
				break;
			case 2:
				{
				setState(2096);
				object_table();
				}
				break;
			case 3:
				{
				setState(2097);
				xmltype_table();
				}
				break;
			}
			setState(2102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2100);
				match(AS);
				setState(2101);
				select_statement();
				}
			}

			setState(2124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2104);
				match(PARTITION);
				setState(2105);
				match(OF);
				setState(2106);
				tableview_name();
				setState(2122);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					{
					setState(2107);
					match(FOR);
					setState(2108);
					match(VALUES);
					setState(2109);
					match(IN);
					setState(2110);
					match(LEFT_PAREN);
					setState(2111);
					expression(0);
					setState(2116);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2112);
						match(COMMA);
						setState(2113);
						expression(0);
						}
						}
						setState(2118);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2119);
					match(RIGHT_PAREN);
					}
					}
					break;
				case DEFAULT:
					{
					setState(2121);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_tableContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Relational_propertiesContext relational_properties() {
			return getRuleContext(Relational_propertiesContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(plsqlParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(plsqlParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(plsqlParser.NOROWDEPENDENCIES, 0); }
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public Relational_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelational_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_tableContext relational_table() throws RecognitionException {
		Relational_tableContext _localctx = new Relational_tableContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_relational_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2126);
				match(LEFT_PAREN);
				setState(2127);
				relational_properties();
				setState(2128);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(2136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2132);
				match(ON);
				setState(2133);
				match(COMMIT);
				setState(2134);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2135);
				match(ROWS);
				}
			}

			setState(2139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4503737066323969L) != 0)) {
				{
				setState(2138);
				physical_properties();
				}
			}

			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(2141);
				column_properties();
				}
			}

			setState(2145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2144);
				table_partitioning_clauses();
				}
				break;
			}
			setState(2148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(2147);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(2150);
				match(RESULT_CACHE);
				setState(2151);
				match(LEFT_PAREN);
				setState(2152);
				match(MODE);
				setState(2153);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2154);
				match(RIGHT_PAREN);
				}
			}

			setState(2158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(2157);
				parallel_clause();
				}
			}

			setState(2161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(2160);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2164); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2163);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2166); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(2170);
				row_movement_clause();
				}
			}

			setState(2174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(2173);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_propertiesContext extends ParserRuleContext {
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<Virtual_column_definitionContext> virtual_column_definition() {
			return getRuleContexts(Virtual_column_definitionContext.class);
		}
		public Virtual_column_definitionContext virtual_column_definition(int i) {
			return getRuleContext(Virtual_column_definitionContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<Out_of_line_ref_constraintContext> out_of_line_ref_constraint() {
			return getRuleContexts(Out_of_line_ref_constraintContext.class);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint(int i) {
			return getRuleContext(Out_of_line_ref_constraintContext.class,i);
		}
		public List<Supplemental_logging_propsContext> supplemental_logging_props() {
			return getRuleContexts(Supplemental_logging_propsContext.class);
		}
		public Supplemental_logging_propsContext supplemental_logging_props(int i) {
			return getRuleContext(Supplemental_logging_propsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Relational_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelational_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_propertiesContext relational_properties() throws RecognitionException {
		Relational_propertiesContext _localctx = new Relational_propertiesContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_relational_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2176);
					match(COMMA);
					}
				}

				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(2179);
					column_definition();
					}
					break;
				case 2:
					{
					setState(2180);
					virtual_column_definition();
					}
					break;
				case 3:
					{
					setState(2181);
					out_of_line_constraint();
					}
					break;
				case 4:
					{
					setState(2182);
					out_of_line_ref_constraint();
					}
					break;
				case 5:
					{
					setState(2183);
					supplemental_logging_props();
					}
					break;
				}
				}
				}
				setState(2188); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -309066313701506576L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1264687428713654483L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -4630835390785947345L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -570840877992288277L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545483706385L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public TerminalNode SORT() { return getToken(plsqlParser.SORT, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ENCRYPT() { return getToken(plsqlParser.ENCRYPT, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(plsqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(plsqlParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(plsqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode SALT() { return getToken(plsqlParser.SALT, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			column_name();
			setState(2193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2191);
				datatype();
				}
				break;
			case 2:
				{
				setState(2192);
				type_name();
				}
				break;
			}
			setState(2196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(2195);
				match(SORT);
				}
			}

			setState(2200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2198);
				match(DEFAULT);
				setState(2199);
				expression(0);
				}
				break;
			}
			setState(2221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPT) {
				{
				setState(2202);
				match(ENCRYPT);
				setState(2205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2203);
					match(USING);
					setState(2204);
					match(CHAR_STRING);
					}
				}

				setState(2210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IDENTIFIED) {
					{
					setState(2207);
					match(IDENTIFIED);
					setState(2208);
					match(BY);
					setState(2209);
					regular_id();
					}
				}

				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR_STRING) {
					{
					setState(2212);
					match(CHAR_STRING);
					}
				}

				setState(2219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(2216);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(2215);
						match(NO);
						}
					}

					setState(2218);
					match(SALT);
					}
					break;
				}
				}
			}

			setState(2230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2223);
						inline_constraint();
						}
						} 
					}
					setState(2228);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(2229);
				inline_ref_constraint();
				}
				break;
			}
			setState(2234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2232);
				match(DEFAULT);
				setState(2233);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Inline_ref_constraintContext extends ParserRuleContext {
		public TerminalNode SCOPE() { return getToken(plsqlParser.SCOPE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Inline_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_ref_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInline_ref_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInline_ref_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInline_ref_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_ref_constraintContext inline_ref_constraint() throws RecognitionException {
		Inline_ref_constraintContext _localctx = new Inline_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_inline_ref_constraint);
		int _la;
		try {
			setState(2249);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2236);
				match(SCOPE);
				setState(2237);
				match(IS);
				setState(2238);
				tableview_name();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2239);
				match(WITH);
				setState(2240);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2241);
					match(CONSTRAINT);
					setState(2242);
					constraint_name();
					}
				}

				setState(2245);
				references_clause();
				setState(2247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(2246);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Virtual_column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(plsqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(plsqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(plsqlParser.VIRTUAL, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Virtual_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtual_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVirtual_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVirtual_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVirtual_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Virtual_column_definitionContext virtual_column_definition() throws RecognitionException {
		Virtual_column_definitionContext _localctx = new Virtual_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_virtual_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2251);
			column_name();
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & 2231372061L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 10737418627L) != 0) || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & 49539595917852673L) != 0) || ((((_la - 279)) & ~0x3f) == 0 && ((1L << (_la - 279)) & 11551768577L) != 0) || ((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & -9222932232203665401L) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & 140771848093697L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & 1121501864525859L) != 0) || ((((_la - 552)) & ~0x3f) == 0 && ((1L << (_la - 552)) & 2814749767106753L) != 0)) {
				{
				setState(2252);
				datatype();
				}
			}

			setState(2257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GENERATED) {
				{
				setState(2255);
				match(GENERATED);
				setState(2256);
				match(ALWAYS);
				}
			}

			setState(2259);
			match(AS);
			setState(2260);
			match(LEFT_PAREN);
			setState(2261);
			expression(0);
			setState(2262);
			match(RIGHT_PAREN);
			setState(2264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VIRTUAL) {
				{
				setState(2263);
				match(VIRTUAL);
				}
			}

			setState(2269);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,232,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2266);
					inline_constraint();
					}
					} 
				}
				setState(2271);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,232,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOut_of_line_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOut_of_line_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_out_of_line_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2272);
				match(CONSTRAINT);
				setState(2273);
				constraint_name();
				}
			}

			setState(2287);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(2276);
				match(UNIQUE);
				setState(2277);
				paren_column_list();
				}
				break;
			case PRIMARY:
				{
				setState(2278);
				match(PRIMARY);
				setState(2279);
				match(KEY);
				setState(2280);
				paren_column_list();
				}
				break;
			case FOREIGN:
				{
				setState(2281);
				foreign_key_clause();
				}
				break;
			case CHECK:
				{
				setState(2282);
				match(CHECK);
				setState(2283);
				match(LEFT_PAREN);
				setState(2284);
				expression(0);
				setState(2285);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			setState(2290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2289);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(plsqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForeign_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitForeign_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(FOREIGN);
			setState(2293);
			match(KEY);
			setState(2294);
			paren_column_list();
			setState(2295);
			references_clause();
			setState(2297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2296);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOn_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOn_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299);
			match(ON);
			setState(2300);
			match(DELETE);
			setState(2304);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2301);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(2302);
				match(SET);
				setState(2303);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Out_of_line_ref_constraintContext extends ParserRuleContext {
		public Regular_idContext ref_col_or_attr;
		public TerminalNode SCOPE() { return getToken(plsqlParser.SCOPE, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode FOREIGN() { return getToken(plsqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Out_of_line_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_ref_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOut_of_line_ref_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOut_of_line_ref_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOut_of_line_ref_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_ref_constraintContext out_of_line_ref_constraint() throws RecognitionException {
		Out_of_line_ref_constraintContext _localctx = new Out_of_line_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_out_of_line_ref_constraint);
		int _la;
		try {
			setState(2341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2306);
				match(SCOPE);
				setState(2307);
				match(FOR);
				setState(2308);
				match(LEFT_PAREN);
				setState(2309);
				((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
				setState(2310);
				match(RIGHT_PAREN);
				setState(2311);
				match(IS);
				setState(2312);
				tableview_name();
				}
				break;
			case REF:
				enterOuterAlt(_localctx, 2);
				{
				setState(2314);
				match(REF);
				setState(2315);
				match(LEFT_PAREN);
				setState(2316);
				((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
				setState(2317);
				match(RIGHT_PAREN);
				setState(2318);
				match(WITH);
				setState(2319);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2321);
					match(CONSTRAINT);
					setState(2322);
					constraint_name();
					}
				}

				setState(2325);
				match(FOREIGN);
				setState(2326);
				match(KEY);
				setState(2327);
				match(LEFT_PAREN);
				setState(2332); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2328);
						match(COMMA);
						}
					}

					setState(2331);
					((Out_of_line_ref_constraintContext)_localctx).ref_col_or_attr = regular_id();
					}
					}
					setState(2334); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(2336);
				match(RIGHT_PAREN);
				setState(2337);
				references_clause();
				setState(2339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(2338);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Supplemental_logging_propsContext extends ParserRuleContext {
		public TerminalNode SUPPLEMENTAL() { return getToken(plsqlParser.SUPPLEMENTAL, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause() {
			return getRuleContext(Supplemental_log_grp_clauseContext.class,0);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause() {
			return getRuleContext(Supplemental_id_key_clauseContext.class,0);
		}
		public Supplemental_logging_propsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_logging_props; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSupplemental_logging_props(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSupplemental_logging_props(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSupplemental_logging_props(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_logging_propsContext supplemental_logging_props() throws RecognitionException {
		Supplemental_logging_propsContext _localctx = new Supplemental_logging_propsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_supplemental_logging_props);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			match(SUPPLEMENTAL);
			setState(2344);
			match(LOG);
			setState(2347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				{
				setState(2345);
				supplemental_log_grp_clause();
				}
				break;
			case DATA:
				{
				setState(2346);
				supplemental_id_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Supplemental_log_grp_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Log_grpContext log_grp() {
			return getRuleContext(Log_grpContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode ALWAYS() { return getToken(plsqlParser.ALWAYS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TerminalNode> NO() { return getTokens(plsqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(plsqlParser.NO, i);
		}
		public List<TerminalNode> LOG() { return getTokens(plsqlParser.LOG); }
		public TerminalNode LOG(int i) {
			return getToken(plsqlParser.LOG, i);
		}
		public Supplemental_log_grp_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_log_grp_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSupplemental_log_grp_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSupplemental_log_grp_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSupplemental_log_grp_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_log_grp_clauseContext supplemental_log_grp_clause() throws RecognitionException {
		Supplemental_log_grp_clauseContext _localctx = new Supplemental_log_grp_clauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_supplemental_log_grp_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2349);
			match(GROUP);
			setState(2350);
			log_grp();
			setState(2351);
			match(LEFT_PAREN);
			setState(2360); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2352);
					match(COMMA);
					}
				}

				setState(2355);
				regular_id();
				setState(2358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2356);
					match(NO);
					setState(2357);
					match(LOG);
					}
					break;
				}
				}
				}
				setState(2362); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(2364);
			match(RIGHT_PAREN);
			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALWAYS) {
				{
				setState(2365);
				match(ALWAYS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Log_grpContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Log_grpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_grp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLog_grp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLog_grp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLog_grp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Log_grpContext log_grp() throws RecognitionException {
		Log_grpContext _localctx = new Log_grpContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_log_grp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Supplemental_id_key_clauseContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<TerminalNode> ALL() { return getTokens(plsqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(plsqlParser.ALL, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(plsqlParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(plsqlParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(plsqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(plsqlParser.KEY, i);
		}
		public List<TerminalNode> UNIQUE() { return getTokens(plsqlParser.UNIQUE); }
		public TerminalNode UNIQUE(int i) {
			return getToken(plsqlParser.UNIQUE, i);
		}
		public List<TerminalNode> FOREIGN() { return getTokens(plsqlParser.FOREIGN); }
		public TerminalNode FOREIGN(int i) {
			return getToken(plsqlParser.FOREIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Supplemental_id_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_id_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSupplemental_id_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSupplemental_id_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSupplemental_id_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_id_key_clauseContext supplemental_id_key_clause() throws RecognitionException {
		Supplemental_id_key_clauseContext _localctx = new Supplemental_id_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_supplemental_id_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(DATA);
			setState(2371);
			match(LEFT_PAREN);
			setState(2383); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2372);
					match(COMMA);
					}
				}

				setState(2381);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(2375);
					match(ALL);
					}
					break;
				case PRIMARY:
					{
					setState(2376);
					match(PRIMARY);
					setState(2377);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(2378);
					match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					setState(2379);
					match(FOREIGN);
					setState(2380);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(2385); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA );
			setState(2387);
			match(RIGHT_PAREN);
			setState(2388);
			match(COLUMNS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPhysical_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(2390);
				deferred_segment_creation();
				}
			}

			setState(2393);
			segment_attributes_clause();
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==NOCOMPRESS) {
				{
				setState(2394);
				table_compression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(plsqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeferred_segment_creation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDeferred_segment_creation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(SEGMENT);
			setState(2398);
			match(CREATION);
			setState(2399);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public Id_expressionContext tablespace_name;
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSegment_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSegment_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_segment_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2405); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2405);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(2401);
						physical_attributes_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(2402);
						match(TABLESPACE);
						setState(2403);
						((Segment_attributes_clauseContext)_localctx).tablespace_name = id_expression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(2404);
						logging_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2407); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public Token pctfree;
		public Token pctused;
		public Token inittrans;
		public List<TerminalNode> PCTFREE() { return getTokens(plsqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(plsqlParser.PCTFREE, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(plsqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(plsqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(plsqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(plsqlParser.INITRANS, i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPhysical_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2416); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2416);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(2409);
						match(PCTFREE);
						setState(2410);
						((Physical_attributes_clauseContext)_localctx).pctfree = match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(2411);
						match(PCTUSED);
						setState(2412);
						((Physical_attributes_clauseContext)_localctx).pctused = match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(2413);
						match(INITRANS);
						setState(2414);
						((Physical_attributes_clauseContext)_localctx).inittrans = match(UNSIGNED_INTEGER);
						}
						break;
					case STORAGE:
						{
						setState(2415);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2418); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Storage_clauseContext extends ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public Token minextents;
		public Token pctincrease;
		public Token freelists;
		public Token freelist_groups;
		public TerminalNode STORAGE() { return getToken(plsqlParser.STORAGE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(plsqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(plsqlParser.INITIAL, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(plsqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(plsqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(plsqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(plsqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> MAXEXTENTS() { return getTokens(plsqlParser.MAXEXTENTS); }
		public TerminalNode MAXEXTENTS(int i) {
			return getToken(plsqlParser.MAXEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(plsqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(plsqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(plsqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(plsqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(plsqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(plsqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(plsqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(plsqlParser.GROUPS, i);
		}
		public List<TerminalNode> OPTIMAL() { return getTokens(plsqlParser.OPTIMAL); }
		public TerminalNode OPTIMAL(int i) {
			return getToken(plsqlParser.OPTIMAL, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(plsqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(plsqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(plsqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(plsqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(plsqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(plsqlParser.ENCRYPT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(plsqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(plsqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(plsqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(plsqlParser.RECYCLE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(plsqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(plsqlParser.NONE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(plsqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(plsqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStorage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStorage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(STORAGE);
			setState(2421);
			match(LEFT_PAREN);
			setState(2447); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2447);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(2422);
					match(INITIAL);
					setState(2423);
					((Storage_clauseContext)_localctx).initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					setState(2424);
					match(NEXT);
					setState(2425);
					((Storage_clauseContext)_localctx).next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					setState(2426);
					match(MINEXTENTS);
					setState(2427);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAXEXTENTS:
					{
					setState(2428);
					match(MAXEXTENTS);
					setState(2429);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(2430);
					match(PCTINCREASE);
					setState(2431);
					((Storage_clauseContext)_localctx).pctincrease = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(2432);
					match(FREELISTS);
					setState(2433);
					((Storage_clauseContext)_localctx).freelists = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(2434);
					match(FREELIST);
					setState(2435);
					match(GROUPS);
					setState(2436);
					((Storage_clauseContext)_localctx).freelist_groups = match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					setState(2437);
					match(OPTIMAL);
					setState(2440);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(2438);
						size_clause();
						}
						break;
					case NULL:
						{
						setState(2439);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					setState(2442);
					match(BUFFER_POOL);
					setState(2443);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(2444);
					match(FLASH_CACHE);
					setState(2445);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPT:
					{
					setState(2446);
					match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2449); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & 825707462657L) != 0) || _la==INITIAL || _la==MAXEXTENTS || _la==MINEXTENTS || _la==NEXT || _la==OPTIMAL || _la==PCTINCREASE );
			setState(2451);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSize_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSize_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSize_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_size_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(UNSIGNED_INTEGER);
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGULAR_ID) {
				{
				setState(2454);
				match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(plsqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(plsqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLogging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_propertiesContext extends ParserRuleContext {
		public Object_type_col_propertiesContext object_type_col_properties() {
			return getRuleContext(Object_type_col_propertiesContext.class,0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return getRuleContext(Nested_table_col_propertiesContext.class,0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return getRuleContext(Varray_col_propertiesContext.class,0);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Xmltype_column_propertiesContext xmltype_column_properties() {
			return getRuleContext(Xmltype_column_propertiesContext.class,0);
		}
		public Column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_propertiesContext column_properties() throws RecognitionException {
		Column_propertiesContext _localctx = new Column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_column_properties);
		try {
			setState(2466);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2459);
				object_type_col_properties();
				}
				break;
			case NESTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(2460);
				nested_table_col_properties();
				}
				break;
			case LOB:
			case VARRAY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2463);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VARRAY:
					{
					setState(2461);
					varray_col_properties();
					}
					break;
				case LOB:
					{
					setState(2462);
					lob_storage_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case XMLTYPE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2465);
				xmltype_column_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_col_propertiesContext extends ParserRuleContext {
		public Regular_idContext column;
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Object_type_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_type_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_col_propertiesContext object_type_col_properties() throws RecognitionException {
		Object_type_col_propertiesContext _localctx = new Object_type_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_object_type_col_properties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468);
			match(COLUMN);
			setState(2469);
			((Object_type_col_propertiesContext)_localctx).column = regular_id();
			setState(2470);
			substitutable_column_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Substitutable_column_clauseContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(plsqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Substitutable_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substitutable_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubstitutable_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubstitutable_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubstitutable_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Substitutable_column_clauseContext substitutable_column_clause() throws RecognitionException {
		Substitutable_column_clauseContext _localctx = new Substitutable_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_substitutable_column_clause);
		int _la;
		try {
			setState(2491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELEMENT:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(2472);
					match(ELEMENT);
					}
				}

				setState(2475);
				match(IS);
				setState(2476);
				match(OF);
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(2477);
					match(TYPE);
					}
				}

				setState(2480);
				match(LEFT_PAREN);
				setState(2481);
				type_name();
				setState(2482);
				match(RIGHT_PAREN);
				}
				break;
			case NOT:
			case SUBSTITUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2484);
					match(NOT);
					}
				}

				setState(2487);
				match(SUBSTITUTABLE);
				setState(2488);
				match(AT);
				setState(2489);
				match(ALL);
				setState(2490);
				match(LEVELS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nested_table_col_propertiesContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Nested_itemContext nested_item() {
			return getRuleContext(Nested_itemContext.class,0);
		}
		public TerminalNode COLUMN_VALUE() { return getToken(plsqlParser.COLUMN_VALUE, 0); }
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(plsqlParser.GLOBAL, 0); }
		public TerminalNode LOCATOR() { return getToken(plsqlParser.LOCATOR, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Object_propertiesContext> object_properties() {
			return getRuleContexts(Object_propertiesContext.class);
		}
		public Object_propertiesContext object_properties(int i) {
			return getRuleContext(Object_propertiesContext.class,i);
		}
		public List<Physical_propertiesContext> physical_properties() {
			return getRuleContexts(Physical_propertiesContext.class);
		}
		public Physical_propertiesContext physical_properties(int i) {
			return getRuleContext(Physical_propertiesContext.class,i);
		}
		public List<Column_propertiesContext> column_properties() {
			return getRuleContexts(Column_propertiesContext.class);
		}
		public Column_propertiesContext column_properties(int i) {
			return getRuleContext(Column_propertiesContext.class,i);
		}
		public Nested_table_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNested_table_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_col_propertiesContext nested_table_col_properties() throws RecognitionException {
		Nested_table_col_propertiesContext _localctx = new Nested_table_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_nested_table_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			match(NESTED);
			setState(2494);
			match(TABLE);
			setState(2497);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				{
				setState(2495);
				nested_item();
				}
				break;
			case COLUMN_VALUE:
				{
				setState(2496);
				match(COLUMN_VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
				{
				setState(2499);
				substitutable_column_clause();
				}
			}

			setState(2503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				setState(2502);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2505);
			match(STORE);
			setState(2506);
			match(AS);
			setState(2507);
			tableview_name();
			setState(2521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2508);
				match(LEFT_PAREN);
				setState(2515); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2515);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LEFT_PAREN:
						{
						setState(2509);
						match(LEFT_PAREN);
						setState(2510);
						object_properties();
						setState(2511);
						match(RIGHT_PAREN);
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case SEGMENT:
					case STORAGE:
					case TABLESPACE:
						{
						setState(2513);
						physical_properties();
						}
						break;
					case COLUMN:
					case LOB:
					case NESTED:
					case VARRAY:
					case XMLTYPE:
						{
						setState(2514);
						column_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2517); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COLUMN || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & 36046389205008449L) != 0) || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4503737066323969L) != 0) || _la==VARRAY || _la==XMLTYPE || _la==LEFT_PAREN );
				setState(2519);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(2528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2523);
				match(RETURN);
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2524);
					match(AS);
					}
				}

				setState(2527);
				_la = _input.LA(1);
				if ( !(_la==LOCATOR || _la==VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nested_itemContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Nested_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNested_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_itemContext nested_item() throws RecognitionException {
		Nested_itemContext _localctx = new Nested_itemContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_nested_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530);
			regular_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return getRuleContext(Supplemental_logging_propsContext.class,0);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_propertiesContext object_properties() throws RecognitionException {
		Object_propertiesContext _localctx = new Object_propertiesContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_object_properties);
		int _la;
		try {
			int _alt;
			setState(2554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(2532);
					column_name();
					}
					break;
				case 2:
					{
					setState(2533);
					attribute_name();
					}
					break;
				}
				setState(2538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2536);
					match(DEFAULT);
					setState(2537);
					expression(0);
					}
				}

				setState(2549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(2544); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2541);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2540);
								match(COMMA);
								}
							}

							setState(2543);
							inline_constraint();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2546); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					setState(2548);
					inline_ref_constraint();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2551);
				out_of_line_constraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2552);
				out_of_line_ref_constraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2553);
				supplemental_logging_props();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInline_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInline_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2556);
				match(CONSTRAINT);
				setState(2557);
				constraint_name();
				}
			}

			setState(2569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2560);
					match(NOT);
					}
				}

				setState(2563);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(2564);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(2565);
				match(PRIMARY);
				setState(2566);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(2567);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(2568);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(2571);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(plsqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferences_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferences_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_references_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(REFERENCES);
			setState(2575);
			tableview_name();
			setState(2576);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Paren_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paren_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParen_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParen_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParen_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Paren_column_listContext paren_column_list() throws RecognitionException {
		Paren_column_listContext _localctx = new Paren_column_listContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_paren_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			match(LEFT_PAREN);
			setState(2579);
			column_list();
			setState(2580);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2582);
					match(COMMA);
					}
				}

				setState(2585);
				column_name();
				}
				}
				setState(2588); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Check_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCheck_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCheck_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCheck_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Check_constraintContext check_constraint() throws RecognitionException {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_check_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(CHECK);
			setState(2591);
			match(LEFT_PAREN);
			setState(2592);
			condition();
			setState(2593);
			match(RIGHT_PAREN);
			setState(2595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2594);
				match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(plsqlParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(plsqlParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALLY() { return getTokens(plsqlParser.INITIALLY); }
		public TerminalNode INITIALLY(int i) {
			return getToken(plsqlParser.INITIALLY, i);
		}
		public List<Using_index_clauseContext> using_index_clause() {
			return getRuleContexts(Using_index_clauseContext.class);
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return getRuleContext(Using_index_clauseContext.class,i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(plsqlParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(plsqlParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(plsqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(plsqlParser.DEFERRED, i);
		}
		public List<TerminalNode> RELY() { return getTokens(plsqlParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(plsqlParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(plsqlParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(plsqlParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(plsqlParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(plsqlParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(plsqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(plsqlParser.NOVALIDATE, i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2607); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2607);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(2598);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2597);
							match(NOT);
							}
						}

						setState(2600);
						match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						setState(2601);
						match(INITIALLY);
						setState(2602);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						setState(2603);
						_la = _input.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						setState(2604);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						setState(2605);
						_la = _input.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case USING:
						{
						setState(2606);
						using_index_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2609); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,290,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_index_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Index_attributesContext index_attributes() {
			return getRuleContext(Index_attributesContext.class,0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_index_clauseContext using_index_clause() throws RecognitionException {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_using_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(USING);
			setState(2612);
			match(INDEX);
			setState(2619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				setState(2613);
				index_name();
				}
				break;
			case 2:
				{
				setState(2614);
				match(LEFT_PAREN);
				setState(2615);
				create_index();
				setState(2616);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2618);
				index_attributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varray_col_propertiesContext extends ParserRuleContext {
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public Varray_itemContext varray_item() {
			return getRuleContext(Varray_itemContext.class,0);
		}
		public Varray_storage_clauseContext varray_storage_clause() {
			return getRuleContext(Varray_storage_clauseContext.class,0);
		}
		public Substitutable_column_clauseContext substitutable_column_clause() {
			return getRuleContext(Substitutable_column_clauseContext.class,0);
		}
		public Varray_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVarray_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_col_propertiesContext varray_col_properties() throws RecognitionException {
		Varray_col_propertiesContext _localctx = new Varray_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_varray_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			match(VARRAY);
			setState(2622);
			varray_item();
			setState(2628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
					{
					setState(2623);
					substitutable_column_clause();
					}
				}

				setState(2626);
				varray_storage_clause();
				}
				break;
			case 2:
				{
				setState(2627);
				substitutable_column_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varray_storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return getRuleContext(Lob_storage_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode SECUREFILE() { return getToken(plsqlParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(plsqlParser.BASICFILE, 0); }
		public Varray_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVarray_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_storage_clauseContext varray_storage_clause() throws RecognitionException {
		Varray_storage_clauseContext _localctx = new Varray_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_varray_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(STORE);
			setState(2631);
			match(AS);
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(2632);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2635);
			match(LOB);
			setState(2644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
					{
					setState(2636);
					lob_segname();
					}
				}

				setState(2639);
				match(LEFT_PAREN);
				setState(2640);
				lob_storage_parameters();
				setState(2641);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2643);
				lob_segname();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(plsqlParser.TABLESPACE, 0); }
		public TablespaceContext tablespace() {
			return getRuleContext(TablespaceContext.class,0);
		}
		public Lob_parametersContext lob_parameters() {
			return getRuleContext(Lob_parametersContext.class,0);
		}
		public Storage_clauseContext storage_clause() {
			return getRuleContext(Storage_clauseContext.class,0);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_storage_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lob_storage_parameters);
		int _la;
		try {
			setState(2653);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2646);
				match(TABLESPACE);
				setState(2647);
				tablespace();
				}
				break;
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2648);
				lob_parameters();
				setState(2650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2649);
					storage_clause();
					}
				}

				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2652);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_parametersContext extends ParserRuleContext {
		public List<TerminalNode> STORAGE() { return getTokens(plsqlParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(plsqlParser.STORAGE, i);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> CHUNK() { return getTokens(plsqlParser.CHUNK); }
		public TerminalNode CHUNK(int i) {
			return getToken(plsqlParser.CHUNK, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PCTVERSION() { return getTokens(plsqlParser.PCTVERSION); }
		public TerminalNode PCTVERSION(int i) {
			return getToken(plsqlParser.PCTVERSION, i);
		}
		public List<TerminalNode> FREEPOOLS() { return getTokens(plsqlParser.FREEPOOLS); }
		public TerminalNode FREEPOOLS(int i) {
			return getToken(plsqlParser.FREEPOOLS, i);
		}
		public List<Lob_retention_clauseContext> lob_retention_clause() {
			return getRuleContexts(Lob_retention_clauseContext.class);
		}
		public Lob_retention_clauseContext lob_retention_clause(int i) {
			return getRuleContext(Lob_retention_clauseContext.class,i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(plsqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(plsqlParser.ENCRYPT, i);
		}
		public List<Encryption_specContext> encryption_spec() {
			return getRuleContexts(Encryption_specContext.class);
		}
		public Encryption_specContext encryption_spec(int i) {
			return getRuleContext(Encryption_specContext.class,i);
		}
		public List<TerminalNode> DECRYPT() { return getTokens(plsqlParser.DECRYPT); }
		public TerminalNode DECRYPT(int i) {
			return getToken(plsqlParser.DECRYPT, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(plsqlParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(plsqlParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_lob_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2680); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2680);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
				case ENABLE:
					{
					setState(2655);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2656);
					match(STORAGE);
					setState(2657);
					match(IN);
					setState(2658);
					match(ROW);
					}
					break;
				case CHUNK:
					{
					setState(2659);
					match(CHUNK);
					setState(2660);
					match(UNSIGNED_INTEGER);
					}
					break;
				case PCTVERSION:
					{
					setState(2661);
					match(PCTVERSION);
					setState(2662);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREEPOOLS:
					{
					setState(2663);
					match(FREEPOOLS);
					setState(2664);
					match(UNSIGNED_INTEGER);
					}
					break;
				case RETENTION:
					{
					setState(2665);
					lob_retention_clause();
					}
					break;
				case DEDUPLICATE:
				case KEEP_DUPLICATES:
					{
					setState(2666);
					lob_deduplicate_clause();
					}
					break;
				case COMPRESS:
				case NOCOMPRESS:
					{
					setState(2667);
					lob_compression_clause();
					}
					break;
				case ENCRYPT:
					{
					setState(2668);
					match(ENCRYPT);
					setState(2669);
					encryption_spec();
					}
					break;
				case DECRYPT:
					{
					setState(2670);
					match(DECRYPT);
					}
					break;
				case CACHE:
				case NOCACHE:
					{
					setState(2675);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
					case 1:
						{
						setState(2671);
						match(CACHE);
						}
						break;
					case 2:
						{
						setState(2672);
						match(NOCACHE);
						}
						break;
					case 3:
						{
						setState(2673);
						match(CACHE);
						setState(2674);
						match(READS);
						}
						break;
					}
					setState(2678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
						{
						setState(2677);
						logging_clause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2682); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 536875009L) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 671096835L) != 0) || _la==FREEPOOLS || _la==KEEP_DUPLICATES || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & 4611686018427387907L) != 0) || _la==RETENTION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_retention_clauseContext extends ParserRuleContext {
		public TerminalNode RETENTION() { return getToken(plsqlParser.RETENTION, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Lob_retention_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_retention_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_retention_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_retention_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_retention_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_retention_clauseContext lob_retention_clause() throws RecognitionException {
		Lob_retention_clauseContext _localctx = new Lob_retention_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_lob_retention_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(RETENTION);
			setState(2690);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
				{
				setState(2685);
				match(MAX);
				}
				break;
			case MIN:
				{
				setState(2686);
				match(MIN);
				setState(2687);
				match(UNSIGNED_INTEGER);
				}
				break;
			case AUTO:
				{
				setState(2688);
				match(AUTO);
				}
				break;
			case NONE:
				{
				setState(2689);
				match(NONE);
				}
				break;
			case ALLOCATE:
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DEALLOCATE:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case REBUILD:
			case RETENTION:
			case SHRINK:
			case STORAGE:
			case RIGHT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(plsqlParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(plsqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_deduplicate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_deduplicate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_deduplicate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_compression_clauseContext extends ParserRuleContext {
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(plsqlParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public Lob_compression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_compression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_compression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_compression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_compression_clauseContext lob_compression_clause() throws RecognitionException {
		Lob_compression_clauseContext _localctx = new Lob_compression_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_lob_compression_clause);
		int _la;
		try {
			setState(2699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2694);
				match(NOCOMPRESS);
				}
				break;
			case COMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2695);
				match(COMPRESS);
				setState(2697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(2696);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Encryption_specContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(plsqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(plsqlParser.CHAR_STRING, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(plsqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode SALT() { return getToken(plsqlParser.SALT, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEncryption_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEncryption_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitEncryption_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_specContext encryption_spec() throws RecognitionException {
		Encryption_specContext _localctx = new Encryption_specContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_encryption_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2701);
				match(USING);
				setState(2702);
				match(CHAR_STRING);
				}
			}

			setState(2708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(2705);
				match(IDENTIFIED);
				setState(2706);
				match(BY);
				setState(2707);
				match(REGULAR_ID);
				}
			}

			setState(2711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(2710);
				match(CHAR_STRING);
				}
			}

			setState(2717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2713);
					match(NO);
					}
				}

				setState(2716);
				match(SALT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<Lob_itemContext> lob_item() {
			return getRuleContexts(Lob_itemContext.class);
		}
		public Lob_itemContext lob_item(int i) {
			return getRuleContext(Lob_itemContext.class,i);
		}
		public List<Lob_storage_parametersContext> lob_storage_parameters() {
			return getRuleContexts(Lob_storage_parametersContext.class);
		}
		public Lob_storage_parametersContext lob_storage_parameters(int i) {
			return getRuleContext(Lob_storage_parametersContext.class,i);
		}
		public List<Lob_segnameContext> lob_segname() {
			return getRuleContexts(Lob_segnameContext.class);
		}
		public Lob_segnameContext lob_segname(int i) {
			return getRuleContext(Lob_segnameContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(plsqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(plsqlParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(plsqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(plsqlParser.BASICFILE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_lob_storage_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			match(LOB);
			setState(2756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2720);
				match(LEFT_PAREN);
				setState(2725); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2722);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2721);
						match(COMMA);
						}
					}

					setState(2724);
					lob_item();
					}
					}
					setState(2727); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(2729);
				match(RIGHT_PAREN);
				setState(2730);
				match(STORE);
				setState(2731);
				match(AS);
				setState(2737); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2737);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case BASICFILE:
						case SECUREFILE:
							{
							setState(2732);
							_la = _input.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case LEFT_PAREN:
							{
							setState(2733);
							match(LEFT_PAREN);
							setState(2734);
							lob_storage_parameters();
							setState(2735);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2739); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(2741);
				match(LEFT_PAREN);
				setState(2742);
				lob_item();
				setState(2743);
				match(RIGHT_PAREN);
				setState(2744);
				match(STORE);
				setState(2745);
				match(AS);
				setState(2752); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2752);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case BASICFILE:
						case SECUREFILE:
							{
							setState(2746);
							_la = _input.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BUILD:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPLETE:
						case COMPOUND:
						case CONCAT:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECODE:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DEMAND:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case EDITIONING:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENFORCED:
						case ENTITYESCAPING:
						case ERR:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FAST:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LIST:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MASTER:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEVER:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NVL:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case MATERIALIZED:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PREBUILT:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case PUBLIC:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REDUCED:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REFRESH:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case REWRITE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SIZE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBSTRING:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TABLES:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TO_CHAR:
						case TO_DATE:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERBOSE:
						case VERSION:
						case VERSIONS:
						case VIEW:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHOUT:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case REGULAR_ID:
							{
							setState(2747);
							lob_segname();
							}
							break;
						case LEFT_PAREN:
							{
							setState(2748);
							match(LEFT_PAREN);
							setState(2749);
							lob_storage_parameters();
							setState(2750);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2754); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltype_column_propertiesContext extends ParserRuleContext {
		public TerminalNode XMLTYPE() { return getToken(plsqlParser.XMLTYPE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Xmltype_storageContext xmltype_storage() {
			return getRuleContext(Xmltype_storageContext.class,0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return getRuleContext(Xmlschema_specContext.class,0);
		}
		public Xmltype_column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_column_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmltype_column_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmltype_column_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmltype_column_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_column_propertiesContext xmltype_column_properties() throws RecognitionException {
		Xmltype_column_propertiesContext _localctx = new Xmltype_column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_xmltype_column_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			match(XMLTYPE);
			setState(2760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2759);
				match(COLUMN);
				}
			}

			setState(2762);
			column_name();
			setState(2764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(2763);
				xmltype_storage();
				}
			}

			setState(2767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==XMLSCHEMA) {
				{
				setState(2766);
				xmlschema_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltype_storageContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode RELATIONAL() { return getToken(plsqlParser.RELATIONAL, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode BINARY() { return getToken(plsqlParser.BINARY, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Lob_parametersContext lob_parameters() {
			return getRuleContext(Lob_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode SECUREFILE() { return getToken(plsqlParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(plsqlParser.BASICFILE, 0); }
		public TerminalNode VARRAYS() { return getToken(plsqlParser.VARRAYS, 0); }
		public TerminalNode LOBS() { return getToken(plsqlParser.LOBS, 0); }
		public TerminalNode TABLES() { return getToken(plsqlParser.TABLES, 0); }
		public Xmltype_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_storage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmltype_storage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmltype_storage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmltype_storage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_storageContext xmltype_storage() throws RecognitionException {
		Xmltype_storageContext _localctx = new Xmltype_storageContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_xmltype_storage);
		int _la;
		try {
			setState(2800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2769);
				match(STORE);
				setState(2770);
				match(AS);
				setState(2794);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(2771);
					match(OBJECT);
					setState(2772);
					match(RELATIONAL);
					}
					break;
				case BASICFILE:
				case BINARY:
				case CLOB:
				case SECUREFILE:
					{
					setState(2774);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						setState(2773);
						_la = _input.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2779);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CLOB:
						{
						setState(2776);
						match(CLOB);
						}
						break;
					case BINARY:
						{
						setState(2777);
						match(BINARY);
						setState(2778);
						match(XML);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2792);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
					case 1:
						{
						setState(2781);
						lob_segname();
						setState(2786);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
						case 1:
							{
							setState(2782);
							match(LEFT_PAREN);
							setState(2783);
							lob_parameters();
							setState(2784);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					case 2:
						{
						setState(2788);
						match(LEFT_PAREN);
						setState(2789);
						lob_parameters();
						setState(2790);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2796);
				match(STORE);
				setState(2797);
				match(VARRAYS);
				setState(2798);
				match(AS);
				setState(2799);
				_la = _input.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlschema_specContext extends ParserRuleContext {
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public List<TerminalNode> DELIMITED_ID() { return getTokens(plsqlParser.DELIMITED_ID); }
		public TerminalNode DELIMITED_ID(int i) {
			return getToken(plsqlParser.DELIMITED_ID, i);
		}
		public TerminalNode XMLSCHEMA() { return getToken(plsqlParser.XMLSCHEMA, 0); }
		public List<Allow_or_disallowContext> allow_or_disallow() {
			return getRuleContexts(Allow_or_disallowContext.class);
		}
		public Allow_or_disallowContext allow_or_disallow(int i) {
			return getRuleContext(Allow_or_disallowContext.class,i);
		}
		public TerminalNode NONSCHEMA() { return getToken(plsqlParser.NONSCHEMA, 0); }
		public TerminalNode ANYSCHEMA() { return getToken(plsqlParser.ANYSCHEMA, 0); }
		public Xmlschema_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlschema_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlschema_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlschema_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlschema_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlschema_specContext xmlschema_spec() throws RecognitionException {
		Xmlschema_specContext _localctx = new Xmlschema_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_xmlschema_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLSCHEMA) {
				{
				setState(2802);
				match(XMLSCHEMA);
				setState(2803);
				match(DELIMITED_ID);
				}
			}

			setState(2806);
			match(ELEMENT);
			setState(2807);
			match(DELIMITED_ID);
			setState(2811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(2808);
				allow_or_disallow();
				setState(2809);
				match(NONSCHEMA);
				}
				break;
			}
			setState(2816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW || _la==DISALLOW) {
				{
				setState(2813);
				allow_or_disallow();
				setState(2814);
				match(ANYSCHEMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Allow_or_disallowContext extends ParserRuleContext {
		public TerminalNode ALLOW() { return getToken(plsqlParser.ALLOW, 0); }
		public TerminalNode DISALLOW() { return getToken(plsqlParser.DISALLOW, 0); }
		public Allow_or_disallowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allow_or_disallow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAllow_or_disallow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAllow_or_disallow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAllow_or_disallow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allow_or_disallowContext allow_or_disallow() throws RecognitionException {
		Allow_or_disallowContext _localctx = new Allow_or_disallowContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_allow_or_disallow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2818);
			_la = _input.LA(1);
			if ( !(_la==ALLOW || _la==DISALLOW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_partitioning_clausesContext extends ParserRuleContext {
		public Range_partitionsContext range_partitions() {
			return getRuleContext(Range_partitionsContext.class,0);
		}
		public List_partitionsContext list_partitions() {
			return getRuleContext(List_partitionsContext.class,0);
		}
		public Hash_partitionsContext hash_partitions() {
			return getRuleContext(Hash_partitionsContext.class,0);
		}
		public Composite_range_partitionsContext composite_range_partitions() {
			return getRuleContext(Composite_range_partitionsContext.class,0);
		}
		public Composite_list_partitionsContext composite_list_partitions() {
			return getRuleContext(Composite_list_partitionsContext.class,0);
		}
		public Composite_hash_partitionsContext composite_hash_partitions() {
			return getRuleContext(Composite_hash_partitionsContext.class,0);
		}
		public Reference_partitioningContext reference_partitioning() {
			return getRuleContext(Reference_partitioningContext.class,0);
		}
		public System_partitioningContext system_partitioning() {
			return getRuleContext(System_partitioningContext.class,0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partitioning_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_partitioning_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_partitioning_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_partitioning_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_partitioning_clausesContext table_partitioning_clauses() throws RecognitionException {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_table_partitioning_clauses);
		try {
			setState(2828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2820);
				range_partitions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2821);
				list_partitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2822);
				hash_partitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2823);
				composite_range_partitions();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2824);
				composite_list_partitions();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2825);
				composite_hash_partitions();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2826);
				reference_partitioning();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2827);
				system_partitioning();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Range_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Range_values_clauseContext> range_values_clause() {
			return getRuleContexts(Range_values_clauseContext.class);
		}
		public Range_values_clauseContext range_values_clause(int i) {
			return getRuleContext(Range_values_clauseContext.class,i);
		}
		public List<Table_partition_descriptionContext> table_partition_description() {
			return getRuleContexts(Table_partition_descriptionContext.class);
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return getRuleContext(Table_partition_descriptionContext.class,i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRange_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRange_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRange_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_partitionsContext range_partitions() throws RecognitionException {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			match(PARTITION);
			setState(2831);
			match(BY);
			setState(2832);
			match(RANGE);
			setState(2833);
			paren_column_list();
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(2834);
				match(INTERVAL);
				setState(2835);
				match(LEFT_PAREN);
				setState(2836);
				expression(0);
				setState(2837);
				match(RIGHT_PAREN);
				setState(2851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(2838);
					match(STORE);
					setState(2839);
					match(IN);
					setState(2840);
					match(LEFT_PAREN);
					setState(2845); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2842);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2841);
							match(COMMA);
							}
						}

						setState(2844);
						tablespace();
						}
						}
						setState(2847); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(2849);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(2855);
			match(LEFT_PAREN);
			setState(2866); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2856);
					match(COMMA);
					}
				}

				setState(2859);
				match(PARTITION);
				setState(2861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
					{
					setState(2860);
					partition_name();
					}
				}

				setState(2863);
				range_values_clause();
				setState(2864);
				table_partition_description();
				}
				}
				setState(2868); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(2870);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Range_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(plsqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(plsqlParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Range_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRange_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRange_values_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRange_values_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_values_clauseContext range_values_clause() throws RecognitionException {
		Range_values_clauseContext _localctx = new Range_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_range_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2872);
			match(VALUES);
			setState(2873);
			match(LESS);
			setState(2874);
			match(THAN);
			setState(2875);
			match(LEFT_PAREN);
			setState(2880); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2876);
					match(COMMA);
					}
				}

				setState(2879);
				literal();
				}
				}
				setState(2882); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376152236033L) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & 2197815297L) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & 4103L) != 0) );
			setState(2884);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_partition_descriptionContext extends ParserRuleContext {
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(plsqlParser.OVERFLOW, 0); }
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return getRuleContext(Varray_col_propertiesContext.class,0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return getRuleContext(Nested_table_col_propertiesContext.class,0);
		}
		public Table_partition_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partition_description; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_partition_description(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_partition_description(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_partition_description(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_partition_descriptionContext table_partition_description() throws RecognitionException {
		Table_partition_descriptionContext _localctx = new Table_partition_descriptionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_partition_description);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(2886);
				deferred_segment_creation();
				}
			}

			setState(2890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(2889);
				segment_attributes_clause();
				}
			}

			setState(2894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2892);
				table_compression();
				}
				break;
			case 2:
				{
				setState(2893);
				key_compression();
				}
				break;
			}
			setState(2900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(2896);
				match(OVERFLOW);
				setState(2898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(2897);
					segment_attributes_clause();
					}
				}

				}
			}

			setState(2905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOB:
				{
				setState(2902);
				lob_storage_clause();
				}
				break;
			case VARRAY:
				{
				setState(2903);
				varray_col_properties();
				}
				break;
			case NESTED:
				{
				setState(2904);
				nested_table_col_properties();
				}
				break;
			case EOF:
			case ALTER:
			case AS:
			case CACHE:
			case CREATE:
			case DELETE:
			case DISABLE:
			case DROP:
			case ENABLE:
			case EXPLAIN:
			case FLASHBACK:
			case FUNCTION:
			case GRANT:
			case INSERT:
			case LOCK:
			case MERGE:
			case NO:
			case NOCACHE:
			case NOPARALLEL:
			case NOROWDEPENDENCIES:
			case PARALLEL:
			case PARTITION:
			case PROCEDURE:
			case REFRESH:
			case RESULT_CACHE:
			case REVOKE:
			case ROW:
			case ROWDEPENDENCIES:
			case SELECT:
			case SUBPARTITIONS:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(plsqlParser.LIST, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<List_values_clauseContext> list_values_clause() {
			return getRuleContexts(List_values_clauseContext.class);
		}
		public List_values_clauseContext list_values_clause(int i) {
			return getRuleContext(List_values_clauseContext.class,i);
		}
		public List<Table_partition_descriptionContext> table_partition_description() {
			return getRuleContexts(Table_partition_descriptionContext.class);
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return getRuleContext(Table_partition_descriptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterList_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitList_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitList_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_partitionsContext list_partitions() throws RecognitionException {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_list_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			match(PARTITION);
			setState(2908);
			match(BY);
			setState(2909);
			match(LIST);
			setState(2910);
			match(LEFT_PAREN);
			setState(2911);
			column_name();
			setState(2912);
			match(RIGHT_PAREN);
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(2913);
				match(LEFT_PAREN);
				setState(2924); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2915);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2914);
						match(COMMA);
						}
					}

					setState(2917);
					match(PARTITION);
					setState(2919);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
						{
						setState(2918);
						partition_name();
						}
					}

					setState(2921);
					list_values_clause();
					setState(2922);
					table_partition_description();
					}
					}
					setState(2926); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(2928);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterList_values_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitList_values_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitList_values_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_values_clauseContext list_values_clause() throws RecognitionException {
		List_values_clauseContext _localctx = new List_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_list_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932);
			match(VALUES);
			setState(2933);
			match(LEFT_PAREN);
			setState(2943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHR:
			case CONCAT:
			case DECODE:
			case MAXVALUE:
			case NVL:
			case SUBSTRING:
			case TO_CHAR:
			case TO_DATE:
			case TRIM:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case COMMA:
				{
				setState(2938); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2935);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2934);
						match(COMMA);
						}
					}

					setState(2937);
					literal();
					}
					}
					setState(2940); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 288230376152236033L) != 0) || _la==MAXVALUE || _la==NVL || ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & 2197815297L) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & 4103L) != 0) );
				}
				break;
			case DEFAULT:
				{
				setState(2942);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2945);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_partitionsContext hash_partitions() throws RecognitionException {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			match(PARTITION);
			setState(2948);
			match(BY);
			setState(2949);
			match(HASH);
			setState(2950);
			paren_column_list();
			setState(2953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(2951);
				individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				setState(2952);
				hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Composite_range_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Range_partition_descContext> range_partition_desc() {
			return getRuleContexts(Range_partition_descContext.class);
		}
		public Range_partition_descContext range_partition_desc(int i) {
			return getRuleContext(Range_partition_descContext.class,i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Composite_range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterComposite_range_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitComposite_range_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitComposite_range_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_range_partitionsContext composite_range_partitions() throws RecognitionException {
		Composite_range_partitionsContext _localctx = new Composite_range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_composite_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			match(PARTITION);
			setState(2956);
			match(BY);
			setState(2957);
			match(RANGE);
			setState(2958);
			paren_column_list();
			setState(2978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(2959);
				match(INTERVAL);
				setState(2960);
				match(LEFT_PAREN);
				setState(2961);
				expression(0);
				setState(2962);
				match(RIGHT_PAREN);
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(2963);
					match(STORE);
					setState(2964);
					match(IN);
					setState(2965);
					match(LEFT_PAREN);
					setState(2970); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2967);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2966);
							match(COMMA);
							}
						}

						setState(2969);
						tablespace();
						}
						}
						setState(2972); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(2974);
					match(RIGHT_PAREN);
					}
				}

				}
			}

			setState(2983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2980);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(2981);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(2982);
				subpartition_by_hash();
				}
				break;
			}
			setState(2985);
			match(LEFT_PAREN);
			setState(2990); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2986);
					match(COMMA);
					}
				}

				setState(2989);
				range_partition_desc();
				}
				}
				setState(2992); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(2994);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subpartition_by_rangeContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubpartition_by_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubpartition_by_range(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubpartition_by_range(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_rangeContext subpartition_by_range() throws RecognitionException {
		Subpartition_by_rangeContext _localctx = new Subpartition_by_rangeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_subpartition_by_range);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2996);
			match(SUBPARTITION);
			setState(2997);
			match(BY);
			setState(2998);
			match(RANGE);
			setState(2999);
			paren_column_list();
			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(3000);
				subpartition_template();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subpartition_by_listContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(plsqlParser.LIST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubpartition_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubpartition_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubpartition_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_listContext subpartition_by_list() throws RecognitionException {
		Subpartition_by_listContext _localctx = new Subpartition_by_listContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_subpartition_by_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			match(SUBPARTITION);
			setState(3004);
			match(BY);
			setState(3005);
			match(LIST);
			setState(3006);
			match(LEFT_PAREN);
			setState(3007);
			column_name();
			setState(3008);
			match(RIGHT_PAREN);
			setState(3010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(3009);
				subpartition_template();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subpartition_templateContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode TEMPLATE() { return getToken(plsqlParser.TEMPLATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Hash_subpartition_quantityContext hash_subpartition_quantity() {
			return getRuleContext(Hash_subpartition_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Subpartition_templateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_template; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubpartition_template(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubpartition_template(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubpartition_template(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_templateContext subpartition_template() throws RecognitionException {
		Subpartition_templateContext _localctx = new Subpartition_templateContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_subpartition_template);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012);
			match(SUBPARTITION);
			setState(3013);
			match(TEMPLATE);
			{
			setState(3044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3014);
				match(LEFT_PAREN);
				setState(3039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3019); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3016);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3015);
							match(COMMA);
							}
						}

						setState(3018);
						range_subpartition_desc();
						}
						}
						setState(3021); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				case 2:
					{
					setState(3027); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3024);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3023);
							match(COMMA);
							}
						}

						setState(3026);
						list_subpartition_desc();
						}
						}
						setState(3029); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				case 3:
					{
					setState(3035); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3032);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3031);
							match(COMMA);
							}
						}

						setState(3034);
						individual_hash_subparts();
						}
						}
						setState(3037); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SUBPARTITION || _la==COMMA );
					}
					break;
				}
				setState(3041);
				match(RIGHT_PAREN);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				setState(3043);
				hash_subpartition_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Range_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Range_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_subpartition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRange_subpartition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRange_subpartition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRange_subpartition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_subpartition_descContext range_subpartition_desc() throws RecognitionException {
		Range_subpartition_descContext _localctx = new Range_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_range_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			match(SUBPARTITION);
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
				{
				setState(3047);
				subpartition_name();
				}
			}

			setState(3050);
			range_values_clause();
			setState(3052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3051);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public List_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_subpartition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterList_subpartition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitList_subpartition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitList_subpartition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_subpartition_descContext list_subpartition_desc() throws RecognitionException {
		List_subpartition_descContext _localctx = new List_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_list_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054);
			match(SUBPARTITION);
			setState(3056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
				{
				setState(3055);
				subpartition_name();
				}
			}

			setState(3058);
			list_values_clause();
			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3059);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Individual_hash_subpartsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Individual_hash_subpartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_subparts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndividual_hash_subparts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndividual_hash_subparts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndividual_hash_subparts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Individual_hash_subpartsContext individual_hash_subparts() throws RecognitionException {
		Individual_hash_subpartsContext _localctx = new Individual_hash_subpartsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_individual_hash_subparts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			match(SUBPARTITION);
			setState(3064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				setState(3063);
				subpartition_name();
				}
				break;
			}
			setState(3067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==LOB || _la==NOCOMPRESS || _la==OVERFLOW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(3066);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_subpartition_quantityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Hash_subpartition_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subpartition_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHash_subpartition_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHash_subpartition_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHash_subpartition_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_subpartition_quantityContext hash_subpartition_quantity() throws RecognitionException {
		Hash_subpartition_quantityContext _localctx = new Hash_subpartition_quantityContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_hash_subpartition_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subpartition_by_hashContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(plsqlParser.SUBPARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Subpartition_by_hashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_hash; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubpartition_by_hash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubpartition_by_hash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubpartition_by_hash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subpartition_by_hashContext subpartition_by_hash() throws RecognitionException {
		Subpartition_by_hashContext _localctx = new Subpartition_by_hashContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_subpartition_by_hash);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			match(SUBPARTITION);
			setState(3072);
			match(BY);
			setState(3073);
			match(HASH);
			setState(3074);
			paren_column_list();
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBPARTITIONS:
				{
				setState(3075);
				match(SUBPARTITIONS);
				setState(3076);
				match(UNSIGNED_INTEGER);
				setState(3090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE) {
					{
					setState(3077);
					match(STORE);
					setState(3078);
					match(IN);
					setState(3079);
					match(LEFT_PAREN);
					setState(3084); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3081);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3080);
							match(COMMA);
							}
						}

						setState(3083);
						tablespace();
						}
						}
						setState(3086); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3088);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case SUBPARTITION:
				{
				setState(3092);
				subpartition_template();
				}
				break;
			case PARTITIONS:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Range_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Range_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRange_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRange_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRange_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_partition_descContext range_partition_desc() throws RecognitionException {
		Range_partition_descContext _localctx = new Range_partition_descContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_range_partition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			match(PARTITION);
			setState(3097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
				{
				setState(3096);
				partition_name();
				}
			}

			setState(3099);
			range_values_clause();
			setState(3100);
			table_partition_description();
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITIONS || _la==LEFT_PAREN) {
				{
				setState(3131);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(3101);
					match(LEFT_PAREN);
					setState(3126);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
					case 1:
						{
						setState(3106); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3103);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3102);
								match(COMMA);
								}
							}

							setState(3105);
							range_subpartition_desc();
							}
							}
							setState(3108); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 2:
						{
						setState(3114); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3111);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3110);
								match(COMMA);
								}
							}

							setState(3113);
							list_subpartition_desc();
							}
							}
							setState(3116); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 3:
						{
						setState(3122); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3119);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3118);
								match(COMMA);
								}
							}

							setState(3121);
							individual_hash_subparts();
							}
							}
							setState(3124); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					}
					setState(3128);
					match(RIGHT_PAREN);
					}
					break;
				case SUBPARTITIONS:
					{
					setState(3130);
					hash_subparts_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hash_subparts_by_quantityContext extends ParserRuleContext {
		public TerminalNode SUBPARTITIONS() { return getToken(plsqlParser.SUBPARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Hash_subparts_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subparts_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHash_subparts_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHash_subparts_by_quantity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHash_subparts_by_quantity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hash_subparts_by_quantityContext hash_subparts_by_quantity() throws RecognitionException {
		Hash_subparts_by_quantityContext _localctx = new Hash_subparts_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_hash_subparts_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			match(SUBPARTITIONS);
			setState(3136);
			match(UNSIGNED_INTEGER);
			setState(3150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(3137);
				match(STORE);
				setState(3138);
				match(IN);
				setState(3139);
				match(LEFT_PAREN);
				setState(3144); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3141);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3140);
						match(COMMA);
						}
					}

					setState(3143);
					tablespace();
					}
					}
					setState(3146); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3148);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Composite_list_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(plsqlParser.LIST, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public List<List_partition_descContext> list_partition_desc() {
			return getRuleContexts(List_partition_descContext.class);
		}
		public List_partition_descContext list_partition_desc(int i) {
			return getRuleContext(List_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Composite_list_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterComposite_list_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitComposite_list_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitComposite_list_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_list_partitionsContext composite_list_partitions() throws RecognitionException {
		Composite_list_partitionsContext _localctx = new Composite_list_partitionsContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_composite_list_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3152);
			match(PARTITION);
			setState(3153);
			match(BY);
			setState(3154);
			match(LIST);
			setState(3155);
			match(LEFT_PAREN);
			setState(3156);
			column_name();
			setState(3157);
			match(RIGHT_PAREN);
			setState(3161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3158);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(3159);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(3160);
				subpartition_by_hash();
				}
				break;
			}
			setState(3163);
			match(LEFT_PAREN);
			setState(3168); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3164);
					match(COMMA);
					}
				}

				setState(3167);
				list_partition_desc();
				}
				}
				setState(3170); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(3172);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterList_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitList_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitList_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_partition_descContext list_partition_desc() throws RecognitionException {
		List_partition_descContext _localctx = new List_partition_descContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_list_partition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(PARTITION);
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) {
				{
				setState(3175);
				partition_name();
				}
			}

			setState(3178);
			list_values_clause();
			setState(3179);
			table_partition_description();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITIONS || _la==LEFT_PAREN) {
				{
				setState(3210);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(3180);
					match(LEFT_PAREN);
					setState(3205);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						setState(3185); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3182);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3181);
								match(COMMA);
								}
							}

							setState(3184);
							range_subpartition_desc();
							}
							}
							setState(3187); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 2:
						{
						setState(3193); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3190);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3189);
								match(COMMA);
								}
							}

							setState(3192);
							list_subpartition_desc();
							}
							}
							setState(3195); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					case 3:
						{
						setState(3201); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3198);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3197);
								match(COMMA);
								}
							}

							setState(3200);
							individual_hash_subparts();
							}
							}
							setState(3203); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SUBPARTITION || _la==COMMA );
						}
						break;
					}
					setState(3207);
					match(RIGHT_PAREN);
					}
					break;
				case SUBPARTITIONS:
					{
					setState(3209);
					hash_subparts_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Composite_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Composite_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterComposite_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitComposite_hash_partitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitComposite_hash_partitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Composite_hash_partitionsContext composite_hash_partitions() throws RecognitionException {
		Composite_hash_partitionsContext _localctx = new Composite_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_composite_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(PARTITION);
			setState(3215);
			match(BY);
			setState(3216);
			match(HASH);
			setState(3217);
			match(LEFT_PAREN);
			setState(3220); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3218);
				match(COMMA);
				setState(3219);
				column_name();
				}
				}
				setState(3222); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(3224);
			match(RIGHT_PAREN);
			setState(3228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3225);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(3226);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(3227);
				subpartition_by_hash();
				}
				break;
			}
			setState(3232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3230);
				individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				setState(3231);
				hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_partitioningContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Reference_partitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_partitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_partitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_partitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_partitioningContext reference_partitioning() throws RecognitionException {
		Reference_partitioningContext _localctx = new Reference_partitioningContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_reference_partitioning);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			match(PARTITION);
			setState(3235);
			match(BY);
			setState(3236);
			match(REFERENCE);
			setState(3237);
			match(LEFT_PAREN);
			setState(3238);
			regular_id();
			setState(3239);
			match(RIGHT_PAREN);
			setState(3251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3240);
				match(LEFT_PAREN);
				setState(3245); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3241);
						match(COMMA);
						}
					}

					setState(3244);
					reference_partition_desc();
					}
					}
					setState(3247); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(3249);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Reference_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partition_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_partition_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_partition_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_partition_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_partition_descContext reference_partition_desc() throws RecognitionException {
		Reference_partition_descContext _localctx = new Reference_partition_descContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_reference_partition_desc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3253);
			match(PARTITION);
			setState(3255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3254);
				partition_name();
				}
				break;
			}
			setState(3257);
			table_partition_description();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class System_partitioningContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode SYSTEM() { return getToken(plsqlParser.SYSTEM, 0); }
		public TerminalNode PARTITIONS() { return getToken(plsqlParser.PARTITIONS, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public System_partitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_partitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSystem_partitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSystem_partitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSystem_partitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final System_partitioningContext system_partitioning() throws RecognitionException {
		System_partitioningContext _localctx = new System_partitioningContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_system_partitioning);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			match(PARTITION);
			setState(3260);
			match(BY);
			setState(3261);
			match(SYSTEM);
			setState(3272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3262);
				match(PARTITIONS);
				setState(3263);
				match(UNSIGNED_INTEGER);
				}
				break;
			case 2:
				{
				setState(3268); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3265);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3264);
							match(COMMA);
							}
						}

						setState(3267);
						reference_partition_desc();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3270); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enable_disable_clauseContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Using_index_clauseContext using_index_clause() {
			return getRuleContext(Using_index_clauseContext.class,0);
		}
		public Exceptions_clauseContext exceptions_clause() {
			return getRuleContext(Exceptions_clauseContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(plsqlParser.NOVALIDATE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Enable_disable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_disable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEnable_disable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEnable_disable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitEnable_disable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_disable_clauseContext enable_disable_clause() throws RecognitionException {
		Enable_disable_clauseContext _localctx = new Enable_disable_clauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_enable_disable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3274);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOVALIDATE || _la==VALIDATE) {
				{
				setState(3275);
				_la = _input.LA(1);
				if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(3278);
				match(UNIQUE);
				setState(3279);
				paren_column_list();
				}
				break;
			case PRIMARY:
				{
				setState(3280);
				match(PRIMARY);
				setState(3281);
				match(KEY);
				}
				break;
			case CONSTRAINT:
				{
				setState(3282);
				match(CONSTRAINT);
				setState(3283);
				constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3286);
				using_index_clause();
				}
			}

			setState(3290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTIONS) {
				{
				setState(3289);
				exceptions_clause();
				}
			}

			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(3292);
				match(CASCADE);
				}
			}

			setState(3297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3295);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3296);
				match(INDEX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exceptions_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExceptions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExceptions_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExceptions_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exceptions_clauseContext exceptions_clause() throws RecognitionException {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_exceptions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			match(EXCEPTIONS);
			setState(3300);
			match(INTO);
			setState(3301);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_movement_clauseContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode MOVEMENT() { return getToken(plsqlParser.MOVEMENT, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Row_movement_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_movement_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRow_movement_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRow_movement_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRow_movement_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_movement_clauseContext row_movement_clause() throws RecognitionException {
		Row_movement_clauseContext _localctx = new Row_movement_clauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_row_movement_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(3303);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3306);
			match(ROW);
			setState(3307);
			match(MOVEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flashback_archive_clauseContext extends ParserRuleContext {
		public Token flashback_archive;
		public TerminalNode FLASHBACK() { return getToken(plsqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(plsqlParser.ARCHIVE, 0); }
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Flashback_archive_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_archive_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_archive_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_archive_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFlashback_archive_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_archive_clauseContext flashback_archive_clause() throws RecognitionException {
		Flashback_archive_clauseContext _localctx = new Flashback_archive_clauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_flashback_archive_clause);
		try {
			setState(3315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLASHBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3309);
				match(FLASHBACK);
				setState(3310);
				match(ARCHIVE);
				setState(3311);
				((Flashback_archive_clauseContext)_localctx).flashback_archive = match(REGULAR_ID);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3312);
				match(NO);
				setState(3313);
				match(FLASHBACK);
				setState(3314);
				match(ARCHIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_tableContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Object_table_substitutionContext object_table_substitution() {
			return getRuleContext(Object_table_substitutionContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public Oid_clauseContext oid_clause() {
			return getRuleContext(Oid_clauseContext.class,0);
		}
		public Oid_index_clauseContext oid_index_clause() {
			return getRuleContext(Oid_index_clauseContext.class,0);
		}
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(plsqlParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(plsqlParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(plsqlParser.NOROWDEPENDENCIES, 0); }
		public List<Object_propertiesContext> object_properties() {
			return getRuleContexts(Object_propertiesContext.class);
		}
		public Object_propertiesContext object_properties(int i) {
			return getRuleContext(Object_propertiesContext.class,i);
		}
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Object_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_tableContext object_table() throws RecognitionException {
		Object_tableContext _localctx = new Object_tableContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_object_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3317);
			match(OF);
			setState(3318);
			type_name();
			setState(3320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==SUBSTITUTABLE) {
				{
				setState(3319);
				object_table_substitution();
				}
			}

			setState(3333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3322);
				match(LEFT_PAREN);
				setState(3327); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3324);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3323);
						match(COMMA);
						}
					}

					setState(3326);
					object_properties();
					}
					}
					setState(3329); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -309066313701506576L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1264687428713654483L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -4630835390785947345L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -570840877992288277L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545483706385L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3331);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3335);
				match(ON);
				setState(3336);
				match(COMMIT);
				setState(3337);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3338);
				match(ROWS);
				}
			}

			setState(3342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT) {
				{
				setState(3341);
				oid_clause();
				}
			}

			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OIDINDEX) {
				{
				setState(3344);
				oid_index_clause();
				}
			}

			setState(3348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4503737066323969L) != 0)) {
				{
				setState(3347);
				physical_properties();
				}
			}

			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3350);
				column_properties();
				}
			}

			setState(3354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(3353);
				table_partitioning_clauses();
				}
				break;
			}
			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(3356);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(3359);
				match(RESULT_CACHE);
				setState(3360);
				match(LEFT_PAREN);
				setState(3361);
				match(MODE);
				setState(3362);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3363);
				match(RIGHT_PAREN);
				}
			}

			setState(3367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3366);
				parallel_clause();
				}
			}

			setState(3370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(3369);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3373); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3372);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3375); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,439,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(3380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(3379);
				row_movement_clause();
				}
			}

			setState(3383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(3382);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_table_substitutionContext extends ParserRuleContext {
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(plsqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Object_table_substitutionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_table_substitution; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_table_substitution(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_table_substitution(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_table_substitution(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_table_substitutionContext object_table_substitution() throws RecognitionException {
		Object_table_substitutionContext _localctx = new Object_table_substitutionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_object_table_substitution);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3385);
				match(NOT);
				}
			}

			setState(3388);
			match(SUBSTITUTABLE);
			setState(3389);
			match(AT);
			setState(3390);
			match(ALL);
			setState(3391);
			match(LEVELS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Oid_clauseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode IDENTIFIER() { return getToken(plsqlParser.IDENTIFIER, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode SYSTEM() { return getToken(plsqlParser.SYSTEM, 0); }
		public TerminalNode GENERATED() { return getToken(plsqlParser.GENERATED, 0); }
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public Oid_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oid_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOid_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOid_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOid_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oid_clauseContext oid_clause() throws RecognitionException {
		Oid_clauseContext _localctx = new Oid_clauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_oid_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393);
			match(OBJECT);
			setState(3394);
			match(IDENTIFIER);
			setState(3395);
			match(IS);
			setState(3400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSTEM:
				{
				setState(3396);
				match(SYSTEM);
				setState(3397);
				match(GENERATED);
				}
				break;
			case PRIMARY:
				{
				setState(3398);
				match(PRIMARY);
				setState(3399);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Oid_index_clauseContext extends ParserRuleContext {
		public TerminalNode OIDINDEX() { return getToken(plsqlParser.OIDINDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<TablespaceContext> tablespace() {
			return getRuleContexts(TablespaceContext.class);
		}
		public TablespaceContext tablespace(int i) {
			return getRuleContext(TablespaceContext.class,i);
		}
		public Oid_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oid_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOid_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOid_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOid_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Oid_index_clauseContext oid_index_clause() throws RecognitionException {
		Oid_index_clauseContext _localctx = new Oid_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_oid_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3402);
			match(OIDINDEX);
			setState(3404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(3403);
				index_name();
				}
			}

			setState(3406);
			match(LEFT_PAREN);
			setState(3410); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3410);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITRANS:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
					{
					setState(3407);
					physical_attributes_clause();
					}
					break;
				case TABLESPACE:
					{
					setState(3408);
					match(TABLESPACE);
					setState(3409);
					tablespace();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3412); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INITRANS || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			setState(3414);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltype_tableContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<TerminalNode> XMLTYPE() { return getTokens(plsqlParser.XMLTYPE); }
		public TerminalNode XMLTYPE(int i) {
			return getToken(plsqlParser.XMLTYPE, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Object_propertiesContext object_properties() {
			return getRuleContext(Object_propertiesContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public Xmltype_storageContext xmltype_storage() {
			return getRuleContext(Xmltype_storageContext.class,0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return getRuleContext(Xmlschema_specContext.class,0);
		}
		public Xmltype_virtual_columnsContext xmltype_virtual_columns() {
			return getRuleContext(Xmltype_virtual_columnsContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public Oid_clauseContext oid_clause() {
			return getRuleContext(Oid_clauseContext.class,0);
		}
		public Oid_index_clauseContext oid_index_clause() {
			return getRuleContext(Oid_index_clauseContext.class,0);
		}
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(plsqlParser.PRESERVE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(plsqlParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(plsqlParser.NOROWDEPENDENCIES, 0); }
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public Xmltype_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmltype_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmltype_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmltype_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_tableContext xmltype_table() throws RecognitionException {
		Xmltype_tableContext _localctx = new Xmltype_tableContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_xmltype_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			match(OF);
			setState(3417);
			match(XMLTYPE);
			setState(3422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3418);
				match(LEFT_PAREN);
				setState(3419);
				object_properties();
				setState(3420);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3424);
				match(XMLTYPE);
				setState(3425);
				xmltype_storage();
				}
				break;
			}
			setState(3429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==XMLSCHEMA) {
				{
				setState(3428);
				xmlschema_spec();
				}
			}

			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VIRTUAL) {
				{
				setState(3431);
				xmltype_virtual_columns();
				}
			}

			setState(3438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3434);
				match(ON);
				setState(3435);
				match(COMMIT);
				setState(3436);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3437);
				match(ROWS);
				}
			}

			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OBJECT) {
				{
				setState(3440);
				oid_clause();
				}
			}

			setState(3444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OIDINDEX) {
				{
				setState(3443);
				oid_index_clause();
				}
			}

			setState(3447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & 4503737066323969L) != 0)) {
				{
				setState(3446);
				physical_properties();
				}
			}

			setState(3450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3449);
				column_properties();
				}
			}

			setState(3453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3452);
				table_partitioning_clauses();
				}
				break;
			}
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(3455);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(3458);
				match(RESULT_CACHE);
				setState(3459);
				match(LEFT_PAREN);
				setState(3460);
				match(MODE);
				setState(3461);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3462);
				match(RIGHT_PAREN);
				}
			}

			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3465);
				parallel_clause();
				}
			}

			setState(3469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(3468);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3472); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3471);
						enable_disable_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3474); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(3479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE || _la==ROW) {
				{
				setState(3478);
				row_movement_clause();
				}
			}

			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FLASHBACK || _la==NO) {
				{
				setState(3481);
				flashback_archive_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmltype_virtual_columnsContext extends ParserRuleContext {
		public TerminalNode VIRTUAL() { return getToken(plsqlParser.VIRTUAL, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Xmltype_virtual_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_virtual_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmltype_virtual_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmltype_virtual_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmltype_virtual_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmltype_virtual_columnsContext xmltype_virtual_columns() throws RecognitionException {
		Xmltype_virtual_columnsContext _localctx = new Xmltype_virtual_columnsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_xmltype_virtual_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(VIRTUAL);
			setState(3485);
			match(COLUMNS);
			setState(3486);
			match(LEFT_PAREN);
			setState(3496); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3487);
					match(COMMA);
					}
				}

				setState(3490);
				column_name();
				setState(3491);
				match(AS);
				setState(3492);
				match(LEFT_PAREN);
				setState(3493);
				expression(0);
				setState(3494);
				match(RIGHT_PAREN);
				}
				}
				setState(3498); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
			setState(3500);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(plsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(plsqlParser.PURGE, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			match(DROP);
			setState(3503);
			match(TABLE);
			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3504);
				match(IF);
				setState(3505);
				match(EXISTS);
				}
			}

			setState(3508);
			tableview_name();
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PURGE) {
				{
				setState(3509);
				match(PURGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Alter_table_propertiesContext alter_table_properties() {
			return getRuleContext(Alter_table_propertiesContext.class,0);
		}
		public Constraint_clausesContext constraint_clauses() {
			return getRuleContext(Constraint_clausesContext.class,0);
		}
		public Column_clausesContext column_clauses() {
			return getRuleContext(Column_clausesContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3512);
			match(ALTER);
			setState(3513);
			match(TABLE);
			setState(3514);
			tableview_name();
			setState(3519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				}
				break;
			case 2:
				{
				setState(3516);
				alter_table_properties();
				}
				break;
			case 3:
				{
				setState(3517);
				constraint_clauses();
				}
				break;
			case 4:
				{
				setState(3518);
				column_clauses();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_propertiesContext extends ParserRuleContext {
		public Alter_table_properties_1Context alter_table_properties_1() {
			return getRuleContext(Alter_table_properties_1Context.class,0);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Shrink_clauseContext shrink_clause() {
			return getRuleContext(Shrink_clauseContext.class,0);
		}
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode REKEY() { return getToken(plsqlParser.REKEY, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Alter_table_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_table_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_table_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_table_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_propertiesContext alter_table_properties() throws RecognitionException {
		Alter_table_propertiesContext _localctx = new Alter_table_propertiesContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_alter_table_properties);
		try {
			setState(3532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3521);
				alter_table_properties_1();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3522);
				match(RENAME);
				setState(3523);
				match(TO);
				setState(3524);
				tableview_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3525);
				shrink_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3526);
				match(READ);
				setState(3527);
				match(ONLY);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3528);
				match(READ);
				setState(3529);
				match(WRITE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3530);
				match(REKEY);
				setState(3531);
				match(CHAR_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_properties_1Context extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Supplemental_table_loggingContext> supplemental_table_logging() {
			return getRuleContexts(Supplemental_table_loggingContext.class);
		}
		public Supplemental_table_loggingContext supplemental_table_logging(int i) {
			return getRuleContext(Supplemental_table_loggingContext.class,i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public List<TerminalNode> RESULT_CACHE() { return getTokens(plsqlParser.RESULT_CACHE); }
		public TerminalNode RESULT_CACHE(int i) {
			return getToken(plsqlParser.RESULT_CACHE, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> MODE() { return getTokens(plsqlParser.MODE); }
		public TerminalNode MODE(int i) {
			return getToken(plsqlParser.MODE, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<Upgrade_table_clauseContext> upgrade_table_clause() {
			return getRuleContexts(Upgrade_table_clauseContext.class);
		}
		public Upgrade_table_clauseContext upgrade_table_clause(int i) {
			return getRuleContext(Upgrade_table_clauseContext.class,i);
		}
		public List<Records_per_block_clauseContext> records_per_block_clause() {
			return getRuleContexts(Records_per_block_clauseContext.class);
		}
		public Records_per_block_clauseContext records_per_block_clause(int i) {
			return getRuleContext(Records_per_block_clauseContext.class,i);
		}
		public List<Parallel_clauseContext> parallel_clause() {
			return getRuleContexts(Parallel_clauseContext.class);
		}
		public Parallel_clauseContext parallel_clause(int i) {
			return getRuleContext(Parallel_clauseContext.class,i);
		}
		public List<Row_movement_clauseContext> row_movement_clause() {
			return getRuleContexts(Row_movement_clauseContext.class);
		}
		public Row_movement_clauseContext row_movement_clause(int i) {
			return getRuleContext(Row_movement_clauseContext.class,i);
		}
		public List<Flashback_archive_clauseContext> flashback_archive_clause() {
			return getRuleContexts(Flashback_archive_clauseContext.class);
		}
		public Flashback_archive_clauseContext flashback_archive_clause(int i) {
			return getRuleContext(Flashback_archive_clauseContext.class,i);
		}
		public Alter_iot_clausesContext alter_iot_clauses() {
			return getRuleContext(Alter_iot_clausesContext.class,0);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> FORCE() { return getTokens(plsqlParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(plsqlParser.FORCE, i);
		}
		public Alter_table_properties_1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_properties_1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_table_properties_1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_table_properties_1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_table_properties_1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_properties_1Context alter_table_properties_1() throws RecognitionException {
		Alter_table_properties_1Context _localctx = new Alter_table_properties_1Context(_ctx, getState());
		enterRule(_localctx, 284, RULE_alter_table_properties_1);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3551); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3551);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(3534);
						physical_attributes_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(3535);
						logging_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(3536);
						table_compression();
						}
						break;
					case ADD:
					case DROP:
						{
						setState(3537);
						supplemental_table_logging();
						}
						break;
					case ALLOCATE:
						{
						setState(3538);
						allocate_extent_clause();
						}
						break;
					case DEALLOCATE:
						{
						setState(3539);
						deallocate_unused_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(3540);
						_la = _input.LA(1);
						if ( !(_la==CACHE || _la==NOCACHE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case RESULT_CACHE:
						{
						setState(3541);
						match(RESULT_CACHE);
						setState(3542);
						match(LEFT_PAREN);
						setState(3543);
						match(MODE);
						setState(3544);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==FORCE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3545);
						match(RIGHT_PAREN);
						}
						break;
					case UPGRADE:
						{
						setState(3546);
						upgrade_table_clause();
						}
						break;
					case MINIMIZE:
					case NOMINIMIZE:
					case RECORDS_PER_BLOCK:
						{
						setState(3547);
						records_per_block_clause();
						}
						break;
					case NOPARALLEL:
					case PARALLEL:
						{
						setState(3548);
						parallel_clause();
						}
						break;
					case DISABLE:
					case ENABLE:
					case ROW:
						{
						setState(3549);
						row_movement_clause();
						}
						break;
					case FLASHBACK:
					case NO:
						{
						setState(3550);
						flashback_archive_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3553); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,473,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(3556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD || _la==COALESCE || _la==COMPRESS || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 2267742732289L) != 0) || _la==OVERFLOW || _la==PCTTHRESHOLD) {
				{
				setState(3555);
				alter_iot_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Supplemental_table_loggingContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public List<TerminalNode> SUPPLEMENTAL() { return getTokens(plsqlParser.SUPPLEMENTAL); }
		public TerminalNode SUPPLEMENTAL(int i) {
			return getToken(plsqlParser.SUPPLEMENTAL, i);
		}
		public List<TerminalNode> LOG() { return getTokens(plsqlParser.LOG); }
		public TerminalNode LOG(int i) {
			return getToken(plsqlParser.LOG, i);
		}
		public List<Supplemental_log_grp_clauseContext> supplemental_log_grp_clause() {
			return getRuleContexts(Supplemental_log_grp_clauseContext.class);
		}
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause(int i) {
			return getRuleContext(Supplemental_log_grp_clauseContext.class,i);
		}
		public List<Supplemental_id_key_clauseContext> supplemental_id_key_clause() {
			return getRuleContexts(Supplemental_id_key_clauseContext.class);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause(int i) {
			return getRuleContext(Supplemental_id_key_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<TerminalNode> GROUP() { return getTokens(plsqlParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(plsqlParser.GROUP, i);
		}
		public List<Log_grpContext> log_grp() {
			return getRuleContexts(Log_grpContext.class);
		}
		public Log_grpContext log_grp(int i) {
			return getRuleContext(Log_grpContext.class,i);
		}
		public Supplemental_table_loggingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_table_logging; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSupplemental_table_logging(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSupplemental_table_logging(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSupplemental_table_logging(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Supplemental_table_loggingContext supplemental_table_logging() throws RecognitionException {
		Supplemental_table_loggingContext _localctx = new Supplemental_table_loggingContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_supplemental_table_logging);
		int _la;
		try {
			setState(3589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3558);
				match(ADD);
				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SUPPLEMENTAL || _la==COMMA) {
					{
					{
					setState(3560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3559);
						match(COMMA);
						}
					}

					setState(3562);
					match(SUPPLEMENTAL);
					setState(3563);
					match(LOG);
					setState(3566);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GROUP:
						{
						setState(3564);
						supplemental_log_grp_clause();
						}
						break;
					case DATA:
						{
						setState(3565);
						supplemental_id_key_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(3572);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3573);
				match(DROP);
				setState(3586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SUPPLEMENTAL || _la==COMMA) {
					{
					{
					setState(3575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3574);
						match(COMMA);
						}
					}

					setState(3577);
					match(SUPPLEMENTAL);
					setState(3578);
					match(LOG);
					setState(3582);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DATA:
						{
						setState(3579);
						supplemental_id_key_clause();
						}
						break;
					case GROUP:
						{
						setState(3580);
						match(GROUP);
						setState(3581);
						log_grp();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(3588);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Allocate_extent_clauseContext extends ParserRuleContext {
		public Token datafile;
		public Token inst_num;
		public TerminalNode ALLOCATE() { return getToken(plsqlParser.ALLOCATE, 0); }
		public TerminalNode EXTENT() { return getToken(plsqlParser.EXTENT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> SIZE() { return getTokens(plsqlParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(plsqlParser.SIZE, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> DATAFILE() { return getTokens(plsqlParser.DATAFILE); }
		public TerminalNode DATAFILE(int i) {
			return getToken(plsqlParser.DATAFILE, i);
		}
		public List<TerminalNode> INSTANCE() { return getTokens(plsqlParser.INSTANCE); }
		public TerminalNode INSTANCE(int i) {
			return getToken(plsqlParser.INSTANCE, i);
		}
		public List<TerminalNode> CHAR_STRING() { return getTokens(plsqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(plsqlParser.CHAR_STRING, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public Allocate_extent_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allocate_extent_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAllocate_extent_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAllocate_extent_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAllocate_extent_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Allocate_extent_clauseContext allocate_extent_clause() throws RecognitionException {
		Allocate_extent_clauseContext _localctx = new Allocate_extent_clauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_allocate_extent_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(ALLOCATE);
			setState(3592);
			match(EXTENT);
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(3593);
				match(LEFT_PAREN);
				setState(3600); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3600);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SIZE:
						{
						setState(3594);
						match(SIZE);
						setState(3595);
						size_clause();
						}
						break;
					case DATAFILE:
						{
						setState(3596);
						match(DATAFILE);
						setState(3597);
						((Allocate_extent_clauseContext)_localctx).datafile = match(CHAR_STRING);
						}
						break;
					case INSTANCE:
						{
						setState(3598);
						match(INSTANCE);
						setState(3599);
						((Allocate_extent_clauseContext)_localctx).inst_num = match(UNSIGNED_INTEGER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3602); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATAFILE || _la==INSTANCE || _la==SIZE );
				setState(3604);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deallocate_unused_clauseContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(plsqlParser.DEALLOCATE, 0); }
		public TerminalNode UNUSED() { return getToken(plsqlParser.UNUSED, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Deallocate_unused_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_unused_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeallocate_unused_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeallocate_unused_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDeallocate_unused_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_unused_clauseContext deallocate_unused_clause() throws RecognitionException {
		Deallocate_unused_clauseContext _localctx = new Deallocate_unused_clauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_deallocate_unused_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3607);
			match(DEALLOCATE);
			setState(3608);
			match(UNUSED);
			setState(3611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEEP) {
				{
				setState(3609);
				match(KEEP);
				setState(3610);
				size_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Upgrade_table_clauseContext extends ParserRuleContext {
		public TerminalNode UPGRADE() { return getToken(plsqlParser.UPGRADE, 0); }
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Upgrade_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upgrade_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpgrade_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpgrade_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpgrade_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upgrade_table_clauseContext upgrade_table_clause() throws RecognitionException {
		Upgrade_table_clauseContext _localctx = new Upgrade_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_upgrade_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			match(UPGRADE);
			{
			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3614);
				match(NOT);
				}
			}

			setState(3617);
			match(INCLUDING);
			setState(3618);
			match(DATA);
			}
			setState(3620);
			column_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Records_per_block_clauseContext extends ParserRuleContext {
		public TerminalNode RECORDS_PER_BLOCK() { return getToken(plsqlParser.RECORDS_PER_BLOCK, 0); }
		public TerminalNode MINIMIZE() { return getToken(plsqlParser.MINIMIZE, 0); }
		public TerminalNode NOMINIMIZE() { return getToken(plsqlParser.NOMINIMIZE, 0); }
		public Records_per_block_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_records_per_block_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecords_per_block_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecords_per_block_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecords_per_block_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Records_per_block_clauseContext records_per_block_clause() throws RecognitionException {
		Records_per_block_clauseContext _localctx = new Records_per_block_clauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_records_per_block_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINIMIZE || _la==NOMINIMIZE) {
				{
				setState(3622);
				_la = _input.LA(1);
				if ( !(_la==MINIMIZE || _la==NOMINIMIZE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3625);
			match(RECORDS_PER_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_iot_clausesContext extends ParserRuleContext {
		public Index_org_table_clauseContext index_org_table_clause() {
			return getRuleContext(Index_org_table_clauseContext.class,0);
		}
		public Alter_overflow_clauseContext alter_overflow_clause() {
			return getRuleContext(Alter_overflow_clauseContext.class,0);
		}
		public Alter_mapping_table_clauseContext alter_mapping_table_clause() {
			return getRuleContext(Alter_mapping_table_clauseContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(plsqlParser.COALESCE, 0); }
		public Alter_iot_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_iot_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_iot_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_iot_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_iot_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_iot_clausesContext alter_iot_clauses() throws RecognitionException {
		Alter_iot_clausesContext _localctx = new Alter_iot_clausesContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_iot_clauses);
		try {
			setState(3631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3627);
				index_org_table_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3628);
				alter_overflow_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3629);
				alter_mapping_table_clause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3630);
				match(COALESCE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_org_table_clauseContext extends ParserRuleContext {
		public Mapping_table_clauseContext mapping_table_clause() {
			return getRuleContext(Mapping_table_clauseContext.class,0);
		}
		public TerminalNode PCTTHRESHOLD() { return getToken(plsqlParser.PCTTHRESHOLD, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Key_compressionContext key_compression() {
			return getRuleContext(Key_compressionContext.class,0);
		}
		public Index_org_overflow_clauseContext index_org_overflow_clause() {
			return getRuleContext(Index_org_overflow_clauseContext.class,0);
		}
		public Index_org_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_org_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_org_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_org_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_org_table_clauseContext index_org_table_clause() throws RecognitionException {
		Index_org_table_clauseContext _localctx = new Index_org_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_index_org_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
			case NOMAPPING:
				{
				setState(3633);
				mapping_table_clause();
				}
				break;
			case PCTTHRESHOLD:
				{
				setState(3634);
				match(PCTTHRESHOLD);
				setState(3635);
				match(UNSIGNED_INTEGER);
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				{
				setState(3636);
				key_compression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING || _la==OVERFLOW) {
				{
				setState(3639);
				index_org_overflow_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Mapping_table_clauseContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(plsqlParser.MAPPING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode NOMAPPING() { return getToken(plsqlParser.NOMAPPING, 0); }
		public Mapping_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapping_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMapping_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMapping_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMapping_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mapping_table_clauseContext mapping_table_clause() throws RecognitionException {
		Mapping_table_clauseContext _localctx = new Mapping_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_mapping_table_clause);
		try {
			setState(3645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3642);
				match(MAPPING);
				setState(3643);
				match(TABLE);
				}
				break;
			case NOMAPPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				match(NOMAPPING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_org_overflow_clauseContext extends ParserRuleContext {
		public TerminalNode OVERFLOW() { return getToken(plsqlParser.OVERFLOW, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Index_org_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_org_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_org_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_org_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_org_overflow_clauseContext index_org_overflow_clause() throws RecognitionException {
		Index_org_overflow_clauseContext _localctx = new Index_org_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_index_org_overflow_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING) {
				{
				setState(3647);
				match(INCLUDING);
				setState(3648);
				column_name();
				}
			}

			setState(3651);
			match(OVERFLOW);
			setState(3653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3652);
				segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_overflow_clauseContext extends ParserRuleContext {
		public Add_overflow_clauseContext add_overflow_clause() {
			return getRuleContext(Add_overflow_clauseContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(plsqlParser.OVERFLOW, 0); }
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Shrink_clauseContext> shrink_clause() {
			return getRuleContexts(Shrink_clauseContext.class);
		}
		public Shrink_clauseContext shrink_clause(int i) {
			return getRuleContext(Shrink_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public Alter_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_overflow_clauseContext alter_overflow_clause() throws RecognitionException {
		Alter_overflow_clauseContext _localctx = new Alter_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_overflow_clause);
		int _la;
		try {
			setState(3665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3655);
				add_overflow_clause();
				}
				break;
			case OVERFLOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(3656);
				match(OVERFLOW);
				setState(3661); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3661);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						setState(3657);
						segment_attributes_clause();
						}
						break;
					case ALLOCATE:
						{
						setState(3658);
						allocate_extent_clause();
						}
						break;
					case SHRINK:
						{
						setState(3659);
						shrink_clause();
						}
						break;
					case DEALLOCATE:
						{
						setState(3660);
						deallocate_unused_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3663); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALLOCATE || _la==DEALLOCATE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & 81064793292668929L) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & 274886295553L) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Add_overflow_clauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode OVERFLOW() { return getToken(plsqlParser.OVERFLOW, 0); }
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> PARTITION() { return getTokens(plsqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(plsqlParser.PARTITION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Add_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_overflow_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdd_overflow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdd_overflow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAdd_overflow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_overflow_clauseContext add_overflow_clause() throws RecognitionException {
		Add_overflow_clauseContext _localctx = new Add_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_add_overflow_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			match(ADD);
			setState(3668);
			match(OVERFLOW);
			setState(3670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3669);
				segment_attributes_clause();
				}
			}

			setState(3685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(3672);
				match(LEFT_PAREN);
				setState(3680); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3674);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3673);
						match(COMMA);
						}
					}

					setState(3676);
					match(PARTITION);
					setState(3678);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
						{
						setState(3677);
						segment_attributes_clause();
						}
					}

					}
					}
					setState(3682); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION || _la==COMMA );
				setState(3684);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Shrink_clauseContext extends ParserRuleContext {
		public TerminalNode SHRINK() { return getToken(plsqlParser.SHRINK, 0); }
		public TerminalNode SPACE_KEYWORD() { return getToken(plsqlParser.SPACE_KEYWORD, 0); }
		public TerminalNode COMPACT() { return getToken(plsqlParser.COMPACT, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public Shrink_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shrink_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterShrink_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitShrink_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitShrink_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shrink_clauseContext shrink_clause() throws RecognitionException {
		Shrink_clauseContext _localctx = new Shrink_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_shrink_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3687);
			match(SHRINK);
			setState(3688);
			match(SPACE_KEYWORD);
			setState(3690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPACT) {
				{
				setState(3689);
				match(COMPACT);
				}
			}

			setState(3693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(3692);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_mapping_table_clauseContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(plsqlParser.MAPPING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Allocate_extent_clauseContext allocate_extent_clause() {
			return getRuleContext(Allocate_extent_clauseContext.class,0);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause() {
			return getRuleContext(Deallocate_unused_clauseContext.class,0);
		}
		public Alter_mapping_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_mapping_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_mapping_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_mapping_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_mapping_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_mapping_table_clauseContext alter_mapping_table_clause() throws RecognitionException {
		Alter_mapping_table_clauseContext _localctx = new Alter_mapping_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alter_mapping_table_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695);
			match(MAPPING);
			setState(3696);
			match(TABLE);
			setState(3699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOCATE:
				{
				setState(3697);
				allocate_extent_clause();
				}
				break;
			case DEALLOCATE:
				{
				setState(3698);
				deallocate_unused_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_clausesContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public Old_constraint_nameContext old_constraint_name() {
			return getRuleContext(Old_constraint_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public New_constraint_nameContext new_constraint_name() {
			return getRuleContext(New_constraint_nameContext.class,0);
		}
		public List<Drop_constraint_clauseContext> drop_constraint_clause() {
			return getRuleContexts(Drop_constraint_clauseContext.class);
		}
		public Drop_constraint_clauseContext drop_constraint_clause(int i) {
			return getRuleContext(Drop_constraint_clauseContext.class,i);
		}
		public Constraint_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_clausesContext constraint_clauses() throws RecognitionException {
		Constraint_clausesContext _localctx = new Constraint_clausesContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_constraint_clauses);
		int _la;
		try {
			int _alt;
			setState(3747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3701);
				match(ADD);
				setState(3702);
				match(LEFT_PAREN);
				setState(3710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE) {
						{
						{
						setState(3703);
						out_of_line_constraint();
						}
						}
						setState(3708);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(3709);
					out_of_line_ref_constraint();
					}
					break;
				}
				setState(3712);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713);
				match(ADD);
				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3717);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE) {
						{
						{
						setState(3714);
						out_of_line_constraint();
						}
						}
						setState(3719);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(3720);
					out_of_line_ref_constraint();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3723);
				match(MODIFY);
				setState(3730);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(3724);
					match(CONSTRAINT);
					setState(3725);
					constraint_name();
					}
					break;
				case PRIMARY:
					{
					setState(3726);
					match(PRIMARY);
					setState(3727);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(3728);
					match(UNIQUE);
					setState(3729);
					paren_column_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3732);
				constraint_state();
				setState(3734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3733);
					match(CASCADE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3736);
				match(RENAME);
				setState(3737);
				match(CONSTRAINT);
				setState(3738);
				old_constraint_name();
				setState(3739);
				match(TO);
				setState(3740);
				new_constraint_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3743); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3742);
						drop_constraint_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3745); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_constraint_nameContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Old_constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOld_constraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOld_constraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOld_constraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_constraint_nameContext old_constraint_name() throws RecognitionException {
		Old_constraint_nameContext _localctx = new Old_constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_old_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class New_constraint_nameContext extends ParserRuleContext {
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public New_constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNew_constraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNew_constraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNew_constraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final New_constraint_nameContext new_constraint_name() throws RecognitionException {
		New_constraint_nameContext _localctx = new New_constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_new_constraint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_constraint_clauseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Drop_primary_key_or_unique_or_generic_clauseContext drop_primary_key_or_unique_or_generic_clause() {
			return getRuleContext(Drop_primary_key_or_unique_or_generic_clauseContext.class,0);
		}
		public Drop_constraint_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_constraint_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_constraint_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_constraint_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_constraint_clauseContext drop_constraint_clause() throws RecognitionException {
		Drop_constraint_clauseContext _localctx = new Drop_constraint_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_drop_constraint_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			match(DROP);
			setState(3754);
			drop_primary_key_or_unique_or_generic_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_primary_key_or_unique_or_generic_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_primary_key_or_unique_or_generic_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_primary_key_or_unique_or_generic_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_primary_key_or_unique_or_generic_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_primary_key_or_unique_or_generic_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_primary_key_or_unique_or_generic_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_primary_key_or_unique_or_generic_clauseContext drop_primary_key_or_unique_or_generic_clause() throws RecognitionException {
		Drop_primary_key_or_unique_or_generic_clauseContext _localctx = new Drop_primary_key_or_unique_or_generic_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_drop_primary_key_or_unique_or_generic_clause);
		int _la;
		try {
			setState(3773);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3760);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(3756);
					match(PRIMARY);
					setState(3757);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(3758);
					match(UNIQUE);
					setState(3759);
					paren_column_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3762);
					match(CASCADE);
					}
				}

				setState(3766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3765);
					_la = _input.LA(1);
					if ( !(_la==DROP || _la==KEEP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case CONSTRAINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3768);
				match(CONSTRAINT);
				setState(3769);
				constraint_name();
				setState(3771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(3770);
					match(CASCADE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_clausesContext extends ParserRuleContext {
		public Add_modify_drop_column_clausesContext add_modify_drop_column_clauses() {
			return getRuleContext(Add_modify_drop_column_clausesContext.class,0);
		}
		public Rename_column_clauseContext rename_column_clause() {
			return getRuleContext(Rename_column_clauseContext.class,0);
		}
		public Modify_collection_retrievalContext modify_collection_retrieval() {
			return getRuleContext(Modify_collection_retrievalContext.class,0);
		}
		public Modify_lob_storage_clauseContext modify_lob_storage_clause() {
			return getRuleContext(Modify_lob_storage_clauseContext.class,0);
		}
		public Column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_clausesContext column_clauses() throws RecognitionException {
		Column_clausesContext _localctx = new Column_clausesContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_column_clauses);
		try {
			setState(3779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3775);
				add_modify_drop_column_clauses();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3776);
				rename_column_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3777);
				modify_collection_retrieval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3778);
				modify_lob_storage_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Add_modify_drop_column_clausesContext extends ParserRuleContext {
		public List<Add_column_clauseContext> add_column_clause() {
			return getRuleContexts(Add_column_clauseContext.class);
		}
		public Add_column_clauseContext add_column_clause(int i) {
			return getRuleContext(Add_column_clauseContext.class,i);
		}
		public List<Modify_column_clausesContext> modify_column_clauses() {
			return getRuleContexts(Modify_column_clausesContext.class);
		}
		public Modify_column_clausesContext modify_column_clauses(int i) {
			return getRuleContext(Modify_column_clausesContext.class,i);
		}
		public List<Alter_column_clauseContext> alter_column_clause() {
			return getRuleContexts(Alter_column_clauseContext.class);
		}
		public Alter_column_clauseContext alter_column_clause(int i) {
			return getRuleContext(Alter_column_clauseContext.class,i);
		}
		public List<Drop_column_clauseContext> drop_column_clause() {
			return getRuleContexts(Drop_column_clauseContext.class);
		}
		public Drop_column_clauseContext drop_column_clause(int i) {
			return getRuleContext(Drop_column_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Add_modify_drop_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_modify_drop_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdd_modify_drop_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdd_modify_drop_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAdd_modify_drop_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_modify_drop_column_clausesContext add_modify_drop_column_clauses() throws RecognitionException {
		Add_modify_drop_column_clausesContext _localctx = new Add_modify_drop_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_add_modify_drop_column_clauses);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3792); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3792);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADD:
						{
						setState(3781);
						add_column_clause();
						}
						break;
					case MODIFY:
						{
						setState(3782);
						modify_column_clauses();
						}
						break;
					case ALTER:
						{
						setState(3783);
						alter_column_clause();
						}
						break;
					case DROP:
					case SET:
						{
						setState(3784);
						drop_column_clause();
						setState(3789);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3785);
							match(COMMA);
							setState(3786);
							drop_column_clause();
							}
							}
							setState(3791);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3794); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Add_column_clauseContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<Virtual_column_definitionContext> virtual_column_definition() {
			return getRuleContexts(Virtual_column_definitionContext.class);
		}
		public Virtual_column_definitionContext virtual_column_definition(int i) {
			return getRuleContext(Virtual_column_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Add_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdd_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdd_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAdd_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_column_clauseContext add_column_clause() throws RecognitionException {
		Add_column_clauseContext _localctx = new Add_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_add_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			match(ADD);
			setState(3798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3797);
				match(COLUMN);
				}
			}

			setState(3819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3800);
				match(LEFT_PAREN);
				setState(3809); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
					case 1:
						{
						setState(3802);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3801);
							match(COMMA);
							}
						}

						setState(3804);
						column_definition();
						}
						break;
					case 2:
						{
						setState(3806);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3805);
							match(COMMA);
							}
						}

						setState(3808);
						virtual_column_definition();
						}
						break;
					}
					}
					setState(3811); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3813);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(3817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3815);
					column_definition();
					}
					break;
				case 2:
					{
					setState(3816);
					virtual_column_definition();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==LOB || _la==NESTED || _la==VARRAY || _la==XMLTYPE) {
				{
				setState(3821);
				column_properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_column_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<Modify_col_propertiesContext> modify_col_properties() {
			return getRuleContexts(Modify_col_propertiesContext.class);
		}
		public Modify_col_propertiesContext modify_col_properties(int i) {
			return getRuleContext(Modify_col_propertiesContext.class,i);
		}
		public Modify_col_substitutableContext modify_col_substitutable() {
			return getRuleContext(Modify_col_substitutableContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Modify_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_column_clausesContext modify_column_clauses() throws RecognitionException {
		Modify_column_clausesContext _localctx = new Modify_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_modify_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3824);
			match(MODIFY);
			setState(3838);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3825);
				match(LEFT_PAREN);
				setState(3830); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3827);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3826);
						match(COMMA);
						}
					}

					setState(3829);
					modify_col_properties();
					}
					}
					setState(3832); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
				setState(3834);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(3836);
				modify_col_properties();
				}
				break;
			case COLUMN:
				{
				setState(3837);
				modify_col_substitutable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_clauseContext extends ParserRuleContext {
		public Token op;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Alter_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_clauseContext alter_column_clause() throws RecognitionException {
		Alter_column_clauseContext _localctx = new Alter_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alter_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3840);
			match(ALTER);
			setState(3842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3841);
				match(COLUMN);
				}
			}

			setState(3844);
			column_name();
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case SET:
				{
				setState(3845);
				((Alter_column_clauseContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
					((Alter_column_clauseContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3846);
				match(NOT);
				setState(3847);
				match(NULL);
				}
				break;
			case TYPE:
				{
				setState(3848);
				match(TYPE);
				setState(3849);
				datatype();
				setState(3852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3850);
					match(USING);
					{
					setState(3851);
					expression(0);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_col_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(plsqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return getRuleContext(Encryption_specContext.class,0);
		}
		public TerminalNode DECRYPT() { return getToken(plsqlParser.DECRYPT, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Modify_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_propertiesContext modify_col_properties() throws RecognitionException {
		Modify_col_propertiesContext _localctx = new Modify_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_modify_col_properties);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			column_name();
			setState(3858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(3857);
				datatype();
				}
				break;
			}
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(3860);
				match(DEFAULT);
				setState(3861);
				expression(0);
				}
			}

			setState(3867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPT:
				{
				setState(3864);
				match(ENCRYPT);
				setState(3865);
				encryption_spec();
				}
				break;
			case DECRYPT:
				{
				setState(3866);
				match(DECRYPT);
				}
				break;
			case EOF:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHECK:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DROP:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GRANT:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSERT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOB:
			case LOCK:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIMARY:
			case PROCEDURE:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNIQUE:
			case UNLIMITED:
			case UNTIL:
			case UPDATE:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITH:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
			case REGULAR_ID:
				break;
			default:
				break;
			}
			setState(3872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3869);
					inline_constraint();
					}
					} 
				}
				setState(3874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			}
			setState(3876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOB) {
				{
				setState(3875);
				lob_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_col_substitutableContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(plsqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Modify_col_substitutableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_substitutable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_substitutable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_substitutable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_col_substitutable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_substitutableContext modify_col_substitutable() throws RecognitionException {
		Modify_col_substitutableContext _localctx = new Modify_col_substitutableContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_modify_col_substitutable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			match(COLUMN);
			setState(3879);
			column_name();
			setState(3881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3880);
				match(NOT);
				}
			}

			setState(3883);
			match(SUBSTITUTABLE);
			setState(3884);
			match(AT);
			setState(3885);
			match(ALL);
			setState(3886);
			match(LEVELS);
			setState(3888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(3887);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_column_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name;
		public List<Column_nameContext> names = new ArrayList<Column_nameContext>();
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode UNUSED() { return getToken(plsqlParser.UNUSED, 0); }
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> CASCADE() { return getTokens(plsqlParser.CASCADE); }
		public TerminalNode CASCADE(int i) {
			return getToken(plsqlParser.CASCADE, i);
		}
		public List<TerminalNode> CONSTRAINTS() { return getTokens(plsqlParser.CONSTRAINTS); }
		public TerminalNode CONSTRAINTS(int i) {
			return getToken(plsqlParser.CONSTRAINTS, i);
		}
		public List<TerminalNode> INVALIDATE() { return getTokens(plsqlParser.INVALIDATE); }
		public TerminalNode INVALIDATE(int i) {
			return getToken(plsqlParser.INVALIDATE, i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode CHECKPOINT() { return getToken(plsqlParser.CHECKPOINT, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Drop_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_clauseContext drop_column_clause() throws RecognitionException {
		Drop_column_clauseContext _localctx = new Drop_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_drop_column_clause);
		int _la;
		try {
			setState(3952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3890);
				match(SET);
				setState(3891);
				match(UNUSED);
				setState(3905);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					setState(3892);
					match(COLUMN);
					setState(3893);
					((Drop_column_clauseContext)_localctx).column_name = column_name();
					((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
					}
					break;
				case LEFT_PAREN:
					{
					{
					setState(3894);
					match(LEFT_PAREN);
					setState(3899); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3896);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3895);
							match(COMMA);
							}
						}

						setState(3898);
						((Drop_column_clauseContext)_localctx).column_name = column_name();
						((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
						}
						}
						setState(3901); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3903);
					match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASCADE || _la==INVALIDATE) {
					{
					setState(3910);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CASCADE:
						{
						setState(3907);
						match(CASCADE);
						setState(3908);
						match(CONSTRAINTS);
						}
						break;
					case INVALIDATE:
						{
						setState(3909);
						match(INVALIDATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3914);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3915);
				match(DROP);
				setState(3929);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLUMN:
					{
					setState(3916);
					match(COLUMN);
					setState(3917);
					((Drop_column_clauseContext)_localctx).column_name = column_name();
					((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
					}
					break;
				case LEFT_PAREN:
					{
					setState(3918);
					match(LEFT_PAREN);
					setState(3923); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3920);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3919);
							match(COMMA);
							}
						}

						setState(3922);
						((Drop_column_clauseContext)_localctx).column_name = column_name();
						((Drop_column_clauseContext)_localctx).names.add(((Drop_column_clauseContext)_localctx).column_name);
						}
						}
						setState(3925); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==COMMA || _la==REGULAR_ID );
					setState(3927);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASCADE || _la==INVALIDATE) {
					{
					setState(3934);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CASCADE:
						{
						setState(3931);
						match(CASCADE);
						setState(3932);
						match(CONSTRAINTS);
						}
						break;
					case INVALIDATE:
						{
						setState(3933);
						match(INVALIDATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECKPOINT) {
					{
					setState(3939);
					match(CHECKPOINT);
					setState(3940);
					match(UNSIGNED_INTEGER);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3943);
				match(DROP);
				setState(3948);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNUSED:
					{
					setState(3944);
					match(UNUSED);
					setState(3945);
					match(COLUMNS);
					}
					break;
				case COLUMNS:
					{
					setState(3946);
					match(COLUMNS);
					setState(3947);
					match(CONTINUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				{
				setState(3950);
				match(CHECKPOINT);
				setState(3951);
				match(UNSIGNED_INTEGER);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rename_column_clauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public Old_column_nameContext old_column_name() {
			return getRuleContext(Old_column_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public New_column_nameContext new_column_name() {
			return getRuleContext(New_column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Rename_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRename_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRename_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRename_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_column_clauseContext rename_column_clause() throws RecognitionException {
		Rename_column_clauseContext _localctx = new Rename_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_rename_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3954);
			match(RENAME);
			setState(3956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3955);
				match(COLUMN);
				}
			}

			setState(3958);
			old_column_name();
			setState(3959);
			match(TO);
			setState(3960);
			new_column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Old_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Old_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_old_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOld_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOld_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOld_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Old_column_nameContext old_column_name() throws RecognitionException {
		Old_column_nameContext _localctx = new Old_column_nameContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_old_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3962);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class New_column_nameContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public New_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_new_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNew_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNew_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNew_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final New_column_nameContext new_column_name() throws RecognitionException {
		New_column_nameContext _localctx = new New_column_nameContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_new_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_collection_retrievalContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Collection_itemContext collection_item() {
			return getRuleContext(Collection_itemContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode LOCATOR() { return getToken(plsqlParser.LOCATOR, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Modify_collection_retrievalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_collection_retrieval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_collection_retrieval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_collection_retrieval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_collection_retrieval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_collection_retrievalContext modify_collection_retrieval() throws RecognitionException {
		Modify_collection_retrievalContext _localctx = new Modify_collection_retrievalContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_modify_collection_retrieval);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3966);
			match(MODIFY);
			setState(3967);
			match(NESTED);
			setState(3968);
			match(TABLE);
			setState(3969);
			collection_item();
			setState(3970);
			match(RETURN);
			setState(3971);
			match(AS);
			setState(3972);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_itemContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Collection_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCollection_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_itemContext collection_item() throws RecognitionException {
		Collection_itemContext _localctx = new Collection_itemContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_collection_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Lob_itemContext lob_item() {
			return getRuleContext(Lob_itemContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public Modify_lob_parametersContext modify_lob_parameters() {
			return getRuleContext(Modify_lob_parametersContext.class,0);
		}
		public Modify_lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_lob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_lob_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_lob_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_lob_storage_clauseContext modify_lob_storage_clause() throws RecognitionException {
		Modify_lob_storage_clauseContext _localctx = new Modify_lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_modify_lob_storage_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(MODIFY);
			setState(3977);
			match(LOB);
			setState(3978);
			match(LEFT_PAREN);
			setState(3979);
			lob_item();
			setState(3980);
			match(RIGHT_PAREN);
			setState(3981);
			match(LEFT_PAREN);
			setState(3982);
			modify_lob_parameters();
			setState(3983);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modify_lob_parametersContext extends ParserRuleContext {
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> REBUILD() { return getTokens(plsqlParser.REBUILD); }
		public TerminalNode REBUILD(int i) {
			return getToken(plsqlParser.REBUILD, i);
		}
		public List<TerminalNode> FREEPOOLS() { return getTokens(plsqlParser.FREEPOOLS); }
		public TerminalNode FREEPOOLS(int i) {
			return getToken(plsqlParser.FREEPOOLS, i);
		}
		public List<Lob_retention_clauseContext> lob_retention_clause() {
			return getRuleContexts(Lob_retention_clauseContext.class);
		}
		public Lob_retention_clauseContext lob_retention_clause(int i) {
			return getRuleContext(Lob_retention_clauseContext.class,i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(plsqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(plsqlParser.ENCRYPT, i);
		}
		public List<Encryption_specContext> encryption_spec() {
			return getRuleContexts(Encryption_specContext.class);
		}
		public Encryption_specContext encryption_spec(int i) {
			return getRuleContext(Encryption_specContext.class,i);
		}
		public List<TerminalNode> DECRYPT() { return getTokens(plsqlParser.DECRYPT); }
		public TerminalNode DECRYPT(int i) {
			return getToken(plsqlParser.DECRYPT, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<Allocate_extent_clauseContext> allocate_extent_clause() {
			return getRuleContexts(Allocate_extent_clauseContext.class);
		}
		public Allocate_extent_clauseContext allocate_extent_clause(int i) {
			return getRuleContext(Allocate_extent_clauseContext.class,i);
		}
		public List<Shrink_clauseContext> shrink_clause() {
			return getRuleContexts(Shrink_clauseContext.class);
		}
		public Shrink_clauseContext shrink_clause(int i) {
			return getRuleContext(Shrink_clauseContext.class,i);
		}
		public List<Deallocate_unused_clauseContext> deallocate_unused_clause() {
			return getRuleContexts(Deallocate_unused_clauseContext.class);
		}
		public Deallocate_unused_clauseContext deallocate_unused_clause(int i) {
			return getRuleContext(Deallocate_unused_clauseContext.class,i);
		}
		public List<TerminalNode> PCTVERSION() { return getTokens(plsqlParser.PCTVERSION); }
		public TerminalNode PCTVERSION(int i) {
			return getToken(plsqlParser.PCTVERSION, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(plsqlParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(plsqlParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Modify_lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_lob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_lob_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_lob_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_lob_parametersContext modify_lob_parameters() throws RecognitionException {
		Modify_lob_parametersContext _localctx = new Modify_lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_modify_lob_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(3985);
					storage_clause();
					}
					break;
				case 2:
					{
					setState(3986);
					_la = _input.LA(1);
					if ( !(_la==FREEPOOLS || _la==PCTVERSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3987);
					match(UNSIGNED_INTEGER);
					}
					break;
				case 3:
					{
					setState(3988);
					match(REBUILD);
					setState(3989);
					match(FREEPOOLS);
					}
					break;
				case 4:
					{
					setState(3990);
					lob_retention_clause();
					}
					break;
				case 5:
					{
					setState(3991);
					lob_deduplicate_clause();
					}
					break;
				case 6:
					{
					setState(3992);
					lob_compression_clause();
					}
					break;
				case 7:
					{
					setState(3993);
					match(ENCRYPT);
					setState(3994);
					encryption_spec();
					}
					break;
				case 8:
					{
					setState(3995);
					match(DECRYPT);
					}
					break;
				case 9:
					{
					setState(3996);
					match(CACHE);
					}
					break;
				case 10:
					{
					setState(4001);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
					case 1:
						{
						setState(3997);
						match(CACHE);
						}
						break;
					case 2:
						{
						setState(3998);
						match(NOCACHE);
						}
						break;
					case 3:
						{
						setState(3999);
						match(CACHE);
						setState(4000);
						match(READS);
						}
						break;
					}
					setState(4004);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
						{
						setState(4003);
						logging_clause();
						}
					}

					}
					break;
				case 11:
					{
					setState(4006);
					allocate_extent_clause();
					}
					break;
				case 12:
					{
					setState(4007);
					shrink_clause();
					}
					break;
				case 13:
					{
					setState(4008);
					deallocate_unused_clause();
					}
					break;
				}
				}
				setState(4011); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALLOCATE || _la==CACHE || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 26456998543361L) != 0) || _la==ENCRYPT || _la==FREEPOOLS || _la==KEEP_DUPLICATES || ((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & 4611686018427387907L) != 0) || ((((_la - 410)) & ~0x3f) == 0 && ((1L << (_la - 410)) & -9223372036852678655L) != 0) || _la==STORAGE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4013);
			match(DROP);
			setState(4014);
			match(FUNCTION);
			setState(4015);
			function_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(ALTER);
			setState(4018);
			match(FUNCTION);
			setState(4019);
			function_name();
			setState(4020);
			match(COMPILE);
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(4021);
				match(DEBUG);
				}
				break;
			}
			setState(4027);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4024);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4029);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			setState(4032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4030);
				match(REUSE);
				setState(4031);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(4034);
				match(CREATE);
				setState(4037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4035);
					match(OR);
					setState(4036);
					match(REPLACE);
					}
				}

				}
			}

			setState(4041);
			match(FUNCTION);
			setState(4042);
			function_name();
			setState(4054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4043);
				match(LEFT_PAREN);
				setState(4044);
				parameter();
				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4045);
					match(COMMA);
					setState(4046);
					parameter();
					}
					}
					setState(4051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4052);
				match(RIGHT_PAREN);
				}
			}

			setState(4056);
			match(RETURN);
			setState(4057);
			type_spec();
			setState(4064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(4062);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(4058);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(4059);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(4060);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(4061);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				{
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(4067);
					match(PIPELINED);
					}
				}

				setState(4070);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(4071);
						match(DECLARE);
						}
					}

					setState(4077);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
						{
						{
						setState(4074);
						declare_spec();
						}
						}
						setState(4079);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4080);
					body();
					}
					break;
				case 2:
					{
					setState(4081);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(4084);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4085);
				match(USING);
				setState(4086);
				implementation_type_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4089);
			match(PARALLEL_ENABLE);
			setState(4091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4090);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_by_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			match(LEFT_PAREN);
			setState(4094);
			match(PARTITION);
			setState(4095);
			expression(0);
			setState(4096);
			match(BY);
			setState(4110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(4097);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(4098);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4099);
				match(LEFT_PAREN);
				setState(4100);
				column_name();
				setState(4105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4101);
					match(COMMA);
					setState(4102);
					column_name();
					}
					}
					setState(4107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4108);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(4112);
				streaming_clause();
				}
			}

			setState(4115);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			match(RESULT_CACHE);
			setState(4119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(4118);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4121);
			match(RELIES_ON);
			setState(4122);
			match(LEFT_PAREN);
			setState(4123);
			tableview_name();
			setState(4128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4124);
				match(COMMA);
				setState(4125);
				tableview_name();
				}
				}
				setState(4130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4131);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4133);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4134);
			expression(0);
			setState(4135);
			match(BY);
			setState(4136);
			match(LEFT_PAREN);
			setState(4137);
			column_name();
			setState(4142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4138);
				match(COMMA);
				setState(4139);
				column_name();
				}
				}
				setState(4144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4145);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(DROP);
			setState(4148);
			match(PACKAGE);
			setState(4150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(4149);
				match(BODY);
				}
				break;
			}
			setState(4152);
			package_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			match(ALTER);
			setState(4155);
			match(PACKAGE);
			setState(4156);
			package_name();
			setState(4157);
			match(COMPILE);
			setState(4159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				{
				setState(4158);
				match(DEBUG);
				}
				break;
			}
			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				{
				setState(4161);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4167);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4164);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4169);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,585,_ctx);
			}
			setState(4172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4170);
				match(REUSE);
				setState(4171);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			match(CREATE);
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4175);
				match(OR);
				setState(4176);
				match(REPLACE);
				}
			}

			setState(4179);
			match(PACKAGE);
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4180);
				package_spec();
				}
				break;
			case 2:
				{
				setState(4181);
				package_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			match(BODY);
			setState(4185);
			package_name();
			setState(4186);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
				{
				{
				setState(4187);
				package_obj_body();
				}
				}
				setState(4192);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(4193);
				match(BEGIN);
				setState(4194);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(4195);
				match(END);
				setState(4197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4196);
					package_name();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4201);
			package_name();
			setState(4203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4202);
				invoker_rights_clause();
				}
			}

			setState(4205);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
				{
				{
				setState(4206);
				package_obj_spec();
				}
				}
				setState(4211);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4212);
			match(END);
			setState(4214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4213);
				package_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_package_obj_spec);
		try {
			setState(4225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4216);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4217);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4218);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4219);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4220);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4221);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4222);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4223);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4224);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			match(PROCEDURE);
			setState(4228);
			procedure_name();
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4229);
				match(LEFT_PAREN);
				setState(4230);
				parameter();
				setState(4235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4231);
					match(COMMA);
					setState(4232);
					parameter();
					}
					}
					setState(4237);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4238);
				match(RIGHT_PAREN);
				}
			}

			setState(4242);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4244);
			match(FUNCTION);
			setState(4245);
			function_name();
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4246);
				match(LEFT_PAREN);
				setState(4247);
				parameter();
				setState(4252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4248);
					match(COMMA);
					setState(4249);
					parameter();
					}
					}
					setState(4254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4255);
				match(RIGHT_PAREN);
				}
			}

			setState(4259);
			match(RETURN);
			setState(4260);
			type_spec();
			setState(4262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(4261);
				match(DETERMINISTIC);
				}
			}

			setState(4265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(4264);
				match(RESULT_CACHE);
				}
			}

			setState(4267);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_package_obj_body);
		try {
			setState(4279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4269);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4270);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4271);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4272);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4273);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4274);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4275);
				create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4276);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4277);
				procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4278);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			match(DROP);
			setState(4282);
			match(PROCEDURE);
			setState(4283);
			procedure_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(ALTER);
			setState(4286);
			match(PROCEDURE);
			setState(4287);
			procedure_name();
			setState(4288);
			match(COMPILE);
			setState(4290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(4289);
				match(DEBUG);
				}
				break;
			}
			setState(4295);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4292);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			}
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4298);
				match(REUSE);
				setState(4299);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(4302);
				match(CREATE);
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(4303);
					match(OR);
					setState(4304);
					match(REPLACE);
					}
				}

				}
			}

			setState(4309);
			match(PROCEDURE);
			setState(4310);
			procedure_name();
			setState(4322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4311);
				match(LEFT_PAREN);
				setState(4312);
				parameter();
				setState(4317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4313);
					match(COMMA);
					setState(4314);
					parameter();
					}
					}
					setState(4319);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4320);
				match(RIGHT_PAREN);
				}
			}

			setState(4325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4324);
				invoker_rights_clause();
				}
			}

			setState(4327);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(4329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4328);
					match(DECLARE);
					}
				}

				setState(4334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
					{
					{
					setState(4331);
					declare_spec();
					}
					}
					setState(4336);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4337);
				body();
				}
				break;
			case 2:
				{
				setState(4338);
				call_spec();
				}
				break;
			case 3:
				{
				setState(4339);
				match(EXTERNAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			match(DROP);
			setState(4343);
			match(TRIGGER);
			setState(4344);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4346);
			match(ALTER);
			setState(4347);
			match(TRIGGER);
			setState(4348);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(4367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(4349);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(4350);
				match(RENAME);
				setState(4351);
				match(TO);
				setState(4352);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(4353);
				match(COMPILE);
				setState(4355);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4354);
					match(DEBUG);
					}
					break;
				}
				setState(4360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4357);
						compiler_parameters_clause();
						}
						} 
					}
					setState(4362);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
				}
				setState(4365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(4363);
					match(REUSE);
					setState(4364);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			match(CREATE);
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4370);
				match(OR);
				setState(4371);
				match(REPLACE);
				}
			}

			setState(4374);
			match(TRIGGER);
			setState(4375);
			trigger_name();
			setState(4379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				{
				setState(4376);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(4377);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(4378);
				non_dml_trigger();
				}
				break;
			}
			setState(4382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				{
				setState(4381);
				trigger_follows_clause();
				}
				break;
			}
			setState(4385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4384);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(4387);
				trigger_when_clause();
				}
			}

			setState(4390);
			trigger_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4392);
			match(FOLLOWS);
			setState(4393);
			trigger_name();
			setState(4398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4394);
				match(COMMA);
				setState(4395);
				trigger_name();
				}
				}
				setState(4400);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			match(WHEN);
			setState(4402);
			match(LEFT_PAREN);
			setState(4403);
			condition();
			setState(4404);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(4406);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(4407);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(4408);
				match(INSTEAD);
				setState(4409);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4412);
			dml_event_clause();
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				setState(4413);
				referencing_clause();
				}
				break;
			}
			setState(4417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4416);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4419);
			match(FOR);
			setState(4420);
			match(EACH);
			setState(4421);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			match(FOR);
			setState(4424);
			dml_event_clause();
			setState(4426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				{
				setState(4425);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4428);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4429);
			non_dml_event();
			setState(4434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4430);
				match(OR);
				setState(4431);
				non_dml_event();
				}
				}
				setState(4436);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4437);
			match(ON);
			setState(4445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4438);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(4442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
				case 1:
					{
					setState(4439);
					schema_name();
					setState(4440);
					match(PERIOD);
					}
					break;
				}
				setState(4444);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_trigger_body);
		try {
			setState(4452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4447);
				match(COMPOUND);
				setState(4448);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4449);
				match(CALL);
				setState(4450);
				r_id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4451);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			routine_name();
			setState(4456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4455);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4458);
			match(COMPOUND);
			setState(4459);
			match(TRIGGER);
			setState(4463);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,633,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4460);
					declare_spec();
					}
					} 
				}
				setState(4465);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,633,_ctx);
			}
			setState(4467); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4466);
				timing_point_section();
				}
				}
				setState(4469); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(4471);
			match(END);
			setState(4472);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_timing_point_section);
		try {
			setState(4510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4474);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(4475);
				match(STATEMENT);
				setState(4476);
				match(IS);
				setState(4477);
				trigger_block();
				setState(4478);
				match(BEFORE);
				setState(4479);
				match(STATEMENT);
				setState(4480);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4482);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(4483);
				match(EACH);
				setState(4484);
				match(ROW);
				setState(4485);
				match(IS);
				setState(4486);
				trigger_block();
				setState(4487);
				match(BEFORE);
				setState(4488);
				match(EACH);
				setState(4489);
				match(ROW);
				setState(4490);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4492);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(4493);
				match(STATEMENT);
				setState(4494);
				match(IS);
				setState(4495);
				trigger_block();
				setState(4496);
				match(AFTER);
				setState(4497);
				match(STATEMENT);
				setState(4498);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4500);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(4501);
				match(EACH);
				setState(4502);
				match(ROW);
				setState(4503);
				match(IS);
				setState(4504);
				trigger_block();
				setState(4505);
				match(AFTER);
				setState(4506);
				match(EACH);
				setState(4507);
				match(ROW);
				setState(4508);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_non_dml_event);
		try {
			setState(4538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4512);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4513);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4514);
				match(ASSOCIATE);
				setState(4515);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4516);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4517);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4518);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4519);
				match(DISASSOCIATE);
				setState(4520);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(4521);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4522);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(4523);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(4524);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(4525);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(4526);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(4527);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(4528);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(4529);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(4530);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(4531);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(4532);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(4533);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(4534);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(4535);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(4536);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(4537);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4540);
			dml_event_element();
			setState(4545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4541);
				match(OR);
				setState(4542);
				dml_event_element();
				}
				}
				setState(4547);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4548);
			match(ON);
			setState(4550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(4549);
				dml_event_nested_clause();
				}
				break;
			}
			setState(4552);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4554);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(4555);
				match(OF);
				setState(4556);
				column_name();
				setState(4561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4557);
					match(COMMA);
					setState(4558);
					column_name();
					}
					}
					setState(4563);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			match(NESTED);
			setState(4567);
			match(TABLE);
			setState(4568);
			tableview_name();
			setState(4569);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4571);
			match(REFERENCING);
			setState(4573); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4572);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4575); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			_la = _input.LA(1);
			if ( !(((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & 288230513590665217L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4578);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4580);
			match(DROP);
			setState(4581);
			match(TYPE);
			setState(4583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				{
				setState(4582);
				match(BODY);
				}
				break;
			}
			setState(4585);
			type_name();
			setState(4587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(4586);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4589);
			match(ALTER);
			setState(4590);
			match(TYPE);
			setState(4591);
			type_name();
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(4592);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(4593);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(4594);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(4595);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(4596);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(4599);
				dependent_handling_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			match(COMPILE);
			setState(4604);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(4603);
				match(DEBUG);
				}
				break;
			}
			setState(4607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(4606);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4612);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4609);
					compiler_parameters_clause();
					}
					} 
				}
				setState(4614);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			}
			setState(4617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(4615);
				match(REUSE);
				setState(4616);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(REPLACE);
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4620);
				invoker_rights_clause();
				}
			}

			setState(4623);
			match(AS);
			setState(4624);
			match(OBJECT);
			setState(4625);
			match(LEFT_PAREN);
			setState(4626);
			object_member_spec();
			setState(4631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4627);
				match(COMMA);
				setState(4628);
				object_member_spec();
				}
				}
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4634);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			alter_method_element();
			setState(4641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4637);
				match(COMMA);
				setState(4638);
				alter_method_element();
				}
				}
				setState(4643);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4644);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4647);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(4645);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(4646);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4649);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4650);
			match(ATTRIBUTE);
			setState(4663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4651);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4652);
				match(LEFT_PAREN);
				setState(4653);
				attribute_definition();
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4654);
					match(COMMA);
					setState(4655);
					attribute_definition();
					}
					}
					setState(4660);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4661);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4665);
			attribute_name();
			setState(4667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(4666);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669);
			match(MODIFY);
			setState(4675);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(4670);
				match(LIMIT);
				setState(4671);
				expression(0);
				}
				break;
			case ELEMENT:
				{
				setState(4672);
				match(ELEMENT);
				setState(4673);
				match(TYPE);
				setState(4674);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(4693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4677);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4678);
				match(CASCADE);
				setState(4688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(4679);
					match(CONVERT);
					setState(4680);
					match(TO);
					setState(4681);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(4683);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4682);
						match(NOT);
						}
					}

					setState(4685);
					match(INCLUDING);
					setState(4686);
					match(TABLE);
					setState(4687);
					match(DATA);
					}
					break;
				case EOF:
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXCEPTIONS:
				case EXPLAIN:
				case FORCE:
				case FUNCTION:
				case GRANT:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case REFRESH:
				case REVOKE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(4691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(4690);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(4695);
				match(FORCE);
				}
			}

			setState(4698);
			match(EXCEPTIONS);
			setState(4699);
			match(INTO);
			setState(4700);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			match(CREATE);
			setState(4705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4703);
				match(OR);
				setState(4704);
				match(REPLACE);
				}
			}

			setState(4707);
			match(TYPE);
			setState(4710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(4708);
				type_definition();
				}
				break;
			case 2:
				{
				setState(4709);
				type_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4712);
			type_name();
			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(4713);
				match(OID);
				setState(4714);
				match(CHAR_STRING);
				}
			}

			setState(4718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(4717);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(4720);
				invoker_rights_clause();
				}
			}

			setState(4725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(4723);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(4724);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(4727);
				sqlj_object_type();
				}
			}

			setState(4741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(4730);
				match(LEFT_PAREN);
				setState(4731);
				object_member_spec();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4732);
					match(COMMA);
					setState(4733);
					object_member_spec();
					}
					}
					setState(4738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4739);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(4743);
				modifier_clause();
				}
				}
				setState(4748);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(4750);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(4751);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(4752);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(UNDER);
			setState(4756);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			match(TABLE);
			setState(4759);
			match(OF);
			setState(4760);
			type_spec();
			setState(4763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(4761);
				match(NOT);
				setState(4762);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(EXTERNAL);
			setState(4766);
			match(NAME);
			setState(4767);
			expression(0);
			setState(4768);
			match(LANGUAGE);
			setState(4769);
			match(JAVA);
			setState(4770);
			match(USING);
			setState(4771);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4773);
			match(BODY);
			setState(4774);
			type_name();
			setState(4775);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4777); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4776);
				type_body_elements();
				}
				}
				setState(4779); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(4781);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_type_body_elements);
		try {
			setState(4785);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4783);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4784);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4787);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4788);
			match(MEMBER);
			setState(4789);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4791);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(4792);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(4793);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(4794);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4797);
			match(PROCEDURE);
			setState(4798);
			procedure_name();
			setState(4799);
			match(LEFT_PAREN);
			setState(4800);
			type_elements_parameter();
			setState(4805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4801);
				match(COMMA);
				setState(4802);
				type_elements_parameter();
				}
				}
				setState(4807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4808);
			match(RIGHT_PAREN);
			setState(4809);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(4810);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4811);
					match(DECLARE);
					}
				}

				setState(4817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
					{
					{
					setState(4814);
					declare_spec();
					}
					}
					setState(4819);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4820);
				body();
				setState(4821);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4825);
			match(FUNCTION);
			setState(4826);
			function_name();
			setState(4838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4827);
				match(LEFT_PAREN);
				setState(4828);
				type_elements_parameter();
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4829);
					match(COMMA);
					setState(4830);
					type_elements_parameter();
					}
					}
					setState(4835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4836);
				match(RIGHT_PAREN);
				}
			}

			setState(4840);
			match(RETURN);
			setState(4841);
			type_spec();
			setState(4842);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(4843);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4844);
					match(DECLARE);
					}
				}

				setState(4850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
					{
					{
					setState(4847);
					declare_spec();
					}
					}
					setState(4852);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4853);
				body();
				setState(4854);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(4858);
				match(FINAL);
				}
			}

			setState(4862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(4861);
				match(INSTANTIABLE);
				}
			}

			setState(4864);
			match(CONSTRUCTOR);
			setState(4865);
			match(FUNCTION);
			setState(4866);
			type_spec();
			setState(4884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4867);
				match(LEFT_PAREN);
				{
				setState(4868);
				match(SELF);
				setState(4869);
				match(IN);
				setState(4870);
				match(OUT);
				setState(4871);
				type_spec();
				setState(4872);
				match(COMMA);
				}
				setState(4874);
				type_elements_parameter();
				setState(4879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4875);
					match(COMMA);
					setState(4876);
					type_elements_parameter();
					}
					}
					setState(4881);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4882);
				match(RIGHT_PAREN);
				}
			}

			setState(4886);
			match(RETURN);
			setState(4887);
			match(SELF);
			setState(4888);
			match(AS);
			setState(4889);
			match(RESULT);
			setState(4890);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(4891);
				call_spec();
				}
				break;
			case 2:
				{
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(4892);
					match(DECLARE);
					}
				}

				setState(4898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
					{
					{
					setState(4895);
					declare_spec();
					}
					}
					setState(4900);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4901);
				body();
				setState(4902);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4906);
				match(NOT);
				}
			}

			setState(4909);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_member_specContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_object_member_spec);
		int _la;
		try {
			setState(4917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4911);
				r_id();
				setState(4912);
				type_spec();
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(4913);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4916);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4919);
			match(EXTERNAL);
			setState(4920);
			match(NAME);
			setState(4921);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(4923);
				modifier_clause();
				}
				break;
			}
			setState(4927); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4926);
				element_spec_options();
				}
				}
				setState(4929); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				{
				setState(4931);
				match(COMMA);
				setState(4932);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_element_spec_options);
		try {
			setState(4938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(4935);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4936);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4937);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4943);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(4941);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(4942);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4945);
			match(PROCEDURE);
			setState(4946);
			procedure_name();
			setState(4947);
			match(LEFT_PAREN);
			setState(4948);
			type_elements_parameter();
			setState(4953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4949);
				match(COMMA);
				setState(4950);
				type_elements_parameter();
				}
				}
				setState(4955);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4956);
			match(RIGHT_PAREN);
			setState(4959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(4957);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4958);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			match(FUNCTION);
			setState(4962);
			function_name();
			setState(4974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4963);
				match(LEFT_PAREN);
				setState(4964);
				type_elements_parameter();
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4965);
					match(COMMA);
					setState(4966);
					type_elements_parameter();
					}
					}
					setState(4971);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4972);
				match(RIGHT_PAREN);
				}
			}

			setState(4976);
			match(RETURN);
			setState(4981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(4977);
				type_spec();
				}
				break;
			case 2:
				{
				setState(4978);
				match(SELF);
				setState(4979);
				match(AS);
				setState(4980);
				match(RESULT);
				}
				break;
			}
			setState(4991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(4983);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4984);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(4985);
				match(EXTERNAL);
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(4986);
					match(VARIABLE);
					}
				}

				setState(4989);
				match(NAME);
				setState(4990);
				expression(0);
				}
				break;
			case EOF:
			case ALTER:
			case CASCADE:
			case CONSTRUCTOR:
			case CREATE:
			case DELETE:
			case DROP:
			case EXPLAIN:
			case FINAL:
			case FUNCTION:
			case GRANT:
			case INSERT:
			case INSTANTIABLE:
			case INVALIDATE:
			case LOCK:
			case MAP:
			case MEMBER:
			case MERGE:
			case ORDER:
			case PROCEDURE:
			case REFRESH:
			case REVOKE:
			case SELECT:
			case STATIC:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(4993);
				match(FINAL);
				}
			}

			setState(4997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(4996);
				match(INSTANTIABLE);
				}
			}

			setState(4999);
			match(CONSTRUCTOR);
			setState(5000);
			match(FUNCTION);
			setState(5001);
			type_spec();
			setState(5019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5002);
				match(LEFT_PAREN);
				{
				setState(5003);
				match(SELF);
				setState(5004);
				match(IN);
				setState(5005);
				match(OUT);
				setState(5006);
				type_spec();
				setState(5007);
				match(COMMA);
				}
				setState(5009);
				type_elements_parameter();
				setState(5014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5010);
					match(COMMA);
					setState(5011);
					type_elements_parameter();
					}
					}
					setState(5016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5017);
				match(RIGHT_PAREN);
				}
			}

			setState(5021);
			match(RETURN);
			setState(5022);
			match(SELF);
			setState(5023);
			match(AS);
			setState(5024);
			match(RESULT);
			setState(5027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(5025);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5026);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5030);
			match(MEMBER);
			setState(5031);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			match(PRAGMA);
			setState(5034);
			match(RESTRICT_REFERENCES);
			setState(5035);
			match(LEFT_PAREN);
			setState(5036);
			pragma_elements();
			setState(5041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5037);
				match(COMMA);
				setState(5038);
				pragma_elements();
				}
				}
				setState(5043);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5044);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_elementsContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_pragma_elements);
		try {
			setState(5048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5046);
				r_id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5047);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			parameter_name();
			setState(5051);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5053);
			match(DROP);
			setState(5054);
			match(SEQUENCE);
			setState(5055);
			sequence_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5057);
			match(ALTER);
			setState(5058);
			match(SEQUENCE);
			setState(5059);
			sequence_name();
			setState(5061); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5060);
				sequence_spec();
				}
				}
				setState(5063); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & 10189809910273L) != 0) || _la==ORDER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			match(CREATE);
			setState(5066);
			match(SEQUENCE);
			setState(5067);
			sequence_name();
			setState(5072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & 10189809910273L) != 0) || _la==ORDER || _la==START) {
				{
				setState(5070);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(5068);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(5069);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(5074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_sequence_spec);
		try {
			setState(5091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5075);
				match(INCREMENT);
				setState(5076);
				match(BY);
				setState(5077);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5078);
				match(MAXVALUE);
				setState(5079);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5080);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5081);
				match(MINVALUE);
				setState(5082);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5083);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5084);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5085);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5086);
				match(CACHE);
				setState(5087);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5088);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5089);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(5090);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5093);
			match(START);
			setState(5094);
			match(WITH);
			setState(5095);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			match(AUTHID);
			setState(5098);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			r_id();
			setState(5101);
			match(EQUALS_OP);
			setState(5102);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5104);
			match(LANGUAGE);
			setState(5107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(5105);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(5106);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			match(JAVA);
			setState(5110);
			match(NAME);
			setState(5111);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5113);
			match(C_LETTER);
			setState(5116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(5114);
				match(NAME);
				setState(5115);
				match(CHAR_STRING);
				}
			}

			setState(5118);
			match(LIBRARY);
			setState(5119);
			r_id();
			setState(5121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5120);
				c_agent_in_clause();
				}
				break;
			}
			setState(5125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5123);
				match(WITH);
				setState(5124);
				match(CONTEXT);
				}
				break;
			}
			setState(5128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				setState(5127);
				c_parameters_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			match(AGENT);
			setState(5131);
			match(IN);
			setState(5132);
			match(LEFT_PAREN);
			setState(5133);
			expression(0);
			setState(5138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5134);
				match(COMMA);
				setState(5135);
				expression(0);
				}
				}
				setState(5140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5141);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			match(PARAMETERS);
			setState(5144);
			match(LEFT_PAREN);
			setState(5156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(5145);
				expression(0);
				setState(5150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5146);
					match(COMMA);
					setState(5147);
					expression(0);
					}
					}
					setState(5152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(5153);
				match(PERIOD);
				setState(5154);
				match(PERIOD);
				setState(5155);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5158);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			parameter_name();
			setState(5164);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5161);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(5166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			}
			setState(5168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5167);
				type_spec();
				}
			}

			setState(5171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5170);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5173);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5174);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_declare_spec);
		try {
			setState(5185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5176);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5177);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5178);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5179);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5180);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5181);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5182);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5183);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5184);
				create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			variable_name();
			setState(5189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5188);
				match(CONSTANT);
				}
				break;
			}
			setState(5191);
			type_spec();
			setState(5194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5192);
				match(NOT);
				setState(5193);
				match(NULL);
				}
			}

			setState(5197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5196);
				default_value_part();
				}
			}

			setState(5199);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5201);
			match(SUBTYPE);
			setState(5202);
			type_name();
			setState(5203);
			match(IS);
			setState(5204);
			type_spec();
			setState(5210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(5205);
				match(RANGE);
				setState(5206);
				expression(0);
				setState(5207);
				match(T__0);
				setState(5208);
				expression(0);
				}
			}

			setState(5214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5212);
				match(NOT);
				setState(5213);
				match(NULL);
				}
			}

			setState(5216);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5218);
			match(CURSOR);
			setState(5219);
			cursor_name();
			setState(5231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5220);
				match(LEFT_PAREN);
				setState(5221);
				parameter_spec();
				setState(5226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5222);
					match(COMMA);
					setState(5223);
					parameter_spec();
					}
					}
					setState(5228);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5229);
				match(RIGHT_PAREN);
				}
			}

			setState(5235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(5233);
				match(RETURN);
				setState(5234);
				type_spec();
				}
			}

			setState(5239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5237);
				match(IS);
				setState(5238);
				select_statement();
				}
			}

			setState(5241);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5243);
			parameter_name();
			setState(5248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211665058563L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5244);
					match(IN);
					}
				}

				setState(5247);
				type_spec();
				}
			}

			setState(5251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5250);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			exception_name();
			setState(5254);
			match(EXCEPTION);
			setState(5255);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pragma_declarationContext extends ParserRuleContext {
		public R_idContext id1;
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<R_idContext> r_id() {
			return getRuleContexts(R_idContext.class);
		}
		public R_idContext r_id(int i) {
			return getRuleContext(R_idContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			match(PRAGMA);
			setState(5288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(5258);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(5259);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(5260);
				match(EXCEPTION_INIT);
				setState(5261);
				match(LEFT_PAREN);
				setState(5262);
				exception_name();
				setState(5263);
				match(COMMA);
				setState(5264);
				numeric_negative();
				setState(5265);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(5267);
				match(INLINE);
				setState(5268);
				match(LEFT_PAREN);
				setState(5269);
				((Pragma_declarationContext)_localctx).id1 = r_id();
				setState(5270);
				match(COMMA);
				setState(5271);
				expression(0);
				setState(5272);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(5274);
				match(RESTRICT_REFERENCES);
				setState(5275);
				match(LEFT_PAREN);
				setState(5278);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(5276);
					r_id();
					}
					break;
				case DEFAULT:
					{
					setState(5277);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5282); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5280);
					match(COMMA);
					setState(5281);
					r_id();
					}
					}
					setState(5284); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5286);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5290);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_record_declaration);
		try {
			setState(5294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5292);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5293);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(TYPE);
			setState(5297);
			type_name();
			setState(5298);
			match(IS);
			setState(5317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(5299);
				match(RECORD);
				setState(5300);
				match(LEFT_PAREN);
				setState(5301);
				field_spec();
				setState(5306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5302);
					match(COMMA);
					setState(5303);
					field_spec();
					}
					}
					setState(5308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5309);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(5311);
				match(REF);
				setState(5312);
				match(CURSOR);
				setState(5315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(5313);
					match(RETURN);
					setState(5314);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5319);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5321);
			column_name();
			setState(5323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5322);
				type_spec();
				}
			}

			setState(5327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5325);
				match(NOT);
				setState(5326);
				match(NULL);
				}
			}

			setState(5330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5329);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5332);
			record_name();
			setState(5333);
			type_name();
			setState(5334);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5335);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_declarationContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5337);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(5338);
				table_var_dec();
				}
				break;
			}
			setState(5341);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			match(TYPE);
			setState(5344);
			type_name();
			setState(5345);
			match(IS);
			setState(5357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(5346);
				match(TABLE);
				setState(5347);
				match(OF);
				setState(5348);
				type_spec();
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(5349);
					table_indexed_by_part();
					}
				}

				setState(5354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5352);
					match(NOT);
					setState(5353);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(5356);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(5359);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(5360);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5363);
			match(BY);
			setState(5364);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(5366);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(5367);
				match(VARYING);
				setState(5368);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5371);
			match(LEFT_PAREN);
			setState(5372);
			expression(0);
			setState(5373);
			match(RIGHT_PAREN);
			setState(5374);
			match(OF);
			setState(5375);
			type_spec();
			setState(5378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
			case 1:
				{
				setState(5376);
				match(NOT);
				setState(5377);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			table_var_name();
			setState(5381);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(plsqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(plsqlParser.SEMICOLON, i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5387); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5387);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BUILD:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case C_LETTER:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPLETE:
					case COMPOUND:
					case CONCAT:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECODE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DEMAND:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case EDITIONING:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENFORCED:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FAST:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERVAL:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LIST:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MASTER:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEVER:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NOSCHEMACHECK:
					case NVL:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case MATERIALIZED:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PREBUILT:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PROCEDURE:
					case PUBLIC:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REDUCED:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REFRESH:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case REWRITE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SIZE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case STANDALONE:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBSTRING:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TABLES:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TO_CHAR:
					case TO_DATE:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERBOSE:
					case VERSION:
					case VERSIONS:
					case VIEW:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITH:
					case WITHOUT:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case REGULAR_ID:
						{
						setState(5383);
						statement();
						setState(5384);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LESS_THAN_OP:
						{
						setState(5386);
						label_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5389); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,762,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(plsqlParser.LESS_THAN_OP); }
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(plsqlParser.LESS_THAN_OP, i);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(plsqlParser.GREATER_THAN_OP); }
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(plsqlParser.GREATER_THAN_OP, i);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5391);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(5392);
			match(LESS_THAN_OP);
			setState(5393);
			label_name();
			setState(5394);
			match(GREATER_THAN_OP);
			setState(5395);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_statement);
		try {
			setState(5423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5397);
				match(CREATE);
				setState(5398);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5399);
				match(ALTER);
				setState(5400);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5401);
				match(GRANT);
				setState(5403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5402);
					match(ALL);
					}
					break;
				}
				setState(5405);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5406);
				match(TRUNCATE);
				setState(5407);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5408);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5409);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5410);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5411);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5412);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5413);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5414);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5415);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5416);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5417);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5418);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5419);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5420);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5421);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5422);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5427);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5425);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(5426);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5429);
			match(ASSIGN_OP);
			setState(5430);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			match(CONTINUE);
			setState(5434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5433);
				label_name();
				}
			}

			setState(5438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5436);
				match(WHEN);
				setState(5437);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5440);
			match(EXIT);
			setState(5442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5441);
				label_name();
				}
			}

			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5444);
				match(WHEN);
				setState(5445);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			match(GOTO);
			setState(5449);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(IF);
			setState(5452);
			condition();
			setState(5453);
			match(THEN);
			setState(5454);
			seq_of_statements();
			setState(5458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(5455);
				elsif_part();
				}
				}
				setState(5460);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5461);
				else_part();
				}
			}

			setState(5464);
			match(END);
			setState(5465);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5467);
			match(ELSIF);
			setState(5468);
			condition();
			setState(5469);
			match(THEN);
			setState(5470);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(ELSE);
			setState(5473);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(5475);
				label_name();
				}
				break;
			}
			setState(5482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(5478);
				match(WHILE);
				setState(5479);
				condition();
				}
				break;
			case FOR:
				{
				setState(5480);
				match(FOR);
				setState(5481);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(5484);
			match(LOOP);
			setState(5485);
			seq_of_statements();
			setState(5486);
			match(END);
			setState(5487);
			match(LOOP);
			setState(5489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5488);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_cursor_loop_param);
		int _la;
		try {
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5491);
				index_name();
				setState(5492);
				match(IN);
				setState(5494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(5493);
					match(REVERSE);
					}
					break;
				}
				setState(5496);
				lower_bound();
				setState(5497);
				match(T__0);
				setState(5498);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5500);
				record_name();
				setState(5501);
				match(IN);
				setState(5510);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case REGULAR_ID:
					{
					setState(5502);
					cursor_name();
					setState(5504);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(5503);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(5506);
					match(LEFT_PAREN);
					setState(5507);
					select_statement();
					setState(5508);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5514);
			match(FORALL);
			setState(5515);
			index_name();
			setState(5516);
			match(IN);
			setState(5517);
			bounds_clause();
			setState(5518);
			sql_statement();
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(5519);
				match(SAVE);
				setState(5520);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_bounds_clause);
		int _la;
		try {
			setState(5536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5523);
				lower_bound();
				setState(5524);
				match(T__0);
				setState(5525);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5527);
				match(INDICES);
				setState(5528);
				match(OF);
				setState(5529);
				collection_name();
				setState(5531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(5530);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5533);
				match(VALUES);
				setState(5534);
				match(OF);
				setState(5535);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5538);
			match(BETWEEN);
			setState(5539);
			lower_bound();
			setState(5540);
			match(AND);
			setState(5541);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5543);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5549);
			match(RAISE);
			setState(5551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(5550);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			match(RETURN);
			setState(5555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9202536099305047024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -7079800708925760131L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958968282141095725L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -684268148513834687L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641265L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998929L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484746769L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & -8511240345776834593L) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & 67108961L) != 0)) {
				{
				setState(5554);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(5557);
				match(CALL);
				}
				break;
			}
			setState(5560);
			routine_name();
			setState(5562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5561);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5564);
			match(BEGIN);
			setState(5565);
			seq_of_statements();
			setState(5572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(5566);
				match(EXCEPTION);
				setState(5568); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5567);
					exception_handler();
					}
					}
					setState(5570); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(5574);
			match(END);
			setState(5576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(5575);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5578);
			match(WHEN);
			setState(5579);
			exception_name();
			setState(5584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(5580);
				match(OR);
				setState(5581);
				exception_name();
				}
				}
				setState(5586);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5587);
			match(THEN);
			setState(5588);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2287686533182643581L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0)) {
				{
				setState(5591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(5590);
					match(DECLARE);
					}
				}

				setState(5594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5593);
					declare_spec();
					}
					}
					setState(5596); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0) );
				}
			}

			setState(5600);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(5602);
				match(DECLARE);
				}
			}

			setState(5606); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5605);
				declare_spec();
				}
				}
				setState(5608); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571345106787709L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641201L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 2097155L) != 0) );
			setState(5610);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_sql_statement);
		try {
			setState(5616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5612);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5613);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5614);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(5615);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5618);
			match(EXECUTE);
			setState(5619);
			match(IMMEDIATE);
			setState(5620);
			expression(0);
			setState(5630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(5621);
				into_clause();
				setState(5623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5622);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(5625);
				using_clause();
				setState(5627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(5626);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(5629);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5633);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_data_manipulation_language_statements);
		try {
			setState(5642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5635);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5636);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5637);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5638);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5639);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5640);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(5641);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_cursor_manipulation_statements);
		try {
			setState(5648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5644);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5645);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5646);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5647);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5650);
			match(CLOSE);
			setState(5651);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			match(OPEN);
			setState(5654);
			cursor_name();
			setState(5656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5655);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			match(FETCH);
			setState(5659);
			cursor_name();
			setState(5680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(5660);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(5661);
				variable_name();
				setState(5666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5662);
					match(COMMA);
					setState(5663);
					variable_name();
					}
					}
					setState(5668);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(5669);
				match(BULK);
				setState(5670);
				match(COLLECT);
				setState(5671);
				match(INTO);
				setState(5672);
				variable_name();
				setState(5677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5673);
					match(COMMA);
					setState(5674);
					variable_name();
					}
					}
					setState(5679);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5682);
			match(OPEN);
			setState(5683);
			variable_name();
			setState(5684);
			match(FOR);
			setState(5687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				setState(5685);
				select_statement();
				}
				break;
			case 2:
				{
				setState(5686);
				expression(0);
				}
				break;
			}
			setState(5690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5689);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_transaction_control_statements);
		try {
			setState(5697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5692);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5693);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5694);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5695);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5696);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5699);
			match(SET);
			setState(5700);
			match(TRANSACTION);
			setState(5714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(5701);
				match(READ);
				setState(5702);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(5703);
				match(ISOLATION);
				setState(5704);
				match(LEVEL);
				setState(5708);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(5705);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(5706);
					match(READ);
					setState(5707);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(5710);
				match(USE);
				setState(5711);
				match(ROLLBACK);
				setState(5712);
				match(SEGMENT);
				setState(5713);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(5718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(5716);
				match(NAME);
				setState(5717);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5720);
			match(SET);
			setState(5721);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5722);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5723);
				constraint_name();
				setState(5728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5724);
					match(COMMA);
					setState(5725);
					constraint_name();
					}
					}
					setState(5730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5733);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			match(COMMIT);
			setState(5737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(5736);
				match(WORK);
				}
			}

			setState(5752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(5739);
				match(COMMENT);
				setState(5740);
				expression(0);
				}
				break;
			case FORCE:
				{
				setState(5741);
				match(FORCE);
				setState(5750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5742);
					match(CORRUPT_XID);
					setState(5743);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5744);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(5745);
					expression(0);
					setState(5748);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5746);
						match(COMMA);
						setState(5747);
						expression(0);
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(5755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(5754);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5757);
			match(WRITE);
			setState(5759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(5758);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(5761);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5764);
			match(ROLLBACK);
			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(5765);
				match(WORK);
				}
			}

			setState(5775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(5768);
				match(TO);
				setState(5770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(5769);
					match(SAVEPOINT);
					}
					break;
				}
				setState(5772);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(5773);
				match(FORCE);
				setState(5774);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5777);
			match(SAVEPOINT);
			setState(5778);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5780);
			match(EXPLAIN);
			setState(5781);
			match(PLAN);
			setState(5786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(5782);
				match(SET);
				setState(5783);
				match(STATEMENT_ID);
				setState(5784);
				match(EQUALS_OP);
				setState(5785);
				quoted_string();
				}
			}

			setState(5790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5788);
				match(INTO);
				setState(5789);
				tableview_name();
				}
			}

			setState(5792);
			match(FOR);
			setState(5798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(5793);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(5794);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(5795);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(5796);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(5797);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5800);
				subquery_factoring_clause();
				}
			}

			setState(5803);
			subquery(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5805);
			match(WITH);
			setState(5806);
			factoring_element();
			setState(5811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5807);
				match(COMMA);
				setState(5808);
				factoring_element();
				}
				}
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5814);
			query_name();
			setState(5816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5815);
				paren_column_list();
				}
			}

			setState(5818);
			match(AS);
			setState(5819);
			match(LEFT_PAREN);
			setState(5820);
			subquery(0);
			setState(5822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5821);
				order_by_clause();
				}
			}

			setState(5824);
			match(RIGHT_PAREN);
			setState(5826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(5825);
				search_clause();
				}
			}

			setState(5829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(5828);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			match(SEARCH);
			setState(5832);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5833);
			match(FIRST);
			setState(5834);
			match(BY);
			setState(5835);
			column_name();
			setState(5837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(5836);
				match(ASC);
				}
			}

			setState(5840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(5839);
				match(DESC);
				}
			}

			setState(5844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(5842);
				match(NULLS);
				setState(5843);
				match(FIRST);
				}
				break;
			}
			setState(5848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(5846);
				match(NULLS);
				setState(5847);
				match(LAST);
				}
			}

			setState(5868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5850);
				match(COMMA);
				setState(5851);
				column_name();
				setState(5853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(5852);
					match(ASC);
					}
				}

				setState(5856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(5855);
					match(DESC);
					}
				}

				setState(5860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
				case 1:
					{
					setState(5858);
					match(NULLS);
					setState(5859);
					match(FIRST);
					}
					break;
				}
				setState(5864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(5862);
					match(NULLS);
					setState(5863);
					match(LAST);
					}
				}

				}
				}
				setState(5870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5871);
			match(SET);
			setState(5872);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5874);
			match(CYCLE);
			setState(5875);
			column_name();
			setState(5880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5876);
				match(COMMA);
				setState(5877);
				column_name();
				}
				}
				setState(5882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5883);
			match(SET);
			setState(5884);
			column_name();
			setState(5885);
			match(TO);
			setState(5886);
			expression(0);
			setState(5887);
			match(DEFAULT);
			setState(5888);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	 
		public SubqueryContext() { }
		public void copyFrom(SubqueryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryParenContext extends SubqueryContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public SubqueryParenContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubqueryParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubqueryParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubqueryParen(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreSubqueryContext extends SubqueryContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public IgnoreSubqueryContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIgnoreSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIgnoreSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIgnoreSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryCompoundContext extends SubqueryContext {
		public SubqueryContext left;
		public Subquery_operation_partContext op;
		public SubqueryContext right;
		public List<SubqueryContext> subquery() {
			return getRuleContexts(SubqueryContext.class);
		}
		public SubqueryContext subquery(int i) {
			return getRuleContext(SubqueryContext.class,i);
		}
		public Subquery_operation_partContext subquery_operation_part() {
			return getRuleContext(Subquery_operation_partContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public SubqueryCompoundContext(SubqueryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubqueryCompound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubqueryCompound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubqueryCompound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		return subquery(0);
	}

	private SubqueryContext subquery(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SubqueryContext _localctx = new SubqueryContext(_ctx, _parentState);
		SubqueryContext _prevctx = _localctx;
		int _startState = 660;
		enterRecursionRule(_localctx, 660, RULE_subquery, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5896);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				_localctx = new SubqueryParenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5891);
				match(LEFT_PAREN);
				setState(5892);
				subquery(0);
				setState(5893);
				match(RIGHT_PAREN);
				}
				break;
			case SELECT:
				{
				_localctx = new IgnoreSubqueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5895);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(5906);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SubqueryCompoundContext(new SubqueryContext(_parentctx, _parentState));
					((SubqueryCompoundContext)_localctx).left = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_subquery);
					setState(5898);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5899);
					((SubqueryCompoundContext)_localctx).op = subquery_operation_part();
					setState(5900);
					((SubqueryCompoundContext)_localctx).right = subquery(0);
					setState(5902);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
					case 1:
						{
						setState(5901);
						order_by_clause();
						}
						break;
					}
					}
					} 
				}
				setState(5908);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_operation_partContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(plsqlParser.EXCEPT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5909);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==INTERSECT || _la==MINUS || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(5910);
				match(ALL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_blockContext extends ParserRuleContext {
		public Token pref;
		public Selected_elementContext selected_element;
		public List<Selected_elementContext> target_list = new ArrayList<Selected_elementContext>();
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public List<Group_by_clauseContext> group_by_clause() {
			return getRuleContexts(Group_by_clauseContext.class);
		}
		public Group_by_clauseContext group_by_clause(int i) {
			return getRuleContext(Group_by_clauseContext.class,i);
		}
		public List<Having_clauseContext> having_clause() {
			return getRuleContexts(Having_clauseContext.class);
		}
		public Having_clauseContext having_clause(int i) {
			return getRuleContext(Having_clauseContext.class,i);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public List<Limit_clauseContext> limit_clause() {
			return getRuleContexts(Limit_clauseContext.class);
		}
		public Limit_clauseContext limit_clause(int i) {
			return getRuleContext(Limit_clauseContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_query_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5913);
			match(SELECT);
			setState(5915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(5914);
				((Query_blockContext)_localctx).pref = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
					((Query_blockContext)_localctx).pref = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			{
			setState(5917);
			((Query_blockContext)_localctx).selected_element = selected_element();
			((Query_blockContext)_localctx).target_list.add(((Query_blockContext)_localctx).selected_element);
			setState(5922);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5918);
					match(COMMA);
					setState(5919);
					((Query_blockContext)_localctx).selected_element = selected_element();
					((Query_blockContext)_localctx).target_list.add(((Query_blockContext)_localctx).selected_element);
					}
					} 
				}
				setState(5924);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			}
			}
			setState(5926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(5925);
				into_clause();
				}
				break;
			}
			setState(5929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(5928);
				from_clause();
				}
				break;
			}
			setState(5932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(5931);
				where_clause();
				}
				break;
			}
			setState(5935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(5934);
				hierarchical_query_clause();
				}
				break;
			}
			setState(5941);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(5939);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case GROUP:
						{
						setState(5937);
						group_by_clause();
						}
						break;
					case HAVING:
						{
						setState(5938);
						having_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(5943);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			}
			setState(5945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				setState(5944);
				model_clause();
				}
				break;
			}
			setState(5952);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(5950);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FOR:
						{
						setState(5947);
						for_update_clause();
						}
						break;
					case ORDER:
						{
						setState(5948);
						order_by_clause();
						}
						break;
					case LIMIT:
						{
						setState(5949);
						limit_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(5954);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selected_elementContext extends ParserRuleContext {
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
	 
		public Selected_elementContext() { }
		public void copyFrom(Selected_elementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Alias_exprContext extends Selected_elementContext {
		public ExpressionContext expr;
		public Column_aliasContext alias;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Alias_exprContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlias_expr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreTableview_nameContext extends Selected_elementContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public IgnoreTableview_nameContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIgnoreTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIgnoreTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIgnoreTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StarTableContext extends Selected_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public StarTableContext(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStarTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStarTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStarTable(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Star1Context extends Selected_elementContext {
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public Star1Context(Selected_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStar1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStar1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStar1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_selected_element);
		try {
			setState(5965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				_localctx = new Star1Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5955);
				star();
				}
				break;
			case 2:
				_localctx = new StarTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5956);
				dot_id();
				setState(5957);
				match(PERIOD);
				setState(5958);
				star();
				}
				break;
			case 3:
				_localctx = new IgnoreTableview_nameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5960);
				tableview_name();
				}
				break;
			case 4:
				_localctx = new Alias_exprContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5961);
				((Alias_exprContext)_localctx).expr = expression(0);
				setState(5963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(5962);
					((Alias_exprContext)_localctx).alias = column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5967);
			match(FROM);
			setState(5968);
			table_ref(0);
			setState(5973);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5969);
					match(COMMA);
					setState(5970);
					table_ref(0);
					}
					} 
				}
				setState(5975);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_ref_pivotContext extends ParserRuleContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_pivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_pivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_pivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_pivot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_ref_pivot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_pivotContext table_ref_pivot() throws RecognitionException {
		Table_ref_pivotContext _localctx = new Table_ref_pivotContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_table_ref_pivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5976);
			table_ref(0);
			setState(5979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PIVOT:
				{
				setState(5977);
				pivot_clause();
				}
				break;
			case UNPIVOT:
				{
				setState(5978);
				unpivot_clause();
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_refContext extends ParserRuleContext {
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
	 
		public Table_refContext() { }
		public void copyFrom(Table_refContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class JoinExprContext extends Table_refContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public JoinExprContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoinExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoinExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoinExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableRefSimpleContext extends Table_refContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public TableRefSimpleContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableRefSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableRefSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTableRefSimple(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableRefAuxContext extends Table_refContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TableRefAuxContext(Table_refContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableRefAux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableRefAux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTableRefAux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		return table_ref(0);
	}

	private Table_refContext table_ref(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Table_refContext _localctx = new Table_refContext(_ctx, _parentState);
		Table_refContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_table_ref, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				_localctx = new TableRefSimpleContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5982);
				table_ref_aux();
				setState(5986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,861,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5983);
						flashback_query_clause();
						}
						} 
					}
					setState(5988);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,861,_ctx);
				}
				}
				break;
			case 2:
				{
				_localctx = new TableRefAuxContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5989);
				table_ref_aux();
				setState(5993);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5990);
						flashback_query_clause();
						}
						} 
					}
					setState(5995);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
				}
				setState(5997);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
				case 1:
					{
					setState(5996);
					table_alias();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6005);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinExprContext(new Table_refContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_table_ref);
					setState(6001);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6002);
					join_clause();
					}
					} 
				}
				setState(6007);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,865,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_table_ref_aux);
		try {
			setState(6018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6008);
				dml_table_expression_clause();
				setState(6011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(6009);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(6010);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6013);
				match(ONLY);
				setState(6014);
				match(LEFT_PAREN);
				setState(6015);
				dml_table_expression_clause();
				setState(6016);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_on_partContext join_on_part() {
			return getRuleContext(Join_on_partContext.class,0);
		}
		public Join_using_partContext join_using_part() {
			return getRuleContext(Join_using_partContext.class,0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_join_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6020);
				query_partition_clause();
				}
			}

			setState(6024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 1152921538966585345L) != 0) || _la==NATURAL || _la==RIGHT) {
				{
				setState(6023);
				join_type();
				}
			}

			setState(6026);
			match(JOIN);
			setState(6027);
			table_ref(0);
			setState(6029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(6028);
				query_partition_clause();
				}
				break;
			}
			setState(6033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				{
				setState(6031);
				join_on_part();
				}
				break;
			case 2:
				{
				setState(6032);
				join_using_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6035);
			match(ON);
			setState(6036);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6038);
			match(USING);
			setState(6039);
			match(LEFT_PAREN);
			setState(6040);
			column_name();
			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6041);
				match(COMMA);
				setState(6042);
				column_name();
				}
				}
				setState(6047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6048);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_join_type);
		int _la;
		try {
			setState(6061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6050);
				match(CROSS);
				}
				break;
			case FULL:
			case INNER:
			case LEFT:
			case NATURAL:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATURAL) {
					{
					setState(6051);
					match(NATURAL);
					}
				}

				setState(6059);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(6054);
					match(INNER);
					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(6055);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6057);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(6056);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6063);
			match(PARTITION);
			setState(6064);
			match(BY);
			setState(6078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				setState(6065);
				match(LEFT_PAREN);
				setState(6066);
				subquery(0);
				setState(6067);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(6069);
				expression_list();
				}
				break;
			case 3:
				{
				setState(6070);
				expression(0);
				setState(6075);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6071);
						match(COMMA);
						setState(6072);
						expression(0);
						}
						} 
					}
					setState(6077);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,877,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_flashback_query_clause);
		int _la;
		try {
			setState(6088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6080);
				match(VERSIONS);
				setState(6081);
				match(BETWEEN);
				setState(6082);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6083);
				expression(0);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6084);
				match(AS);
				setState(6085);
				match(OF);
				setState(6086);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6087);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6090);
			match(PIVOT);
			setState(6092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(6091);
				match(XML);
				}
			}

			setState(6094);
			match(LEFT_PAREN);
			setState(6095);
			pivot_element();
			setState(6100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6096);
				match(COMMA);
				setState(6097);
				pivot_element();
				}
				}
				setState(6102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6103);
			pivot_for_clause();
			setState(6104);
			pivot_in_clause();
			setState(6105);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			aggregate_function_name();
			setState(6108);
			match(LEFT_PAREN);
			setState(6109);
			expression(0);
			setState(6110);
			match(RIGHT_PAREN);
			setState(6112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(6111);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6114);
			match(FOR);
			setState(6127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6115);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6116);
				match(LEFT_PAREN);
				setState(6117);
				column_name();
				setState(6122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6118);
					match(COMMA);
					setState(6119);
					column_name();
					}
					}
					setState(6124);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6125);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6129);
			match(IN);
			setState(6130);
			match(LEFT_PAREN);
			setState(6148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(6131);
				subquery(0);
				}
				break;
			case 2:
				{
				setState(6132);
				match(ANY);
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6133);
					match(COMMA);
					setState(6134);
					match(ANY);
					}
					}
					setState(6139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(6140);
				pivot_in_clause_element();
				setState(6145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6141);
					match(COMMA);
					setState(6142);
					pivot_in_clause_element();
					}
					}
					setState(6147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(6150);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6152);
			pivot_in_clause_elements();
			setState(6154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(6153);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_pivot_in_clause_elements);
		try {
			setState(6158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6156);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6157);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6160);
			match(UNPIVOT);
			setState(6163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(6161);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6162);
				match(NULLS);
				}
			}

			setState(6165);
			match(LEFT_PAREN);
			setState(6178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6166);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6167);
				match(LEFT_PAREN);
				setState(6168);
				column_name();
				setState(6173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6169);
					match(COMMA);
					setState(6170);
					column_name();
					}
					}
					setState(6175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6176);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6180);
			pivot_for_clause();
			setState(6181);
			unpivot_in_clause();
			setState(6182);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6184);
			match(IN);
			setState(6185);
			match(LEFT_PAREN);
			setState(6186);
			unpivot_in_elements();
			setState(6191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6187);
				match(COMMA);
				setState(6188);
				unpivot_in_elements();
				}
				}
				setState(6193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6194);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6196);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6197);
				match(LEFT_PAREN);
				setState(6198);
				column_name();
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6199);
					match(COMMA);
					setState(6200);
					column_name();
					}
					}
					setState(6205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6206);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6210);
				match(AS);
				setState(6223);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(6211);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(6212);
					match(LEFT_PAREN);
					setState(6213);
					constant();
					setState(6218);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6214);
						match(COMMA);
						setState(6215);
						constant();
						}
						}
						setState(6220);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6221);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_hierarchical_query_clause);
		try {
			setState(6244);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6227);
				match(CONNECT);
				setState(6228);
				match(BY);
				setState(6230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6229);
					match(NOCYCLE);
					}
					break;
				}
				setState(6232);
				condition();
				setState(6234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
				case 1:
					{
					setState(6233);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(6236);
				start_part();
				setState(6237);
				match(CONNECT);
				setState(6238);
				match(BY);
				setState(6240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6239);
					match(NOCYCLE);
					}
					break;
				}
				setState(6242);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6246);
			match(START);
			setState(6247);
			match(WITH);
			setState(6248);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_group_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			match(GROUP);
			setState(6251);
			match(BY);
			setState(6252);
			group_by_elements();
			setState(6257);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6253);
					match(COMMA);
					setState(6254);
					group_by_elements();
					}
					} 
				}
				setState(6259);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_group_by_elements);
		try {
			setState(6263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6260);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6261);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6262);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6266);
			match(LEFT_PAREN);
			setState(6267);
			grouping_sets_elements();
			setState(6272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6268);
				match(COMMA);
				setState(6269);
				grouping_sets_elements();
				}
				}
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6275);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6277);
			match(GROUPING);
			setState(6278);
			match(SETS);
			setState(6279);
			match(LEFT_PAREN);
			setState(6280);
			grouping_sets_elements();
			setState(6285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6281);
				match(COMMA);
				setState(6282);
				grouping_sets_elements();
				}
				}
				setState(6287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6288);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_grouping_sets_elements);
		try {
			setState(6293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6290);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6291);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6292);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6295);
			match(HAVING);
			setState(6296);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6298);
			match(MODEL);
			setState(6302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6299);
				cell_reference_options();
				}
				}
				setState(6304);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(6305);
				return_rows_clause();
				}
			}

			setState(6311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(6308);
				reference_model();
				}
				}
				setState(6313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6314);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_cell_reference_options);
		int _la;
		try {
			setState(6324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6316);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6317);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6318);
				match(UNIQUE);
				setState(6322);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(6319);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(6320);
					match(SINGLE);
					setState(6321);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6326);
			match(RETURN);
			setState(6327);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6328);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6330);
			match(REFERENCE);
			setState(6331);
			reference_model_name();
			setState(6332);
			match(ON);
			setState(6333);
			match(LEFT_PAREN);
			setState(6334);
			subquery(0);
			setState(6335);
			match(RIGHT_PAREN);
			setState(6336);
			model_column_clauses();
			setState(6340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6337);
				cell_reference_options();
				}
				}
				setState(6342);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(6343);
				match(MAIN);
				setState(6344);
				main_model_name();
				}
			}

			setState(6347);
			model_column_clauses();
			setState(6351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6348);
				cell_reference_options();
				}
				}
				setState(6353);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6354);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6356);
				model_column_partition_part();
				}
			}

			setState(6359);
			match(DIMENSION);
			setState(6360);
			match(BY);
			setState(6361);
			model_column_list();
			setState(6362);
			match(MEASURES);
			setState(6363);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6365);
			match(PARTITION);
			setState(6366);
			match(BY);
			setState(6367);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6369);
			match(LEFT_PAREN);
			setState(6370);
			model_column();
			setState(6375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6371);
				match(COMMA);
				setState(6372);
				model_column();
				}
				}
				setState(6377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6378);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6380);
			expression(0);
			setState(6382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(6381);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(6384);
				model_rules_part();
				}
			}

			setState(6387);
			match(LEFT_PAREN);
			setState(6388);
			model_rules_element();
			setState(6393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6389);
				match(COMMA);
				setState(6390);
				model_rules_element();
				}
				}
				setState(6395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6396);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6398);
			match(RULES);
			setState(6404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(6399);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(6400);
				match(UPSERT);
				setState(6402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(6401);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(6408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(6406);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6407);
				match(ORDER);
				}
			}

			setState(6411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(6410);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				setState(6413);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(6414);
				match(UPSERT);
				setState(6416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
				case 1:
					{
					setState(6415);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(6420);
			cell_assignment();
			setState(6422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6421);
				order_by_clause();
				}
			}

			setState(6424);
			match(EQUALS_OP);
			setState(6425);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6427);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6429);
			match(ITERATE);
			setState(6430);
			match(LEFT_PAREN);
			setState(6431);
			expression(0);
			setState(6432);
			match(RIGHT_PAREN);
			setState(6434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(6433);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6436);
			match(UNTIL);
			setState(6437);
			match(LEFT_PAREN);
			setState(6438);
			condition();
			setState(6439);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6441);
			match(ORDER);
			setState(6443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(6442);
				match(SIBLINGS);
				}
			}

			setState(6445);
			match(BY);
			setState(6446);
			order_by_elements();
			setState(6451);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6447);
					match(COMMA);
					setState(6448);
					order_by_elements();
					}
					} 
				}
				setState(6453);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_elementsContext extends ParserRuleContext {
		public Token direction;
		public Token nulls;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6454);
			expression(0);
			setState(6456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				{
				setState(6455);
				((Order_by_elementsContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((Order_by_elementsContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				setState(6458);
				match(NULLS);
				setState(6459);
				((Order_by_elementsContext)_localctx).nulls = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((Order_by_elementsContext)_localctx).nulls = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_for_update_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6462);
			match(FOR);
			setState(6463);
			match(UPDATE);
			setState(6465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				{
				setState(6464);
				for_update_of_part();
				}
				break;
			}
			setState(6468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(6467);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_for_update_of_part);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(OF);
			setState(6471);
			column_name();
			setState(6476);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6472);
					match(COMMA);
					setState(6473);
					column_name();
					}
					} 
				}
				setState(6478);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,935,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_for_update_options);
		try {
			setState(6484);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6479);
				match(SKIP_);
				setState(6480);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6481);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6482);
				match(WAIT);
				setState(6483);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6486);
			match(LIMIT);
			setState(6487);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6489);
			match(UPDATE);
			setState(6490);
			general_table_ref();
			setState(6491);
			update_set_clause();
			setState(6493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6492);
				from_clause();
				}
			}

			setState(6496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6495);
				where_clause();
				}
			}

			setState(6499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(6498);
				static_returning_clause();
				}
			}

			setState(6502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6501);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6504);
			match(SET);
			setState(6520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
			case 1:
				{
				setState(6505);
				column_based_update_set_clause();
				setState(6510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6506);
					match(COMMA);
					setState(6507);
					column_based_update_set_clause();
					}
					}
					setState(6512);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6513);
				match(VALUE);
				setState(6514);
				match(LEFT_PAREN);
				setState(6515);
				r_id();
				setState(6516);
				match(RIGHT_PAREN);
				setState(6517);
				match(EQUALS_OP);
				setState(6518);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_column_based_update_set_clause);
		try {
			setState(6530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6522);
				column_name();
				setState(6523);
				match(EQUALS_OP);
				setState(6524);
				expression(0);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6526);
				paren_column_list();
				setState(6527);
				match(EQUALS_OP);
				setState(6528);
				subquery(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6532);
			match(DELETE);
			setState(6534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6533);
				match(FROM);
				}
			}

			setState(6536);
			general_table_ref();
			setState(6538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6537);
				where_clause();
				}
			}

			setState(6541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(6540);
				static_returning_clause();
				}
			}

			setState(6544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6543);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6546);
			match(INSERT);
			setState(6549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(6547);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(6548);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6551);
			insert_into_clause();
			setState(6557);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(6552);
				values_clause();
				setState(6554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(6553);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(6556);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6559);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				setState(6562);
				match(ALL);
				setState(6564); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6563);
					multi_table_element();
					}
					}
					setState(6566); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(6568);
				conditional_insert_clause();
				}
				break;
			}
			setState(6571);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6573);
			insert_into_clause();
			setState(6575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(6574);
				values_clause();
				}
			}

			setState(6578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6577);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(6580);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6584); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6583);
				conditional_insert_when_part();
				}
				}
				setState(6586); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(6589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6588);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6591);
			match(WHEN);
			setState(6592);
			condition();
			setState(6593);
			match(THEN);
			setState(6595); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6594);
				multi_table_element();
				}
				}
				setState(6597); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6599);
			match(ELSE);
			setState(6601); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6600);
				multi_table_element();
				}
				}
				setState(6603); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_insert_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6605);
			match(INTO);
			setState(6606);
			general_table_ref();
			setState(6608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				setState(6607);
				paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6610);
			match(VALUES);
			setState(6611);
			expression_list();
			setState(6616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6612);
				match(COMMA);
				setState(6613);
				expression_list();
				}
				}
				setState(6618);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6619);
			match(MERGE);
			setState(6620);
			match(INTO);
			setState(6621);
			tableview_name();
			setState(6623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(6622);
				table_alias();
				}
			}

			setState(6625);
			match(USING);
			setState(6626);
			selected_tableview();
			setState(6627);
			match(ON);
			setState(6628);
			match(LEFT_PAREN);
			setState(6629);
			condition();
			setState(6630);
			match(RIGHT_PAREN);
			setState(6639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				{
				setState(6631);
				merge_update_clause();
				setState(6633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6632);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(6635);
				merge_insert_clause();
				setState(6637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6636);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(6642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6641);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6644);
			match(WHEN);
			setState(6645);
			match(MATCHED);
			setState(6646);
			match(THEN);
			setState(6647);
			match(UPDATE);
			setState(6648);
			match(SET);
			setState(6649);
			merge_element();
			setState(6654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6650);
				match(COMMA);
				setState(6651);
				merge_element();
				}
				}
				setState(6656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6657);
				where_clause();
				}
			}

			setState(6661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				setState(6660);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6663);
			column_name();
			setState(6664);
			match(EQUALS_OP);
			setState(6665);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6667);
			match(DELETE);
			setState(6668);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6670);
			match(WHEN);
			setState(6671);
			match(NOT);
			setState(6672);
			match(MATCHED);
			setState(6673);
			match(THEN);
			setState(6674);
			match(INSERT);
			setState(6676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6675);
				paren_column_list();
				}
			}

			setState(6678);
			match(VALUES);
			setState(6679);
			expression_list();
			setState(6681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6680);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(6683);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6684);
				match(LEFT_PAREN);
				setState(6685);
				select_statement();
				setState(6686);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(6690);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6693);
			match(LOCK);
			setState(6694);
			match(TABLE);
			setState(6695);
			lock_table_element();
			setState(6700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6696);
				match(COMMA);
				setState(6697);
				lock_table_element();
				}
				}
				setState(6702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6703);
			match(IN);
			setState(6704);
			lock_mode();
			setState(6705);
			match(MODE);
			setState(6707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(6706);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_wait_nowait_part);
		try {
			setState(6712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6709);
				match(WAIT);
				setState(6710);
				expression(0);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6711);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6714);
			tableview_name();
			setState(6716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(6715);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_lock_mode);
		int _la;
		try {
			setState(6730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6718);
				match(ROW);
				setState(6719);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6720);
				match(ROW);
				setState(6721);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6722);
				match(SHARE);
				setState(6724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(6723);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6726);
				match(SHARE);
				setState(6727);
				match(ROW);
				setState(6728);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6729);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
			case 1:
				{
				setState(6732);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(6733);
				match(ONLY);
				setState(6734);
				match(LEFT_PAREN);
				setState(6735);
				dml_table_expression_clause();
				setState(6736);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(6741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				{
				setState(6740);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6743);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6744);
			expression(0);
			setState(6749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6745);
				match(COMMA);
				setState(6746);
				expression(0);
				}
				}
				setState(6751);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6752);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6754);
			match(LOG);
			setState(6755);
			match(ERRORS);
			setState(6757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				setState(6756);
				error_logging_into_part();
				}
				break;
			}
			setState(6760);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,985,_ctx) ) {
			case 1:
				{
				setState(6759);
				expression(0);
				}
				break;
			}
			setState(6763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(6762);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6765);
			match(INTO);
			setState(6766);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6768);
			match(REJECT);
			setState(6769);
			match(LIMIT);
			setState(6772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
			case 1:
				{
				setState(6770);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(6771);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(6786);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6774);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6775);
				match(LEFT_PAREN);
				setState(6776);
				select_statement();
				setState(6778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6777);
					subquery_restriction_clause();
					}
				}

				setState(6780);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(6782);
				tableview_name();
				setState(6784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
				case 1:
					{
					setState(6783);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(plsqlParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6788);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
			case 1:
				{
				setState(6789);
				match(LEFT_PAREN);
				setState(6790);
				subquery(0);
				setState(6791);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(6793);
				match(LEFT_PAREN);
				setState(6794);
				expression(0);
				setState(6795);
				match(RIGHT_PAREN);
				setState(6799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(6796);
					match(LEFT_PAREN);
					setState(6797);
					match(PLUS_SIGN);
					setState(6798);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6803);
			match(WITH);
			setState(6812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(6804);
				match(READ);
				setState(6805);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(6806);
				match(CHECK);
				setState(6807);
				match(OPTION);
				setState(6810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(6808);
					match(CONSTRAINT);
					setState(6809);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6814);
			match(SAMPLE);
			setState(6816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(6815);
				match(BLOCK);
				}
			}

			setState(6818);
			match(LEFT_PAREN);
			setState(6819);
			expression(0);
			setState(6822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6820);
				match(COMMA);
				setState(6821);
				expression(0);
				}
			}

			setState(6824);
			match(RIGHT_PAREN);
			setState(6826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(6825);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6828);
			match(SEED);
			setState(6829);
			match(LEFT_PAREN);
			setState(6830);
			expression(0);
			setState(6831);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6833);
			match(CURSOR);
			setState(6834);
			match(LEFT_PAREN);
			setState(6835);
			subquery(0);
			setState(6836);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6838);
			match(LEFT_PAREN);
			setState(6840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9202536099305047024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -7079800708925760131L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958968282141095725L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -684268148513834687L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641265L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998929L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484746769L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & -8511240345776834593L) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & 67108961L) != 0)) {
				{
				setState(6839);
				expression(0);
				}
			}

			setState(6846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6842);
				match(COMMA);
				setState(6843);
				expression(0);
				}
				}
				setState(6848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6849);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6851);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreExprContext extends ExpressionContext {
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public IgnoreExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIgnoreExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIgnoreExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIgnoreExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AndExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public AndExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAndExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAndExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAndExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LikeExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Like_typeContext op;
		public ExpressionContext expression;
		public List<ExpressionContext> right = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public LikeExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLikeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLikeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLikeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RelExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Relational_operatorContext op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public RelExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MemberExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public Binary_expressionContext right;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public MemberExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMemberExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMemberExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMemberExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BetweenExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext expression;
		public List<ExpressionContext> right = new ArrayList<ExpressionContext>();
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public BetweenExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetweenExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetweenExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBetweenExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CursorExprContext extends ExpressionContext {
		public Token op;
		public Cursor_partContext expr;
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_partContext cursor_part() {
			return getRuleContext(Cursor_partContext.class,0);
		}
		public CursorExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursorExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursorExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IsExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public Is_partContext right;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Is_partContext is_part() {
			return getRuleContext(Is_partContext.class,0);
		}
		public IsExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIsExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIsExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIsExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NotExprContext extends ExpressionContext {
		public Token op;
		public ExpressionContext expr;
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NotExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNotExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNotExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNotExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public InExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParenExprContext extends ExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public ParenExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParenExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParenExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParenExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OrExprContext extends ExpressionContext {
		public ExpressionContext left;
		public Token op;
		public ExpressionContext right;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public OrExprContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOrExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 836;
		enterRecursionRule(_localctx, 836, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				_localctx = new CursorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6854);
				((CursorExprContext)_localctx).op = match(CURSOR);
				setState(6855);
				((CursorExprContext)_localctx).expr = cursor_part();
				}
				break;
			case 2:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6856);
				((NotExprContext)_localctx).op = match(NOT);
				setState(6857);
				((NotExprContext)_localctx).expr = expression(5);
				}
				break;
			case 3:
				{
				_localctx = new IgnoreExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6858);
				binary_expression(0);
				}
				break;
			case 4:
				{
				_localctx = new ParenExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6859);
				match(LEFT_PAREN);
				setState(6860);
				expression(0);
				setState(6861);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6917);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1008,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6915);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
					case 1:
						{
						_localctx = new BetweenExprContext(new ExpressionContext(_parentctx, _parentState));
						((BetweenExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6865);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6867);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6866);
							match(NOT);
							}
						}

						setState(6869);
						((BetweenExprContext)_localctx).op = match(BETWEEN);
						setState(6870);
						((BetweenExprContext)_localctx).expression = expression(0);
						((BetweenExprContext)_localctx).right.add(((BetweenExprContext)_localctx).expression);
						setState(6871);
						match(AND);
						setState(6872);
						((BetweenExprContext)_localctx).expression = expression(11);
						((BetweenExprContext)_localctx).right.add(((BetweenExprContext)_localctx).expression);
						}
						break;
					case 2:
						{
						_localctx = new RelExprContext(new ExpressionContext(_parentctx, _parentState));
						((RelExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6874);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6875);
						((RelExprContext)_localctx).op = relational_operator();
						setState(6876);
						((RelExprContext)_localctx).right = expression(9);
						}
						break;
					case 3:
						{
						_localctx = new AndExprContext(new ExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6878);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6879);
						((AndExprContext)_localctx).op = match(AND);
						setState(6880);
						((AndExprContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new OrExprContext(new ExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6881);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6882);
						((OrExprContext)_localctx).op = match(OR);
						setState(6883);
						((OrExprContext)_localctx).right = expression(4);
						}
						break;
					case 5:
						{
						_localctx = new IsExprContext(new ExpressionContext(_parentctx, _parentState));
						((IsExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6884);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6885);
						((IsExprContext)_localctx).op = match(IS);
						setState(6886);
						((IsExprContext)_localctx).right = is_part();
						}
						break;
					case 6:
						{
						_localctx = new InExprContext(new ExpressionContext(_parentctx, _parentState));
						((InExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6887);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6889);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6888);
							match(NOT);
							}
						}

						setState(6891);
						((InExprContext)_localctx).op = match(IN);
						setState(6897);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
						case 1:
							{
							setState(6892);
							match(LEFT_PAREN);
							setState(6893);
							subquery(0);
							setState(6894);
							match(RIGHT_PAREN);
							}
							break;
						case 2:
							{
							setState(6896);
							expression_list();
							}
							break;
						}
						}
						break;
					case 7:
						{
						_localctx = new LikeExprContext(new ExpressionContext(_parentctx, _parentState));
						((LikeExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6899);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6901);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6900);
							match(NOT);
							}
						}

						setState(6903);
						((LikeExprContext)_localctx).op = like_type();
						setState(6904);
						((LikeExprContext)_localctx).expression = expression(0);
						((LikeExprContext)_localctx).right.add(((LikeExprContext)_localctx).expression);
						setState(6907);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
						case 1:
							{
							setState(6905);
							match(ESCAPE);
							setState(6906);
							((LikeExprContext)_localctx).expression = expression(0);
							((LikeExprContext)_localctx).right.add(((LikeExprContext)_localctx).expression);
							}
							break;
						}
						}
						break;
					case 8:
						{
						_localctx = new MemberExprContext(new ExpressionContext(_parentctx, _parentState));
						((MemberExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(6909);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6910);
						((MemberExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
							((MemberExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6912);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(6911);
							match(OF);
							}
						}

						setState(6914);
						((MemberExprContext)_localctx).right = binary_expression(0);
						}
						break;
					}
					} 
				}
				setState(6919);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1008,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Is_partContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Is_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIs_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIs_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIs_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_partContext is_part() throws RecognitionException {
		Is_partContext _localctx = new Is_partContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_is_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6920);
				match(NOT);
				}
			}

			setState(6948);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				{
				setState(6923);
				match(NULL);
				}
				break;
			case NAN:
				{
				setState(6924);
				match(NAN);
				}
				break;
			case PRESENT:
				{
				setState(6925);
				match(PRESENT);
				}
				break;
			case INFINITE:
				{
				setState(6926);
				match(INFINITE);
				}
				break;
			case A_LETTER:
				{
				setState(6927);
				match(A_LETTER);
				setState(6928);
				match(SET);
				}
				break;
			case EMPTY:
				{
				setState(6929);
				match(EMPTY);
				}
				break;
			case OF:
				{
				setState(6930);
				match(OF);
				setState(6932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(6931);
					match(TYPE);
					}
				}

				setState(6934);
				match(LEFT_PAREN);
				setState(6936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(6935);
					match(ONLY);
					}
					break;
				}
				setState(6938);
				type_spec();
				setState(6943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6939);
					match(COMMA);
					setState(6940);
					type_spec();
					}
					}
					setState(6945);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6946);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Cursor_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_partContext cursor_part() throws RecognitionException {
		Cursor_partContext _localctx = new Cursor_partContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_cursor_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6950);
			match(LEFT_PAREN);
			setState(6951);
			subquery(0);
			setState(6952);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6954);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public TerminalNode LESS_THAN_OP() { return getToken(plsqlParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(plsqlParser.GREATER_THAN_OP, 0); }
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_relational_operator);
		try {
			setState(6962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6956);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6957);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6958);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6959);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6960);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6961);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode ILIKE() { return getToken(plsqlParser.ILIKE, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6964);
			_la = _input.LA(1);
			if ( !(((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & 2111062325329921L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6966);
			match(ESCAPE);
			setState(6967);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6969);
			concatenation();
			setState(6970);
			match(AND);
			setState(6971);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConcatenationContext extends ParserRuleContext {
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_concatenation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6973);
			binary_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Binary_expressionContext extends ParserRuleContext {
		public Binary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_expression; }
	 
		public Binary_expressionContext() { }
		public void copyFrom(Binary_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BinaryExprContext extends Binary_expressionContext {
		public Binary_expressionContext left;
		public Token op;
		public Binary_expressionContext right;
		public List<Binary_expressionContext> binary_expression() {
			return getRuleContexts(Binary_expressionContext.class);
		}
		public Binary_expressionContext binary_expression(int i) {
			return getRuleContext(Binary_expressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(plsqlParser.SOLIDUS, 0); }
		public TerminalNode PERCENT() { return getToken(plsqlParser.PERCENT, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(plsqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public TerminalNode CONCATENATION_OP() { return getToken(plsqlParser.CONCATENATION_OP, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public BinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreBinaryExprContext extends Binary_expressionContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public IgnoreBinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIgnoreBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIgnoreBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIgnoreBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParenBinaryExprContext extends Binary_expressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Binary_expressionContext binary_expression() {
			return getRuleContext(Binary_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public ParenBinaryExprContext(Binary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParenBinaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParenBinaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParenBinaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binary_expressionContext binary_expression() throws RecognitionException {
		return binary_expression(0);
	}

	private Binary_expressionContext binary_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Binary_expressionContext _localctx = new Binary_expressionContext(_ctx, _parentState);
		Binary_expressionContext _prevctx = _localctx;
		int _startState = 854;
		enterRecursionRule(_localctx, 854, RULE_binary_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				_localctx = new ParenBinaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6976);
				match(LEFT_PAREN);
				setState(6977);
				binary_expression(0);
				setState(6978);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new IgnoreBinaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6980);
				unary_expression(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7008);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7006);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6983);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6984);
						((BinaryExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & 545L) != 0)) ) {
							((BinaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6985);
						((BinaryExprContext)_localctx).right = binary_expression(7);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6986);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6987);
						((BinaryExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((BinaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6988);
						((BinaryExprContext)_localctx).right = binary_expression(6);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6989);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6990);
						((BinaryExprContext)_localctx).op = match(CONCATENATION_OP);
						setState(6991);
						((BinaryExprContext)_localctx).right = binary_expression(5);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6992);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6993);
						((BinaryExprContext)_localctx).op = match(T__1);
						setState(6994);
						((BinaryExprContext)_localctx).right = binary_expression(4);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExprContext(new Binary_expressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_binary_expression);
						setState(6995);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7004);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case AT:
							{
							setState(6996);
							match(AT);
							setState(7001);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case LOCAL:
								{
								setState(6997);
								match(LOCAL);
								}
								break;
							case TIME:
								{
								setState(6998);
								match(TIME);
								setState(6999);
								match(ZONE);
								setState(7000);
								binary_expression(0);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case DAY:
						case YEAR:
							{
							setState(7003);
							interval_expression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(7010);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_interval_expression);
		int _la;
		try {
			setState(7035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				match(DAY);
				setState(7016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7012);
					match(LEFT_PAREN);
					setState(7013);
					concatenation();
					setState(7014);
					match(RIGHT_PAREN);
					}
				}

				setState(7018);
				match(TO);
				setState(7019);
				match(SECOND);
				setState(7024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
				case 1:
					{
					setState(7020);
					match(LEFT_PAREN);
					setState(7021);
					concatenation();
					setState(7022);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7026);
				match(YEAR);
				setState(7031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7027);
					match(LEFT_PAREN);
					setState(7028);
					concatenation();
					setState(7029);
					match(RIGHT_PAREN);
					}
				}

				setState(7033);
				match(TO);
				setState(7034);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(plsqlParser.LEFT_BRACKET, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(plsqlParser.RIGHT_BRACKET, 0); }
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7037);
			unary_expression(0);
			setState(7038);
			match(LEFT_BRACKET);
			setState(7039);
			model_expression_element();
			setState(7040);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_model_expression_element);
		int _la;
		try {
			setState(7065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7042);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(7043);
					expression(0);
					}
					break;
				}
				setState(7053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7046);
					match(COMMA);
					setState(7049);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
					case 1:
						{
						setState(7047);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(7048);
						expression(0);
						}
						break;
					}
					}
					}
					setState(7055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7056);
				single_column_for_loop();
				setState(7061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7057);
					match(COMMA);
					setState(7058);
					single_column_for_loop();
					}
					}
					setState(7063);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7064);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7067);
			match(FOR);
			setState(7068);
			column_name();
			setState(7081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(7069);
				match(IN);
				setState(7070);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(7072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(7071);
					for_like_part();
					}
				}

				setState(7074);
				match(FROM);
				setState(7075);
				((Single_column_for_loopContext)_localctx).ex1 = expression(0);
				setState(7076);
				match(TO);
				setState(7077);
				((Single_column_for_loopContext)_localctx).ex2 = expression(0);
				setState(7078);
				for_increment_decrement_type();
				setState(7079);
				((Single_column_for_loopContext)_localctx).ex3 = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7083);
			match(LIKE);
			setState(7084);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7086);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7088);
			match(FOR);
			setState(7089);
			match(LEFT_PAREN);
			setState(7090);
			column_name();
			setState(7095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7091);
				match(COMMA);
				setState(7092);
				column_name();
				}
				}
				setState(7097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7098);
			match(RIGHT_PAREN);
			setState(7099);
			match(IN);
			setState(7100);
			match(LEFT_PAREN);
			setState(7113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
			case 1:
				{
				setState(7101);
				subquery(0);
				}
				break;
			case 2:
				{
				setState(7102);
				match(LEFT_PAREN);
				setState(7103);
				expression_list();
				setState(7108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7104);
					match(COMMA);
					setState(7105);
					expression_list();
					}
					}
					setState(7110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7111);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(7115);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
	 
		public Unary_expressionContext() { }
		public void copyFrom(Unary_expressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IgnoreUnaryExprContext extends Unary_expressionContext {
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public IgnoreUnaryExprContext(Unary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIgnoreUnaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIgnoreUnaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIgnoreUnaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnaryExprContext extends Unary_expressionContext {
		public Token op;
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(plsqlParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(plsqlParser.RIGHT_BRACKET, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(plsqlParser.LEFT_BRACKET, 0); }
		public UnaryExprContext(Unary_expressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnaryExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnaryExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnaryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		return unary_expression(0);
	}

	private Unary_expressionContext unary_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, _parentState);
		Unary_expressionContext _prevctx = _localctx;
		int _startState = 870;
		enterRecursionRule(_localctx, 870, RULE_unary_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
			case 1:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7118);
				((UnaryExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((UnaryExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7119);
				unary_expression(10);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7120);
				((UnaryExprContext)_localctx).op = match(PRIOR);
				setState(7121);
				unary_expression(9);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7122);
				((UnaryExprContext)_localctx).op = match(CONNECT_BY_ROOT);
				setState(7123);
				unary_expression(8);
				}
				break;
			case 4:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7124);
				((UnaryExprContext)_localctx).op = match(NEW);
				setState(7125);
				unary_expression(7);
				}
				break;
			case 5:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7126);
				((UnaryExprContext)_localctx).op = match(DISTINCT);
				setState(7127);
				unary_expression(6);
				}
				break;
			case 6:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7128);
				((UnaryExprContext)_localctx).op = match(ALL);
				setState(7129);
				unary_expression(5);
				}
				break;
			case 7:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7130);
				case_statement();
				}
				break;
			case 8:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7131);
				quantified_expression();
				}
				break;
			case 9:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7132);
				standard_function(0);
				}
				break;
			case 10:
				{
				_localctx = new IgnoreUnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7133);
				atom();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7143);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1035,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new UnaryExprContext(new Unary_expressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_unary_expression);
					setState(7136);
					if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
					setState(7137);
					((UnaryExprContext)_localctx).op = match(LEFT_BRACKET);
					setState(7138);
					model_expression_element();
					setState(7139);
					match(RIGHT_BRACKET);
					}
					} 
				}
				setState(7145);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1035,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_case_statement);
		try {
			setState(7148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7146);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7147);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(7150);
				label_name();
				}
			}

			setState(7153);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7154);
			atom();
			setState(7156); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7155);
				simple_case_when_part();
				}
				}
				setState(7158); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7160);
				case_else_part();
				}
			}

			setState(7163);
			match(END);
			setState(7165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
			case 1:
				{
				setState(7164);
				match(CASE);
				}
				break;
			}
			setState(7168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				setState(7167);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_case_when_partContext extends ParserRuleContext {
		public ExpressionContext whenExpr;
		public ExpressionContext thenExpr;
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			match(WHEN);
			setState(7171);
			((Simple_case_when_partContext)_localctx).whenExpr = expression(0);
			setState(7172);
			match(THEN);
			setState(7175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				setState(7173);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7174);
				((Simple_case_when_partContext)_localctx).thenExpr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 72339069014620127L) != 0) || _la==REGULAR_ID) {
				{
				setState(7177);
				label_name();
				}
			}

			setState(7180);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7182); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7181);
				searched_case_when_part();
				}
				}
				setState(7184); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7186);
				case_else_part();
				}
			}

			setState(7189);
			match(END);
			setState(7191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				{
				setState(7190);
				match(CASE);
				}
				break;
			}
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
			case 1:
				{
				setState(7193);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Searched_case_when_partContext extends ParserRuleContext {
		public ExpressionContext whenExpr;
		public ExpressionContext thenExpr;
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7196);
			match(WHEN);
			setState(7197);
			((Searched_case_when_partContext)_localctx).whenExpr = expression(0);
			setState(7198);
			match(THEN);
			setState(7201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
			case 1:
				{
				setState(7199);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7200);
				((Searched_case_when_partContext)_localctx).thenExpr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7203);
			match(ELSE);
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				setState(7204);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7205);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_atom);
		try {
			setState(7226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7208);
				table_element();
				setState(7209);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7211);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7212);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7213);
				literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7214);
				general_element();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7215);
				match(LEFT_PAREN);
				setState(7216);
				atom();
				setState(7217);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(7219);
					match(LEFT_PAREN);
					setState(7220);
					subquery(0);
					setState(7221);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7223);
					expression_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7228);
			expression(0);
			setState(7230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7229);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vector_exprContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7232);
			match(COMMA);
			setState(7233);
			expression(0);
			setState(7238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7234);
				match(COMMA);
				setState(7235);
				expression(0);
				}
				}
				setState(7240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7241);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				setState(7242);
				match(LEFT_PAREN);
				setState(7243);
				subquery(0);
				setState(7244);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(7246);
				match(LEFT_PAREN);
				setState(7247);
				expression(0);
				setState(7248);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Standard_functionContext extends ParserRuleContext {
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
	 
		public Standard_functionContext() { }
		public void copyFrom(Standard_functionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AggregateCallContext extends Standard_functionContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AggregateCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregateCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregateCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAggregateCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TodoCallContext extends Standard_functionContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(plsqlParser.POSITION, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TodoCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTodoCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTodoCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTodoCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class XmlCallContext extends Standard_functionContext {
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public XmlCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CastCallContext extends Standard_functionContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public CastCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCastCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCastCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCastCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExtractCallContext extends Standard_functionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExtractCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExtractCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExtractCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WithinOrOverCallContext extends Standard_functionContext {
		public Within_or_over_clause_keywordContext name;
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public WithinOrOverCallContext(Standard_functionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithinOrOverCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithinOrOverCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWithinOrOverCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		return standard_function(0);
	}

	private Standard_functionContext standard_function(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, _parentState);
		Standard_functionContext _prevctx = _localctx;
		int _startState = 892;
		enterRecursionRule(_localctx, 892, RULE_standard_function, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
			case 1:
				{
				_localctx = new AggregateCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7253);
				aggregate_windowed_function();
				}
				break;
			case 2:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7254);
				regular_id();
				setState(7255);
				function_argument_modeling();
				setState(7257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
				case 1:
					{
					setState(7256);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new CastCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7259);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7260);
				match(LEFT_PAREN);
				setState(7268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
				case 1:
					{
					setState(7261);
					match(MULTISET);
					setState(7262);
					match(LEFT_PAREN);
					setState(7263);
					subquery(0);
					setState(7264);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7266);
					concatenation();
					}
					break;
				case 3:
					{
					setState(7267);
					expression(0);
					}
					break;
				}
				setState(7270);
				match(AS);
				setState(7271);
				type_spec();
				setState(7272);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new CastCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
				case 1:
					{
					setState(7274);
					subquery(0);
					}
					break;
				case 2:
					{
					setState(7275);
					atom();
					}
					break;
				}
				setState(7278);
				match(T__2);
				setState(7279);
				type_spec();
				}
				break;
			case 5:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7281);
				match(CHR);
				setState(7282);
				match(LEFT_PAREN);
				setState(7283);
				concatenation();
				setState(7284);
				match(USING);
				setState(7285);
				match(NCHAR_CS);
				setState(7286);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7288);
				match(COLLECT);
				setState(7289);
				match(LEFT_PAREN);
				setState(7291);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
				case 1:
					{
					setState(7290);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7293);
				concatenation();
				setState(7295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7294);
					collect_order_by_part();
					}
				}

				setState(7297);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new WithinOrOverCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7299);
				((WithinOrOverCallContext)_localctx).name = within_or_over_clause_keyword();
				setState(7300);
				function_argument();
				setState(7302); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7301);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7304); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1060,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7306);
				match(DECOMPOSE);
				setState(7307);
				match(LEFT_PAREN);
				setState(7308);
				concatenation();
				setState(7310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(7309);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7312);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExtractCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7314);
				((ExtractCallContext)_localctx).name = match(EXTRACT);
				setState(7315);
				match(LEFT_PAREN);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
				case 1:
					{
					setState(7316);
					regular_id();
					}
					break;
				case 2:
					{
					setState(7317);
					expression(0);
					}
					break;
				}
				setState(7320);
				match(FROM);
				setState(7321);
				concatenation();
				setState(7322);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7324);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7325);
				function_argument_analytic();
				setState(7327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(7326);
					respect_or_ignore_nulls();
					}
				}

				setState(7329);
				over_clause();
				}
				break;
			case 11:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7331);
				standard_prediction_function_keyword();
				setState(7332);
				match(LEFT_PAREN);
				setState(7333);
				expression(0);
				setState(7338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7334);
					match(COMMA);
					setState(7335);
					expression(0);
					}
					}
					setState(7340);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(7341);
					cost_matrix_clause();
					}
				}

				setState(7345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7344);
					using_clause();
					}
				}

				setState(7347);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7349);
				match(POSITION);
				setState(7350);
				match(LEFT_PAREN);
				setState(7351);
				expression(0);
				setState(7352);
				match(IN);
				setState(7353);
				expression(0);
				setState(7354);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7356);
				match(TRANSLATE);
				setState(7357);
				match(LEFT_PAREN);
				setState(7358);
				expression(0);
				setState(7361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7359);
					match(USING);
					setState(7360);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7363);
					match(COMMA);
					setState(7364);
					expression(0);
					}
					}
					setState(7369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7370);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7372);
				match(TREAT);
				setState(7373);
				match(LEFT_PAREN);
				setState(7374);
				expression(0);
				setState(7375);
				match(AS);
				setState(7377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					setState(7376);
					match(REF);
					}
					break;
				}
				setState(7379);
				type_spec();
				setState(7380);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				{
				_localctx = new TodoCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7382);
				match(TRIM);
				setState(7383);
				match(LEFT_PAREN);
				setState(7391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
				case 1:
					{
					setState(7385);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(7384);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7388);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(7387);
						quoted_string();
						}
					}

					setState(7390);
					match(FROM);
					}
					break;
				}
				setState(7393);
				concatenation();
				setState(7394);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7396);
				match(XMLAGG);
				setState(7397);
				match(LEFT_PAREN);
				setState(7398);
				expression(0);
				setState(7400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7399);
					order_by_clause();
					}
				}

				setState(7402);
				match(RIGHT_PAREN);
				setState(7405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
				case 1:
					{
					setState(7403);
					match(PERIOD);
					setState(7404);
					general_element();
					}
					break;
				}
				}
				break;
			case 17:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7407);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7408);
				match(LEFT_PAREN);
				setState(7409);
				xml_multiuse_expression_element();
				setState(7414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7410);
					match(COMMA);
					setState(7411);
					xml_multiuse_expression_element();
					}
					}
					setState(7416);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7417);
				match(RIGHT_PAREN);
				setState(7420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
				case 1:
					{
					setState(7418);
					match(PERIOD);
					setState(7419);
					general_element();
					}
					break;
				}
				}
				break;
			case 18:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7422);
				match(XMLELEMENT);
				setState(7423);
				match(LEFT_PAREN);
				setState(7425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
				case 1:
					{
					setState(7424);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
				case 1:
					{
					setState(7427);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7430);
				expression(0);
				setState(7433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1079,_ctx) ) {
				case 1:
					{
					setState(7431);
					match(COMMA);
					setState(7432);
					xml_attributes_clause();
					}
					break;
				}
				setState(7442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7435);
					match(COMMA);
					setState(7436);
					expression(0);
					setState(7438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
						{
						setState(7437);
						column_alias();
						}
					}

					}
					}
					setState(7444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7445);
				match(RIGHT_PAREN);
				setState(7448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
				case 1:
					{
					setState(7446);
					match(PERIOD);
					setState(7447);
					general_element();
					}
					break;
				}
				}
				break;
			case 19:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7450);
				match(XMLEXISTS);
				setState(7451);
				match(LEFT_PAREN);
				setState(7452);
				expression(0);
				setState(7454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7453);
					xml_passing_clause();
					}
				}

				setState(7456);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7458);
				match(XMLPARSE);
				setState(7459);
				match(LEFT_PAREN);
				setState(7460);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7461);
				concatenation();
				setState(7463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(7462);
					match(WELLFORMED);
					}
				}

				setState(7465);
				match(RIGHT_PAREN);
				setState(7468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1085,_ctx) ) {
				case 1:
					{
					setState(7466);
					match(PERIOD);
					setState(7467);
					general_element();
					}
					break;
				}
				}
				break;
			case 21:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7470);
				match(XMLPI);
				setState(7471);
				match(LEFT_PAREN);
				setState(7476);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(7472);
					match(NAME);
					setState(7473);
					r_id();
					}
					break;
				case EVALNAME:
					{
					setState(7474);
					match(EVALNAME);
					setState(7475);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7478);
					match(COMMA);
					setState(7479);
					concatenation();
					}
				}

				setState(7482);
				match(RIGHT_PAREN);
				setState(7485);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
				case 1:
					{
					setState(7483);
					match(PERIOD);
					setState(7484);
					general_element();
					}
					break;
				}
				}
				break;
			case 22:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7487);
				match(XMLQUERY);
				setState(7488);
				match(LEFT_PAREN);
				setState(7489);
				concatenation();
				setState(7491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7490);
					xml_passing_clause();
					}
				}

				setState(7493);
				match(RETURNING);
				setState(7494);
				match(CONTENT);
				setState(7498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(7495);
					match(NULL);
					setState(7496);
					match(ON);
					setState(7497);
					match(EMPTY);
					}
				}

				setState(7500);
				match(RIGHT_PAREN);
				setState(7503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					setState(7501);
					match(PERIOD);
					setState(7502);
					general_element();
					}
					break;
				}
				}
				break;
			case 23:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7505);
				match(XMLROOT);
				setState(7506);
				match(LEFT_PAREN);
				setState(7507);
				concatenation();
				setState(7510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(7508);
					match(COMMA);
					setState(7509);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(7514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7512);
					match(COMMA);
					setState(7513);
					xmlroot_param_standalone_part();
					}
				}

				setState(7516);
				match(RIGHT_PAREN);
				setState(7519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
				case 1:
					{
					setState(7517);
					match(PERIOD);
					setState(7518);
					general_element();
					}
					break;
				}
				}
				break;
			case 24:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7521);
				match(XMLSERIALIZE);
				setState(7522);
				match(LEFT_PAREN);
				setState(7523);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7524);
				concatenation();
				setState(7527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7525);
					match(AS);
					setState(7526);
					type_spec();
					}
				}

				setState(7530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(7529);
					xmlserialize_param_enconding_part();
					}
				}

				setState(7533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(7532);
					xmlserialize_param_version_part();
					}
				}

				setState(7536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(7535);
					xmlserialize_param_ident_part();
					}
				}

				setState(7540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(7538);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7539);
					match(DEFAULTS);
					}
				}

				setState(7542);
				match(RIGHT_PAREN);
				setState(7545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
				case 1:
					{
					setState(7543);
					match(PERIOD);
					setState(7544);
					general_element();
					}
					break;
				}
				}
				break;
			case 25:
				{
				_localctx = new XmlCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7547);
				match(XMLTABLE);
				setState(7548);
				match(LEFT_PAREN);
				setState(7550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
				case 1:
					{
					setState(7549);
					xml_namespaces_clause();
					}
					break;
				}
				setState(7552);
				concatenation();
				setState(7554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7553);
					xml_passing_clause();
					}
				}

				setState(7561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(7556);
					match(COLUMNS);
					setState(7557);
					xml_table_column();
					{
					setState(7558);
					match(COMMA);
					setState(7559);
					xml_table_column();
					}
					}
				}

				setState(7563);
				match(RIGHT_PAREN);
				setState(7566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
				case 1:
					{
					setState(7564);
					match(PERIOD);
					setState(7565);
					general_element();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CastCallContext(new Standard_functionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_standard_function);
					setState(7570);
					if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
					setState(7571);
					match(T__2);
					setState(7572);
					type_spec();
					}
					} 
				}
				setState(7577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public StarContext args;
		public Token pref;
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(7596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7578);
				over_clause_keyword();
				setState(7579);
				function_argument_analytic();
				setState(7581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
				case 1:
					{
					setState(7580);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7583);
				match(COUNT);
				setState(7584);
				match(LEFT_PAREN);
				setState(7590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(7585);
					((Aggregate_windowed_functionContext)_localctx).args = star();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITION:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case REGULAR_ID:
					{
					setState(7587);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1108,_ctx) ) {
					case 1:
						{
						setState(7586);
						((Aggregate_windowed_functionContext)_localctx).pref = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							((Aggregate_windowed_functionContext)_localctx).pref = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(7589);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7592);
				match(RIGHT_PAREN);
				setState(7594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
				case 1:
					{
					setState(7593);
					over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7598);
			_la = _input.LA(1);
			if ( !(((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & 65535L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7600);
			_la = _input.LA(1);
			if ( !(((((_la - 611)) & ~0x3f) == 0 && ((1L << (_la - 611)) & 127L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7602);
			_la = _input.LA(1);
			if ( !(((((_la - 605)) & ~0x3f) == 0 && ((1L << (_la - 605)) & 63L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7604);
			match(OVER);
			setState(7605);
			match(LEFT_PAREN);
			setState(7607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7606);
				query_partition_clause();
				}
			}

			setState(7613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7609);
				order_by_clause();
				setState(7611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(7610);
					windowing_clause();
					}
				}

				}
			}

			setState(7615);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7617);
			windowing_type();
			setState(7624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(7618);
				match(BETWEEN);
				setState(7619);
				windowing_elements();
				setState(7620);
				match(AND);
				setState(7621);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(7623);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7626);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_windowing_elements);
		int _la;
		try {
			setState(7635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7628);
				match(UNBOUNDED);
				setState(7629);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7630);
				match(CURRENT);
				setState(7631);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7632);
				concatenation();
				setState(7633);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7637);
			match(USING);
			setState(7647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
			case 1:
				{
				setState(7638);
				star();
				}
				break;
			case 2:
				{
				setState(7639);
				using_element();
				setState(7644);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1117,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7640);
						match(COMMA);
						setState(7641);
						using_element();
						}
						} 
					}
					setState(7646);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1117,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Using_elementContext extends ParserRuleContext {
		public Selected_elementContext selected_element() {
			return getRuleContext(Selected_elementContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1120,_ctx) ) {
			case 1:
				{
				setState(7649);
				match(IN);
				setState(7651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
				case 1:
					{
					setState(7650);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7653);
				match(OUT);
				}
				break;
			}
			setState(7656);
			selected_element();
			setState(7658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
			case 1:
				{
				setState(7657);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7660);
			match(ORDER);
			setState(7661);
			match(BY);
			setState(7662);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_within_or_over_part);
		try {
			setState(7671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7664);
				match(WITHIN);
				setState(7665);
				match(GROUP);
				setState(7666);
				match(LEFT_PAREN);
				setState(7667);
				order_by_clause();
				setState(7668);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7670);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7673);
			match(COST);
			setState(7691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(7674);
				match(MODEL);
				setState(7676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(7675);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(7678);
				match(LEFT_PAREN);
				setState(7679);
				cost_class_name();
				setState(7684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7680);
					match(COMMA);
					setState(7681);
					cost_class_name();
					}
					}
					setState(7686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7687);
				match(RIGHT_PAREN);
				setState(7688);
				match(VALUES);
				setState(7689);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7693);
			match(PASSING);
			setState(7696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(7694);
				match(BY);
				setState(7695);
				match(VALUE);
				}
			}

			setState(7698);
			expression(0);
			setState(7700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
				{
				setState(7699);
				column_alias();
				}
			}

			{
			setState(7702);
			match(COMMA);
			setState(7703);
			expression(0);
			setState(7705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
			case 1:
				{
				setState(7704);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7707);
			match(XMLATTRIBUTES);
			setState(7708);
			match(LEFT_PAREN);
			setState(7710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
			case 1:
				{
				setState(7709);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				setState(7712);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7715);
			xml_multiuse_expression_element();
			setState(7720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7716);
				match(COMMA);
				setState(7717);
				xml_multiuse_expression_element();
				}
				}
				setState(7722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7723);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7725);
			match(XMLNAMESPACES);
			setState(7726);
			match(LEFT_PAREN);
			setState(7730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1132,_ctx) ) {
			case 1:
				{
				setState(7727);
				concatenation();
				setState(7728);
				column_alias();
				}
				break;
			}
			setState(7738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7732);
				match(COMMA);
				setState(7733);
				concatenation();
				setState(7734);
				column_alias();
				}
				}
				setState(7740);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(7741);
				xml_general_default_part();
				}
			}

			setState(7744);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7746);
			xml_column_name();
			setState(7757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(7747);
				match(FOR);
				setState(7748);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(7749);
				type_spec();
				setState(7752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7750);
					match(PATH);
					setState(7751);
					concatenation();
					}
				}

				setState(7755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(7754);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7759);
			match(DEFAULT);
			setState(7760);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7762);
			expression(0);
			setState(7769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7763);
				match(AS);
				setState(7767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1138,_ctx) ) {
				case 1:
					{
					setState(7764);
					id_expression();
					}
					break;
				case 2:
					{
					setState(7765);
					match(EVALNAME);
					setState(7766);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7771);
			match(VERSION);
			setState(7775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				{
				setState(7772);
				match(NO);
				setState(7773);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(7774);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7777);
			match(STANDALONE);
			setState(7783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(7778);
				match(YES);
				}
				break;
			case NO:
				{
				setState(7779);
				match(NO);
				setState(7781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(7780);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7785);
			match(ENCODING);
			setState(7786);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7788);
			match(VERSION);
			setState(7789);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(7799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7791);
				match(NO);
				setState(7792);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7793);
				match(INDENT);
				setState(7797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(7794);
					match(SIZE);
					setState(7795);
					match(EQUALS_OP);
					setState(7796);
					concatenation();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(plsqlParser.SOLIDUS, 0); }
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Show_errors_commandContext show_errors_command() {
			return getRuleContext(Show_errors_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_sql_plus_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7807);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(7801);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(7802);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(7803);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(7804);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(7805);
				set_command();
				}
				break;
			case SHOW:
				{
				setState(7806);
				show_errors_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7809);
			match(WHENEVER);
			setState(7810);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7816);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(7811);
				match(EXIT);
				setState(7812);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7813);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(7814);
				match(CONTINUE);
				setState(7815);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7818);
			match(SET);
			setState(7819);
			regular_id();
			setState(7825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1147,_ctx) ) {
			case 1:
				{
				setState(7820);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(7821);
				match(ON);
				}
				break;
			case 3:
				{
				setState(7822);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(7823);
				numeric();
				}
				break;
			case 5:
				{
				setState(7824);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7827);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(plsqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7829);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_errors_commandContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(plsqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Show_errors_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_errors_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterShow_errors_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitShow_errors_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitShow_errors_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_errors_commandContext show_errors_command() throws RecognitionException {
		Show_errors_commandContext _localctx = new Show_errors_commandContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_show_errors_command);
		try {
			setState(7835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1148,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7831);
				match(SHOW);
				setState(7832);
				match(ERR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7833);
				match(SHOW);
				setState(7834);
				match(ERRORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7837);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(7838);
				match(FOR);
				}
			}

			setState(7841);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_aliasContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_column_alias);
		int _la;
		try {
			setState(7851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7843);
					match(AS);
					}
				}

				setState(7848);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(7846);
					r_id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(7847);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7850);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_aliasContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7853);
				match(AS);
				}
			}

			setState(7858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(7856);
				r_id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(7857);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7860);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7862);
			match(WHERE);
			setState(7865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(7863);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NVL:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITION:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELECT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				{
				setState(7864);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7867);
			match(CURRENT);
			setState(7868);
			match(OF);
			setState(7869);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_into_clause);
		try {
			int _alt;
			setState(7891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7871);
				match(INTO);
				setState(7872);
				variable_name();
				setState(7877);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1156,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7873);
						match(COMMA);
						setState(7874);
						variable_name();
						}
						} 
					}
					setState(7879);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1156,_ctx);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(7880);
				match(BULK);
				setState(7881);
				match(COLLECT);
				setState(7882);
				match(INTO);
				setState(7883);
				variable_name();
				setState(7888);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1157,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7884);
						match(COMMA);
						setState(7885);
						variable_name();
						}
						} 
					}
					setState(7890);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1157,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Xml_column_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_xml_column_name);
		try {
			setState(7895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7893);
				r_id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(7894);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cost_class_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7897);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Attribute_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7899);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7901);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7903);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_var_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7905);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7907);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Routine_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(plsqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7909);
			r_id();
			setState(7914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7910);
				match(PERIOD);
				setState(7911);
				id_expression();
				}
				}
				setState(7916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(7917);
				match(AT_SIGN);
				setState(7918);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Package_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7921);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Implementation_type_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7923);
			r_id();
			setState(7926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7924);
				match(PERIOD);
				setState(7925);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Parameter_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7928);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reference_model_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7930);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Main_model_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7932);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7934);
			r_id();
			setState(7939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7935);
				match(PERIOD);
				setState(7936);
				id_expression();
				}
				}
				setState(7941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7942);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(plsqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7944);
			r_id();
			setState(7949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7945);
				match(PERIOD);
				setState(7946);
				id_expression();
				}
				}
				setState(7951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(7952);
				match(AT_SIGN);
				setState(7953);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7956);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_type_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7958);
			id_expression();
			setState(7963);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7959);
					match(PERIOD);
					setState(7960);
					id_expression();
					}
					} 
				}
				setState(7965);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1166,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7966);
			id_expression();
			setState(7971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7967);
				match(PERIOD);
				setState(7968);
				id_expression();
				}
				}
				setState(7973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exception_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7974);
			r_id();
			setState(7979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(7975);
				match(PERIOD);
				setState(7976);
				id_expression();
				}
				}
				setState(7981);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			r_id();
			setState(7985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7983);
				match(PERIOD);
				setState(7984);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7987);
			r_id();
			setState(7990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7988);
				match(PERIOD);
				setState(7989);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7992);
			r_id();
			setState(7995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(7993);
				match(PERIOD);
				setState(7994);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Variable_nameContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_variable_name);
		try {
			setState(7999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7997);
				dot_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(7998);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8001);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cursor_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_cursor_name);
		try {
			setState(8005);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8003);
				r_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8004);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Record_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_record_name);
		try {
			setState(8009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8007);
				r_id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8008);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Collection_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8011);
			r_id();
			setState(8014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(8012);
				match(PERIOD);
				setState(8013);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Link_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_column_name);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8018);
			r_id();
			setState(8023);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8019);
					match(PERIOD);
					setState(8020);
					id_expression();
					}
					} 
				}
				setState(8025);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_nameContext extends ParserRuleContext {
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRole_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRole_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_role_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8026);
			r_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tableview_nameContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(plsqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8028);
			dot_id();
			setState(8032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1177,_ctx) ) {
			case 1:
				{
				setState(8029);
				match(AT_SIGN);
				setState(8030);
				link_name();
				}
				break;
			case 2:
				{
				setState(8031);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dot_idContext extends ParserRuleContext {
		public Id_expressionContext id_expression;
		public List<Id_expressionContext> fields = new ArrayList<Id_expressionContext>();
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public Dot_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dot_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDot_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDot_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDot_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dot_idContext dot_id() throws RecognitionException {
		Dot_idContext _localctx = new Dot_idContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_dot_id);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8034);
			((Dot_idContext)_localctx).id_expression = id_expression();
			((Dot_idContext)_localctx).fields.add(((Dot_idContext)_localctx).id_expression);
			setState(8039);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1178,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8035);
					match(PERIOD);
					setState(8036);
					((Dot_idContext)_localctx).id_expression = id_expression();
					((Dot_idContext)_localctx).fields.add(((Dot_idContext)_localctx).id_expression);
					}
					} 
				}
				setState(8041);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1178,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StarContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public StarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StarContext star() throws RecognitionException {
		StarContext _localctx = new StarContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_star);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8042);
			match(ASTERISK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8044);
			match(KEEP);
			setState(8045);
			match(LEFT_PAREN);
			setState(8046);
			match(DENSE_RANK);
			setState(8047);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8048);
			order_by_clause();
			setState(8049);
			match(RIGHT_PAREN);
			setState(8051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1179,_ctx) ) {
			case 1:
				{
				setState(8050);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argumentContext extends ParserRuleContext {
		public ArgumentContext argument;
		public List<ArgumentContext> argument_list = new ArrayList<ArgumentContext>();
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8053);
			match(LEFT_PAREN);
			setState(8055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9202536099305047024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -7079800708925760131L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958968282141095725L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -684268148513834687L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641265L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998929L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484746769L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & -8511240345776834593L) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & 67108961L) != 0)) {
				{
				setState(8054);
				((Function_argumentContext)_localctx).argument = argument();
				((Function_argumentContext)_localctx).argument_list.add(((Function_argumentContext)_localctx).argument);
				}
			}

			setState(8061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8057);
				match(COMMA);
				setState(8058);
				((Function_argumentContext)_localctx).argument = argument();
				((Function_argumentContext)_localctx).argument_list.add(((Function_argumentContext)_localctx).argument);
				}
				}
				setState(8063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8064);
			match(RIGHT_PAREN);
			setState(8066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
			case 1:
				{
				setState(8065);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8068);
			match(LEFT_PAREN);
			setState(8073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9202536099305047024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -7079800708925760131L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958968282141095725L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -684268148513834687L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641265L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998929L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484746769L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & -8511240345776834593L) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & 67108961L) != 0)) {
				{
				setState(8069);
				argument();
				setState(8071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(8070);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(8082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8075);
				match(COMMA);
				setState(8076);
				argument();
				setState(8078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(8077);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(8084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8085);
			match(RIGHT_PAREN);
			setState(8087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
			case 1:
				{
				setState(8086);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public StarContext star() {
			return getRuleContext(StarContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(plsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(plsqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8089);
			match(LEFT_PAREN);
			setState(8090);
			column_name();
			setState(8103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8091);
				match(COMMA);
				setState(8094);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(8092);
					numeric();
					}
					break;
				case NULL:
					{
					setState(8093);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8096);
					match(COMMA);
					setState(8099);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(8097);
						numeric();
						}
						break;
					case NULL:
						{
						setState(8098);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(8105);
			match(USING);
			setState(8125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
			case 1:
				{
				setState(8106);
				tableview_name();
				setState(8107);
				match(PERIOD);
				setState(8108);
				star();
				}
				break;
			case 2:
				{
				setState(8110);
				star();
				}
				break;
			case 3:
				{
				setState(8111);
				expression(0);
				setState(8113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
					{
					setState(8112);
					column_alias();
					}
				}

				setState(8122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8115);
					match(COMMA);
					setState(8116);
					expression(0);
					setState(8118);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723154317808L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 108649341010294751L) != 0) || _la==REGULAR_ID) {
						{
						setState(8117);
						column_alias();
						}
					}

					}
					}
					setState(8124);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(8127);
			match(RIGHT_PAREN);
			setState(8129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1196,_ctx) ) {
			case 1:
				{
				setState(8128);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8131);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8132);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public R_idContext r_id() {
			return getRuleContext(R_idContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(plsqlParser.GREATER_THAN_OP, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1197,_ctx) ) {
			case 1:
				{
				setState(8134);
				r_id();
				setState(8135);
				match(EQUALS_OP);
				setState(8136);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(8140);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_type_spec);
		int _la;
		try {
			setState(8150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8142);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
				case 1:
					{
					setState(8143);
					match(REF);
					}
					break;
				}
				setState(8146);
				type_name();
				setState(8148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
				case 1:
					{
					setState(8147);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_datatype);
		int _la;
		try {
			setState(8180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8152);
				native_datatype_element();
				setState(8154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					setState(8153);
					precision_part();
					}
					break;
				}
				setState(8162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
				case 1:
					{
					setState(8156);
					match(WITH);
					setState(8158);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(8157);
						match(LOCAL);
						}
					}

					setState(8160);
					match(TIME);
					setState(8161);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8164);
				match(INTERVAL);
				setState(8165);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(8166);
					match(LEFT_PAREN);
					setState(8167);
					expression(0);
					setState(8168);
					match(RIGHT_PAREN);
					}
				}

				setState(8172);
				match(TO);
				setState(8173);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
				case 1:
					{
					setState(8174);
					match(LEFT_PAREN);
					setState(8175);
					expression(0);
					setState(8176);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8182);
			match(LEFT_PAREN);
			setState(8183);
			numeric();
			setState(8186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8184);
				match(COMMA);
				setState(8185);
				numeric();
				}
			}

			setState(8189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(8188);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8191);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_native_datatype_element);
		try {
			setState(8253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8193);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8194);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8195);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8196);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8197);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8198);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8199);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(8200);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8201);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(8202);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(8203);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(8204);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(8205);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(8206);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(8207);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(8208);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(8209);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(8210);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(8211);
				match(DOUBLE);
				setState(8213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1209,_ctx) ) {
				case 1:
					{
					setState(8212);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(8215);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(8216);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(8217);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(8218);
				match(LONG);
				setState(8220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1210,_ctx) ) {
				case 1:
					{
					setState(8219);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(8222);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(8223);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(8224);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(8225);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(8226);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(8227);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(8228);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(8229);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(8230);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(8231);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(8232);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(8233);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(8234);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(8235);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(8236);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(8237);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(8238);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(8239);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(8240);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(8241);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(8242);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(8243);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(8244);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(8245);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(8246);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(8247);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(8248);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(8249);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(8250);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(8251);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(8252);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<TerminalNode> COLON() { return getTokens(plsqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(plsqlParser.COLON, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public List<General_elementContext> general_element() {
			return getRuleContexts(General_elementContext.class);
		}
		public General_elementContext general_element(int i) {
			return getRuleContext(General_elementContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(8255);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(8256);
				match(COLON);
				setState(8257);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1215,_ctx) ) {
			case 1:
				{
				setState(8261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(8260);
					match(INDICATOR);
					}
				}

				setState(8266);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(8263);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(8264);
					match(COLON);
					setState(8265);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(8274);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1216,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8270);
					match(PERIOD);
					setState(8271);
					general_element();
					}
					} 
				}
				setState(8276);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1216,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class General_elementContext extends ParserRuleContext {
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
	 
		public General_elementContext() { }
		public void copyFrom(General_elementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FuncCallContext extends General_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public FuncCallContext(General_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFuncCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFuncCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFuncCall(this);
			else return visitor.visitChildren(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends General_elementContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public IdentifierContext(General_elementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_general_element);
		try {
			setState(8281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
			case 1:
				_localctx = new FuncCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(8277);
				dot_id();
				setState(8278);
				function_argument();
				}
				break;
			case 2:
				_localctx = new IdentifierContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(8280);
				dot_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_elementContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_table_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8283);
			dot_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(plsqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(plsqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(plsqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(plsqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(plsqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_constant);
		int _la;
		try {
			setState(8347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8285);
				match(TIMESTAMP);
				setState(8288);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8286);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8287);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					setState(8290);
					match(AT);
					setState(8291);
					match(TIME);
					setState(8292);
					match(ZONE);
					setState(8293);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8296);
				match(INTERVAL);
				setState(8300);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8297);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8298);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BUILD:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPLETE:
				case COMPOUND:
				case CONCAT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECODE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DEMAND:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case EDITIONING:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENFORCED:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FAST:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MASTER:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEVER:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NVL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case MATERIALIZED:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PREBUILT:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PUBLIC:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REDUCED:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REFRESH:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case REWRITE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SIZE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBSTRING:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TABLES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_DATE:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERBOSE:
				case VERSION:
				case VERSIONS:
				case VIEW:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHOUT:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(8299);
					general_element();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8302);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8316);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1224,_ctx) ) {
				case 1:
					{
					setState(8303);
					match(LEFT_PAREN);
					setState(8306);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(8304);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(8305);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8313);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8308);
						match(COMMA);
						setState(8311);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(8309);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(8310);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(8315);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(8333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1228,_ctx) ) {
				case 1:
					{
					setState(8318);
					match(TO);
					setState(8331);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(8319);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(8320);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(8321);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(8322);
						match(SECOND);
						setState(8329);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1226,_ctx) ) {
						case 1:
							{
							setState(8323);
							match(LEFT_PAREN);
							setState(8326);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(8324);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(8325);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8328);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8335);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8336);
				match(DATE);
				setState(8337);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8338);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(8339);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8340);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(8341);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8342);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(8343);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(8344);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(8345);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(8346);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8349);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8351);
			match(MINUS_SIGN);
			setState(8352);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8354);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class R_idContext extends ParserRuleContext {
		public Dot_idContext dot_id() {
			return getRuleContext(Dot_idContext.class,0);
		}
		public R_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_r_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterR_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitR_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitR_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final R_idContext r_id() throws RecognitionException {
		R_idContext _localctx = new R_idContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_r_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8356);
			dot_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_id_expression);
		try {
			setState(8360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BUILD:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPLETE:
			case COMPOUND:
			case CONCAT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECODE:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DEMAND:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case EDITIONING:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENFORCED:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FAST:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MASTER:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEVER:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NVL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case MATERIALIZED:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PREBUILT:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PUBLIC:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REDUCED:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REFRESH:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case REWRITE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SIZE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBSTRING:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_DATE:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERBOSE:
			case VERSION:
			case VERSIONS:
			case VIEW:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHOUT:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8358);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8359);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(plsqlParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(plsqlParser.GREATER_THAN_OP, 0); }
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(plsqlParser.EXCLAMATION_OPERATOR_PART, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(plsqlParser.CARRET_OPERATOR_PART, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_not_equal_op);
		try {
			setState(8369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8362);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8363);
				match(LESS_THAN_OP);
				setState(8364);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(8365);
				match(EXCLAMATION_OPERATOR_PART);
				setState(8366);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(8367);
				match(CARRET_OPERATOR_PART);
				setState(8368);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(plsqlParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(plsqlParser.GREATER_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_greater_than_or_equals_op);
		try {
			setState(8374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8371);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8372);
				match(GREATER_THAN_OP);
				setState(8373);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(plsqlParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(plsqlParser.LESS_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(plsqlParser.EQUALS_OP, 0); }
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_less_than_or_equals_op);
		try {
			setState(8379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8376);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(8377);
				match(LESS_THAN_OP);
				setState(8378);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Concatenation_opContext extends ParserRuleContext {
		public TerminalNode CONCATENATION_OP() { return getToken(plsqlParser.CONCATENATION_OP, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(plsqlParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(plsqlParser.VERTICAL_BAR, i);
		}
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_concatenation_op);
		try {
			setState(8384);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8381);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8382);
				match(VERTICAL_BAR);
				setState(8383);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(plsqlParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(plsqlParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(plsqlParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8386);
			match(LEFT_PAREN);
			setState(8387);
			match(PLUS_SIGN);
			setState(8388);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode BUILD() { return getToken(plsqlParser.BUILD, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(plsqlParser.COALESCE, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode COMPLETE() { return getToken(plsqlParser.COMPLETE, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode CONCAT() { return getToken(plsqlParser.CONCAT, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DECODE() { return getToken(plsqlParser.DECODE, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode DEMAND() { return getToken(plsqlParser.DEMAND, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode EDITIONING() { return getToken(plsqlParser.EDITIONING, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode ENFORCED() { return getToken(plsqlParser.ENFORCED, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(plsqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode FAST() { return getToken(plsqlParser.FAST, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode LIST() { return getToken(plsqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode MASTER() { return getToken(plsqlParser.MASTER, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode NEVER() { return getToken(plsqlParser.NEVER, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode NVL() { return getToken(plsqlParser.NVL, 0); }
		public TerminalNode MATERIALIZED() { return getToken(plsqlParser.MATERIALIZED, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode PREBUILT() { return getToken(plsqlParser.PREBUILT, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode REDUCED() { return getToken(plsqlParser.REDUCED, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(plsqlParser.REFRESH, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode REWRITE() { return getToken(plsqlParser.REWRITE, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(plsqlParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBSTRING() { return getToken(plsqlParser.SUBSTRING, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TABLES() { return getToken(plsqlParser.TABLES, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TO_CHAR() { return getToken(plsqlParser.TO_CHAR, 0); }
		public TerminalNode TO_DATE() { return getToken(plsqlParser.TO_DATE, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(plsqlParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode VERBOSE() { return getToken(plsqlParser.VERBOSE, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(plsqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode PUBLIC() { return getToken(plsqlParser.PUBLIC, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8390);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8914305723153269232L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2143571327926918525L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 7958684608141121325L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & 6863019211664009987L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 8322647407777984765L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & -1837189653120686015L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & -6936678399999641329L) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & -571122352968998933L) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & -1200421545484754961L) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & 281474976692191L) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 330:
			return subquery_sempred((SubqueryContext)_localctx, predIndex);
		case 336:
			return table_ref_sempred((Table_refContext)_localctx, predIndex);
		case 418:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 427:
			return binary_expression_sempred((Binary_expressionContext)_localctx, predIndex);
		case 435:
			return unary_expression_sempred((Unary_expressionContext)_localctx, predIndex);
		case 446:
			return standard_function_sempred((Standard_functionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean subquery_sempred(SubqueryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean table_ref_sempred(Table_refContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 10);
		case 3:
			return precpred(_ctx, 8);
		case 4:
			return precpred(_ctx, 4);
		case 5:
			return precpred(_ctx, 3);
		case 6:
			return precpred(_ctx, 12);
		case 7:
			return precpred(_ctx, 11);
		case 8:
			return precpred(_ctx, 9);
		case 9:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean binary_expression_sempred(Binary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 6);
		case 11:
			return precpred(_ctx, 5);
		case 12:
			return precpred(_ctx, 4);
		case 13:
			return precpred(_ctx, 3);
		case 14:
			return precpred(_ctx, 7);
		}
		return true;
	}
	private boolean unary_expression_sempred(Unary_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 11);
		}
		return true;
	}
	private boolean standard_function_sempred(Standard_functionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 22);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u02a5\u20c9\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0001\u0000\u0004\u0000\u0440\b\u0000\u000b\u0000\f\u0000\u0441"+
		"\u0001\u0001\u0005\u0001\u0445\b\u0001\n\u0001\f\u0001\u0448\t\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0003\u0002\u044e\b\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u0453\b\u0002\u0005\u0002\u0455"+
		"\b\u0002\n\u0002\f\u0002\u0458\t\u0002\u0001\u0002\u0003\u0002\u045b\b"+
		"\u0002\u0003\u0002\u045d\b\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001"+
		"\u0003\u0003\u0003\u0463\b\u0003\u0001\u0003\u0003\u0003\u0466\b\u0003"+
		"\u0001\u0004\u0003\u0004\u0469\b\u0004\u0001\u0004\u0001\u0004\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0489\b\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u048f\b\u0006\u0001\u0006"+
		"\u0004\u0006\u0492\b\u0006\u000b\u0006\f\u0006\u0493\u0003\u0006\u0496"+
		"\b\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u04a5\b\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u04ad\b\t\u0001\t\u0003"+
		"\t\u04b0\b\t\u0001\t\u0003\t\u04b3\b\t\u0001\t\u0003\t\u04b6\b\t\u0001"+
		"\t\u0003\t\u04b9\b\t\u0003\t\u04bb\b\t\u0001\t\u0001\t\u0001\t\u0001\t"+
		"\u0001\t\u0004\t\u04c2\b\t\u000b\t\f\t\u04c3\u0005\t\u04c6\b\t\n\t\f\t"+
		"\u04c9\t\t\u0001\t\u0001\t\u0001\t\u0003\t\u04ce\b\t\u0001\t\u0003\t\u04d1"+
		"\b\t\u0001\t\u0001\t\u0003\t\u04d5\b\t\u0001\t\u0001\t\u0001\t\u0003\t"+
		"\u04da\b\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u04e8\b\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0003\n\u04ee\b\n\u0001\n\u0001\n\u0001\n\u0003\n\u04f3\b\n"+
		"\u0001\n\u0001\n\u0001\n\u0003\n\u04f8\b\n\u0001\n\u0001\n\u0001\n\u0003"+
		"\n\u04fd\b\n\u0001\n\u0001\n\u0001\n\u0004\n\u0502\b\n\u000b\n\f\n\u0503"+
		"\u0003\n\u0506\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f"+
		"\u0001\f\u0001\f\u0003\f\u050f\b\f\u0001\f\u0001\f\u0001\f\u0003\f\u0514"+
		"\b\f\u0001\f\u0001\f\u0003\f\u0518\b\f\u0001\f\u0001\f\u0001\f\u0001\f"+
		"\u0003\f\u051e\b\f\u0001\f\u0001\f\u0001\f\u0003\f\u0523\b\f\u0001\f\u0001"+
		"\f\u0003\f\u0527\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\f\u052d\b\f"+
		"\n\f\f\f\u0530\t\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\f\u0536\b\f\n"+
		"\f\f\f\u0539\t\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\f\u053f\b\f\n\f"+
		"\f\f\u0542\t\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005\f\u0548\b\f\n\f\f"+
		"\f\u054b\t\f\u0003\f\u054d\b\f\u0001\r\u0003\r\u0550\b\r\u0001\r\u0004"+
		"\r\u0553\b\r\u000b\r\f\r\u0554\u0001\u000e\u0001\u000e\u0001\u000e\u0003"+
		"\u000e\u055a\b\u000e\u0001\u000e\u0003\u000e\u055d\b\u000e\u0001\u000e"+
		"\u0003\u000e\u0560\b\u000e\u0001\u000e\u0003\u000e\u0563\b\u000e\u0001"+
		"\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0568\b\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0003\u000e\u056d\b\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u0010\u0001\u0010\u0003\u0010\u0573\b\u0010\u0001\u0010\u0001\u0010\u0005"+
		"\u0010\u0577\b\u0010\n\u0010\f\u0010\u057a\t\u0010\u0001\u0010\u0003\u0010"+
		"\u057d\b\u0010\u0004\u0010\u057f\b\u0010\u000b\u0010\f\u0010\u0580\u0001"+
		"\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0003\u0011\u0587\b\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003"+
		"\u0011\u058f\b\u0011\u0001\u0011\u0003\u0011\u0592\b\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u0597\b\u0012\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u059c\b\u0013\u0001\u0013\u0001\u0013\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u05a5\b\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0004\u0014"+
		"\u05ac\b\u0014\u000b\u0014\f\u0014\u05ad\u0001\u0015\u0001\u0015\u0001"+
		"\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u05b5\b\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0003"+
		"\u0019\u05be\b\u0019\u0003\u0019\u05c0\b\u0019\u0001\u001a\u0001\u001a"+
		"\u0003\u001a\u05c4\b\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u05c8\b"+
		"\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u05cc\b\u001a\u0004\u001a\u05ce"+
		"\b\u001a\u000b\u001a\f\u001a\u05cf\u0001\u001a\u0001\u001a\u0003\u001a"+
		"\u05d4\b\u001a\u0001\u001b\u0001\u001b\u0003\u001b\u05d8\b\u001b\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0004\u001c\u05dd\b\u001c\u000b\u001c\f"+
		"\u001c\u05de\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u05e5\b\u001c\u0003\u001c\u05e7\b\u001c\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u05f6"+
		"\b\u001d\u0003\u001d\u05f8\b\u001d\u0001\u001e\u0001\u001e\u0003\u001e"+
		"\u05fc\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u0603\b\u001e\u0001\u001e\u0004\u001e\u0606\b\u001e\u000b"+
		"\u001e\f\u001e\u0607\u0001\u001e\u0001\u001e\u0003\u001e\u060c\b\u001e"+
		"\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0003 \u0614\b \u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u061d\b!\u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0626\b!\u0001!\u0001!\u0003"+
		"!\u062a\b!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0633"+
		"\b!\u0001!\u0001!\u0003!\u0637\b!\u0001!\u0001!\u0003!\u063b\b!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0003!\u0655\b!\u0001!\u0003!\u0658\b!\u0001!\u0003"+
		"!\u065b\b!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003"+
		"!\u0665\b!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u066d\b!\u0001"+
		"!\u0001!\u0004!\u0671\b!\u000b!\f!\u0672\u0001!\u0001!\u0003!\u0677\b"+
		"!\u0001!\u0001!\u0003!\u067b\b!\u0001\"\u0001\"\u0001\"\u0005\"\u0680"+
		"\b\"\n\"\f\"\u0683\t\"\u0001#\u0001#\u0003#\u0687\b#\u0001#\u0001#\u0003"+
		"#\u068b\b#\u0001#\u0003#\u068e\b#\u0004#\u0690\b#\u000b#\f#\u0691\u0001"+
		"#\u0001#\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u069b\b$\u0001$\u0001"+
		"$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u06a5\b$\u0001$\u0001"+
		"$\u0001$\u0004$\u06aa\b$\u000b$\f$\u06ab\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0003%\u06b4\b%\u0003%\u06b6\b%\u0003%\u06b8\b%\u0001%\u0003"+
		"%\u06bb\b%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u06c4"+
		"\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u06cc\b&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u06d3\b&\u0001\'\u0001\'\u0001(\u0001(\u0001"+
		")\u0001)\u0001)\u0003)\u06dc\b)\u0001)\u0001)\u0001)\u0003)\u06e1\b)\u0001"+
		")\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003*\u06eb\b*\u0001"+
		"*\u0004*\u06ee\b*\u000b*\f*\u06ef\u0001*\u0001*\u0003*\u06f4\b*\u0001"+
		"*\u0001*\u0003*\u06f8\b*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003*\u06ff"+
		"\b*\u0001*\u0004*\u0702\b*\u000b*\f*\u0703\u0001*\u0001*\u0003*\u0708"+
		"\b*\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u0711\b,\u0001"+
		"-\u0001-\u0003-\u0715\b-\u0001-\u0001-\u0003-\u0719\b-\u0001-\u0001-\u0004"+
		"-\u071d\b-\u000b-\f-\u071e\u0003-\u0721\b-\u0001-\u0003-\u0724\b-\u0004"+
		"-\u0726\b-\u000b-\f-\u0727\u0001-\u0001-\u0001.\u0001.\u0003.\u072e\b"+
		".\u0001.\u0001.\u0003.\u0732\b.\u0001.\u0001.\u0004.\u0736\b.\u000b.\f"+
		".\u0737\u0003.\u073a\b.\u0001.\u0003.\u073d\b.\u0004.\u073f\b.\u000b."+
		"\f.\u0740\u0001.\u0001.\u0001/\u0001/\u0001/\u0001/\u0003/\u0749\b/\u0001"+
		"/\u0004/\u074c\b/\u000b/\f/\u074d\u0001/\u0001/\u0001/\u0001/\u0003/\u0754"+
		"\b/\u0001/\u0001/\u0003/\u0758\b/\u0001/\u0001/\u0003/\u075c\b/\u0001"+
		"/\u0003/\u075f\b/\u0001/\u0003/\u0762\b/\u0004/\u0764\b/\u000b/\f/\u0765"+
		"\u0001/\u0003/\u0769\b/\u00010\u00010\u00010\u00010\u00030\u076f\b0\u0001"+
		"0\u00040\u0772\b0\u000b0\f0\u0773\u00010\u00010\u00030\u0778\b0\u0001"+
		"0\u00010\u00030\u077c\b0\u00010\u00010\u00030\u0780\b0\u00010\u00010\u0004"+
		"0\u0784\b0\u000b0\f0\u0785\u00030\u0788\b0\u00010\u00010\u00030\u078c"+
		"\b0\u00040\u078e\b0\u000b0\f0\u078f\u00010\u00010\u00011\u00011\u0001"+
		"1\u00011\u00031\u0798\b1\u00011\u00041\u079b\b1\u000b1\f1\u079c\u0001"+
		"1\u00011\u00011\u00011\u00031\u07a3\b1\u00011\u00011\u00031\u07a7\b1\u0001"+
		"1\u00011\u00031\u07ab\b1\u00011\u00031\u07ae\b1\u00011\u00031\u07b1\b"+
		"1\u00041\u07b3\b1\u000b1\f1\u07b4\u00011\u00031\u07b8\b1\u00012\u0001"+
		"2\u00013\u00013\u00033\u07be\b3\u00013\u00033\u07c1\b3\u00013\u00013\u0001"+
		"3\u00013\u00013\u00033\u07c8\b3\u00014\u00014\u00014\u00034\u07cd\b4\u0001"+
		"4\u00014\u00015\u00015\u00016\u00016\u00016\u00036\u07d6\b6\u00016\u0001"+
		"6\u00016\u00016\u00016\u00016\u00016\u00036\u07df\b6\u00046\u07e1\b6\u000b"+
		"6\f6\u07e2\u00016\u00016\u00036\u07e7\b6\u00017\u00017\u00037\u07eb\b"+
		"7\u00017\u00017\u00037\u07ef\b7\u00017\u00037\u07f2\b7\u00018\u00018\u0001"+
		"8\u00038\u07f7\b8\u00018\u00018\u00048\u07fb\b8\u000b8\f8\u07fc\u0001"+
		"8\u00018\u00038\u0801\b8\u00019\u00019\u00019\u00039\u0806\b9\u00019\u0001"+
		"9\u00039\u080a\b9\u00019\u00019\u00039\u080e\b9\u00049\u0810\b9\u000b"+
		"9\f9\u0811\u00019\u00019\u00019\u00039\u0817\b9\u00019\u00019\u00019\u0004"+
		"9\u081c\b9\u000b9\f9\u081d\u00019\u00019\u00039\u0822\b9\u00019\u0003"+
		"9\u0825\b9\u0001:\u0001:\u0003:\u0829\b:\u0001:\u0003:\u082c\b:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0003:\u0833\b:\u0001:\u0001:\u0003:\u0837"+
		"\b:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0005:\u0843\b:\n:\f:\u0846\t:\u0001:\u0001:\u0001:\u0003:\u084b\b:"+
		"\u0003:\u084d\b:\u0001;\u0001;\u0001;\u0001;\u0003;\u0853\b;\u0001;\u0001"+
		";\u0001;\u0001;\u0003;\u0859\b;\u0001;\u0003;\u085c\b;\u0001;\u0003;\u085f"+
		"\b;\u0001;\u0003;\u0862\b;\u0001;\u0003;\u0865\b;\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0003;\u086c\b;\u0001;\u0003;\u086f\b;\u0001;\u0003;\u0872"+
		"\b;\u0001;\u0004;\u0875\b;\u000b;\f;\u0876\u0003;\u0879\b;\u0001;\u0003"+
		";\u087c\b;\u0001;\u0003;\u087f\b;\u0001<\u0003<\u0882\b<\u0001<\u0001"+
		"<\u0001<\u0001<\u0001<\u0003<\u0889\b<\u0004<\u088b\b<\u000b<\f<\u088c"+
		"\u0001=\u0001=\u0001=\u0003=\u0892\b=\u0001=\u0003=\u0895\b=\u0001=\u0001"+
		"=\u0003=\u0899\b=\u0001=\u0001=\u0001=\u0003=\u089e\b=\u0001=\u0001=\u0001"+
		"=\u0003=\u08a3\b=\u0001=\u0003=\u08a6\b=\u0001=\u0003=\u08a9\b=\u0001"+
		"=\u0003=\u08ac\b=\u0003=\u08ae\b=\u0001=\u0005=\u08b1\b=\n=\f=\u08b4\t"+
		"=\u0001=\u0003=\u08b7\b=\u0001=\u0001=\u0003=\u08bb\b=\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0003>\u08c4\b>\u0001>\u0001>\u0003>\u08c8"+
		"\b>\u0003>\u08ca\b>\u0001?\u0001?\u0003?\u08ce\b?\u0001?\u0001?\u0003"+
		"?\u08d2\b?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u08d9\b?\u0001?\u0005"+
		"?\u08dc\b?\n?\f?\u08df\t?\u0001@\u0001@\u0003@\u08e3\b@\u0001@\u0001@"+
		"\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0003"+
		"@\u08f0\b@\u0001@\u0003@\u08f3\b@\u0001A\u0001A\u0001A\u0001A\u0001A\u0003"+
		"A\u08fa\bA\u0001B\u0001B\u0001B\u0001B\u0001B\u0003B\u0901\bB\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0003C\u0914\bC\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u091a\bC\u0001C\u0004C\u091d\bC\u000bC\fC\u091e\u0001"+
		"C\u0001C\u0001C\u0003C\u0924\bC\u0003C\u0926\bC\u0001D\u0001D\u0001D\u0001"+
		"D\u0003D\u092c\bD\u0001E\u0001E\u0001E\u0001E\u0003E\u0932\bE\u0001E\u0001"+
		"E\u0001E\u0003E\u0937\bE\u0004E\u0939\bE\u000bE\fE\u093a\u0001E\u0001"+
		"E\u0003E\u093f\bE\u0001F\u0001F\u0001G\u0001G\u0001G\u0003G\u0946\bG\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u094e\bG\u0004G\u0950\bG\u000b"+
		"G\fG\u0951\u0001G\u0001G\u0001G\u0001H\u0003H\u0958\bH\u0001H\u0001H\u0003"+
		"H\u095c\bH\u0001I\u0001I\u0001I\u0001I\u0001J\u0001J\u0001J\u0001J\u0004"+
		"J\u0966\bJ\u000bJ\fJ\u0967\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0004K\u0971\bK\u000bK\fK\u0972\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0003L\u0989\bL\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0004L\u0990\bL\u000bL\fL\u0991\u0001L\u0001L\u0001M\u0001M\u0003"+
		"M\u0998\bM\u0001N\u0001N\u0001O\u0001O\u0001O\u0001O\u0003O\u09a0\bO\u0001"+
		"O\u0003O\u09a3\bO\u0001P\u0001P\u0001P\u0001P\u0001Q\u0003Q\u09aa\bQ\u0001"+
		"Q\u0001Q\u0001Q\u0003Q\u09af\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003"+
		"Q\u09b6\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u09bc\bQ\u0001R\u0001R\u0001"+
		"R\u0001R\u0003R\u09c2\bR\u0001R\u0003R\u09c5\bR\u0001R\u0003R\u09c8\b"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0004R\u09d4\bR\u000bR\fR\u09d5\u0001R\u0001R\u0003R\u09da\bR\u0001"+
		"R\u0001R\u0003R\u09de\bR\u0001R\u0003R\u09e1\bR\u0001S\u0001S\u0001T\u0001"+
		"T\u0003T\u09e7\bT\u0001T\u0001T\u0003T\u09eb\bT\u0001T\u0003T\u09ee\b"+
		"T\u0001T\u0004T\u09f1\bT\u000bT\fT\u09f2\u0001T\u0003T\u09f6\bT\u0001"+
		"T\u0001T\u0001T\u0003T\u09fb\bT\u0001U\u0001U\u0003U\u09ff\bU\u0001U\u0003"+
		"U\u0a02\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0a0a\bU\u0001"+
		"U\u0003U\u0a0d\bU\u0001V\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001"+
		"W\u0001X\u0003X\u0a18\bX\u0001X\u0004X\u0a1b\bX\u000bX\fX\u0a1c\u0001"+
		"Y\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u0a24\bY\u0001Z\u0003Z\u0a27\bZ\u0001"+
		"Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0004Z\u0a30\bZ\u000bZ\fZ"+
		"\u0a31\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003["+
		"\u0a3c\b[\u0001\\\u0001\\\u0001\\\u0003\\\u0a41\b\\\u0001\\\u0001\\\u0003"+
		"\\\u0a45\b\\\u0001]\u0001]\u0001]\u0003]\u0a4a\b]\u0001]\u0001]\u0003"+
		"]\u0a4e\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u0a55\b]\u0001^\u0001"+
		"^\u0001^\u0001^\u0003^\u0a5b\b^\u0001^\u0003^\u0a5e\b^\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001_\u0003_\u0a74\b_\u0001"+
		"_\u0003_\u0a77\b_\u0004_\u0a79\b_\u000b_\f_\u0a7a\u0001`\u0001`\u0001"+
		"`\u0001`\u0001`\u0001`\u0003`\u0a83\b`\u0001a\u0001a\u0001b\u0001b\u0001"+
		"b\u0003b\u0a8a\bb\u0003b\u0a8c\bb\u0001c\u0001c\u0003c\u0a90\bc\u0001"+
		"c\u0001c\u0001c\u0003c\u0a95\bc\u0001c\u0003c\u0a98\bc\u0001c\u0003c\u0a9b"+
		"\bc\u0001c\u0003c\u0a9e\bc\u0001d\u0001d\u0001d\u0003d\u0aa3\bd\u0001"+
		"d\u0004d\u0aa6\bd\u000bd\fd\u0aa7\u0001d\u0001d\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0004d\u0ab2\bd\u000bd\fd\u0ab3\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0004d\u0ac1\bd\u000b"+
		"d\fd\u0ac2\u0003d\u0ac5\bd\u0001e\u0001e\u0003e\u0ac9\be\u0001e\u0001"+
		"e\u0003e\u0acd\be\u0001e\u0003e\u0ad0\be\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0003f\u0ad7\bf\u0001f\u0001f\u0001f\u0003f\u0adc\bf\u0001f\u0001f\u0001"+
		"f\u0001f\u0001f\u0003f\u0ae3\bf\u0001f\u0001f\u0001f\u0001f\u0003f\u0ae9"+
		"\bf\u0003f\u0aeb\bf\u0001f\u0001f\u0001f\u0001f\u0003f\u0af1\bf\u0001"+
		"g\u0001g\u0003g\u0af5\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0afc"+
		"\bg\u0001g\u0001g\u0001g\u0003g\u0b01\bg\u0001h\u0001h\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0b0d\bi\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0003"+
		"j\u0b1b\bj\u0001j\u0004j\u0b1e\bj\u000bj\fj\u0b1f\u0001j\u0001j\u0003"+
		"j\u0b24\bj\u0003j\u0b26\bj\u0001j\u0001j\u0003j\u0b2a\bj\u0001j\u0001"+
		"j\u0003j\u0b2e\bj\u0001j\u0001j\u0001j\u0004j\u0b33\bj\u000bj\fj\u0b34"+
		"\u0001j\u0001j\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0b3e\bk\u0001"+
		"k\u0004k\u0b41\bk\u000bk\fk\u0b42\u0001k\u0001k\u0001l\u0003l\u0b48\b"+
		"l\u0001l\u0003l\u0b4b\bl\u0001l\u0001l\u0003l\u0b4f\bl\u0001l\u0001l\u0003"+
		"l\u0b53\bl\u0003l\u0b55\bl\u0001l\u0001l\u0001l\u0003l\u0b5a\bl\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b64\bm\u0001"+
		"m\u0001m\u0003m\u0b68\bm\u0001m\u0001m\u0001m\u0004m\u0b6d\bm\u000bm\f"+
		"m\u0b6e\u0001m\u0001m\u0003m\u0b73\bm\u0001n\u0001n\u0001n\u0003n\u0b78"+
		"\bn\u0001n\u0004n\u0b7b\bn\u000bn\fn\u0b7c\u0001n\u0003n\u0b80\bn\u0001"+
		"n\u0001n\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u0b8a\bo\u0001"+
		"p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001"+
		"p\u0001p\u0003p\u0b98\bp\u0001p\u0004p\u0b9b\bp\u000bp\fp\u0b9c\u0001"+
		"p\u0001p\u0003p\u0ba1\bp\u0003p\u0ba3\bp\u0001p\u0001p\u0001p\u0003p\u0ba8"+
		"\bp\u0001p\u0001p\u0003p\u0bac\bp\u0001p\u0004p\u0baf\bp\u000bp\fp\u0bb0"+
		"\u0001p\u0001p\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q\u0bba\bq\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u0bc3\br\u0001s\u0001"+
		"s\u0001s\u0001s\u0003s\u0bc9\bs\u0001s\u0004s\u0bcc\bs\u000bs\fs\u0bcd"+
		"\u0001s\u0003s\u0bd1\bs\u0001s\u0004s\u0bd4\bs\u000bs\fs\u0bd5\u0001s"+
		"\u0003s\u0bd9\bs\u0001s\u0004s\u0bdc\bs\u000bs\fs\u0bdd\u0003s\u0be0\b"+
		"s\u0001s\u0001s\u0001s\u0003s\u0be5\bs\u0001t\u0001t\u0003t\u0be9\bt\u0001"+
		"t\u0001t\u0003t\u0bed\bt\u0001u\u0001u\u0003u\u0bf1\bu\u0001u\u0001u\u0003"+
		"u\u0bf5\bu\u0001v\u0001v\u0003v\u0bf9\bv\u0001v\u0003v\u0bfc\bv\u0001"+
		"w\u0001w\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001"+
		"x\u0001x\u0003x\u0c0a\bx\u0001x\u0004x\u0c0d\bx\u000bx\fx\u0c0e\u0001"+
		"x\u0001x\u0003x\u0c13\bx\u0001x\u0003x\u0c16\bx\u0001y\u0001y\u0003y\u0c1a"+
		"\by\u0001y\u0001y\u0001y\u0001y\u0003y\u0c20\by\u0001y\u0004y\u0c23\b"+
		"y\u000by\fy\u0c24\u0001y\u0003y\u0c28\by\u0001y\u0004y\u0c2b\by\u000b"+
		"y\fy\u0c2c\u0001y\u0003y\u0c30\by\u0001y\u0004y\u0c33\by\u000by\fy\u0c34"+
		"\u0003y\u0c37\by\u0001y\u0001y\u0001y\u0003y\u0c3c\by\u0003y\u0c3e\by"+
		"\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0003z\u0c46\bz\u0001z\u0004"+
		"z\u0c49\bz\u000bz\fz\u0c4a\u0001z\u0001z\u0003z\u0c4f\bz\u0001{\u0001"+
		"{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0003{\u0c5a\b{\u0001"+
		"{\u0001{\u0003{\u0c5e\b{\u0001{\u0004{\u0c61\b{\u000b{\f{\u0c62\u0001"+
		"{\u0001{\u0001|\u0001|\u0003|\u0c69\b|\u0001|\u0001|\u0001|\u0001|\u0003"+
		"|\u0c6f\b|\u0001|\u0004|\u0c72\b|\u000b|\f|\u0c73\u0001|\u0003|\u0c77"+
		"\b|\u0001|\u0004|\u0c7a\b|\u000b|\f|\u0c7b\u0001|\u0003|\u0c7f\b|\u0001"+
		"|\u0004|\u0c82\b|\u000b|\f|\u0c83\u0003|\u0c86\b|\u0001|\u0001|\u0001"+
		"|\u0003|\u0c8b\b|\u0003|\u0c8d\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0004}\u0c95\b}\u000b}\f}\u0c96\u0001}\u0001}\u0001}\u0001}\u0003}\u0c9d"+
		"\b}\u0001}\u0001}\u0003}\u0ca1\b}\u0001~\u0001~\u0001~\u0001~\u0001~\u0001"+
		"~\u0001~\u0001~\u0003~\u0cab\b~\u0001~\u0004~\u0cae\b~\u000b~\f~\u0caf"+
		"\u0001~\u0001~\u0003~\u0cb4\b~\u0001\u007f\u0001\u007f\u0003\u007f\u0cb8"+
		"\b\u007f\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0cc2\b\u0080\u0001\u0080\u0004"+
		"\u0080\u0cc5\b\u0080\u000b\u0080\f\u0080\u0cc6\u0003\u0080\u0cc9\b\u0080"+
		"\u0001\u0081\u0001\u0081\u0003\u0081\u0ccd\b\u0081\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u0cd5\b\u0081"+
		"\u0001\u0081\u0003\u0081\u0cd8\b\u0081\u0001\u0081\u0003\u0081\u0cdb\b"+
		"\u0081\u0001\u0081\u0003\u0081\u0cde\b\u0081\u0001\u0081\u0001\u0081\u0003"+
		"\u0081\u0ce2\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0083\u0003\u0083\u0ce9\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003"+
		"\u0084\u0cf4\b\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0cf9"+
		"\b\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0cfd\b\u0085\u0001\u0085"+
		"\u0004\u0085\u0d00\b\u0085\u000b\u0085\f\u0085\u0d01\u0001\u0085\u0001"+
		"\u0085\u0003\u0085\u0d06\b\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0003\u0085\u0d0c\b\u0085\u0001\u0085\u0003\u0085\u0d0f\b\u0085"+
		"\u0001\u0085\u0003\u0085\u0d12\b\u0085\u0001\u0085\u0003\u0085\u0d15\b"+
		"\u0085\u0001\u0085\u0003\u0085\u0d18\b\u0085\u0001\u0085\u0003\u0085\u0d1b"+
		"\b\u0085\u0001\u0085\u0003\u0085\u0d1e\b\u0085\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0d25\b\u0085\u0001\u0085"+
		"\u0003\u0085\u0d28\b\u0085\u0001\u0085\u0003\u0085\u0d2b\b\u0085\u0001"+
		"\u0085\u0004\u0085\u0d2e\b\u0085\u000b\u0085\f\u0085\u0d2f\u0003\u0085"+
		"\u0d32\b\u0085\u0001\u0085\u0003\u0085\u0d35\b\u0085\u0001\u0085\u0003"+
		"\u0085\u0d38\b\u0085\u0001\u0086\u0003\u0086\u0d3b\b\u0086\u0001\u0086"+
		"\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087"+
		"\u0d49\b\u0087\u0001\u0088\u0001\u0088\u0003\u0088\u0d4d\b\u0088\u0001"+
		"\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0004\u0088\u0d53\b\u0088\u000b"+
		"\u0088\f\u0088\u0d54\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d5f\b\u0089\u0001"+
		"\u0089\u0001\u0089\u0003\u0089\u0d63\b\u0089\u0001\u0089\u0003\u0089\u0d66"+
		"\b\u0089\u0001\u0089\u0003\u0089\u0d69\b\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0003\u0089\u0d6f\b\u0089\u0001\u0089\u0003\u0089"+
		"\u0d72\b\u0089\u0001\u0089\u0003\u0089\u0d75\b\u0089\u0001\u0089\u0003"+
		"\u0089\u0d78\b\u0089\u0001\u0089\u0003\u0089\u0d7b\b\u0089\u0001\u0089"+
		"\u0003\u0089\u0d7e\b\u0089\u0001\u0089\u0003\u0089\u0d81\b\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d88"+
		"\b\u0089\u0001\u0089\u0003\u0089\u0d8b\b\u0089\u0001\u0089\u0003\u0089"+
		"\u0d8e\b\u0089\u0001\u0089\u0004\u0089\u0d91\b\u0089\u000b\u0089\f\u0089"+
		"\u0d92\u0003\u0089\u0d95\b\u0089\u0001\u0089\u0003\u0089\u0d98\b\u0089"+
		"\u0001\u0089\u0003\u0089\u0d9b\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a"+
		"\u0001\u008a\u0003\u008a\u0da1\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a"+
		"\u0001\u008a\u0001\u008a\u0001\u008a\u0004\u008a\u0da9\b\u008a\u000b\u008a"+
		"\f\u008a\u0daa\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0003\u008b\u0db3\b\u008b\u0001\u008b\u0001\u008b\u0003\u008b"+
		"\u0db7\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0003\u008c\u0dc0\b\u008c\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0dcd\b\u008d\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0004\u008e\u0de0\b\u008e"+
		"\u000b\u008e\f\u008e\u0de1\u0001\u008e\u0003\u008e\u0de5\b\u008e\u0001"+
		"\u008f\u0001\u008f\u0003\u008f\u0de9\b\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0003\u008f\u0def\b\u008f\u0005\u008f\u0df1\b\u008f"+
		"\n\u008f\f\u008f\u0df4\t\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0df8"+
		"\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003"+
		"\u008f\u0dff\b\u008f\u0005\u008f\u0e01\b\u008f\n\u008f\f\u008f\u0e04\t"+
		"\u008f\u0003\u008f\u0e06\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0004"+
		"\u0090\u0e11\b\u0090\u000b\u0090\f\u0090\u0e12\u0001\u0090\u0003\u0090"+
		"\u0e16\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091"+
		"\u0e1c\b\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u0e20\b\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0003"+
		"\u0093\u0e28\b\u0093\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001"+
		"\u0094\u0001\u0094\u0003\u0094\u0e30\b\u0094\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0003\u0095\u0e36\b\u0095\u0001\u0095\u0003\u0095\u0e39"+
		"\b\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u0e3e\b\u0096"+
		"\u0001\u0097\u0001\u0097\u0003\u0097\u0e42\b\u0097\u0001\u0097\u0001\u0097"+
		"\u0003\u0097\u0e46\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0004\u0098\u0e4e\b\u0098\u000b\u0098\f\u0098"+
		"\u0e4f\u0003\u0098\u0e52\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u0e57\b\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e5b\b\u0099"+
		"\u0001\u0099\u0001\u0099\u0003\u0099\u0e5f\b\u0099\u0004\u0099\u0e61\b"+
		"\u0099\u000b\u0099\f\u0099\u0e62\u0001\u0099\u0003\u0099\u0e66\b\u0099"+
		"\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u0e6b\b\u009a\u0001\u009a"+
		"\u0003\u009a\u0e6e\b\u009a\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0003\u009b\u0e74\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c"+
		"\u0e79\b\u009c\n\u009c\f\u009c\u0e7c\t\u009c\u0001\u009c\u0003\u009c\u0e7f"+
		"\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c\u0e84\b\u009c"+
		"\n\u009c\f\u009c\u0e87\t\u009c\u0001\u009c\u0003\u009c\u0e8a\b\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0003\u009c\u0e93\b\u009c\u0001\u009c\u0001\u009c\u0003\u009c\u0e97"+
		"\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0004\u009c\u0ea0\b\u009c\u000b\u009c\f\u009c\u0ea1"+
		"\u0003\u009c\u0ea4\b\u009c\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e"+
		"\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0003\u00a0\u0eb1\b\u00a0\u0001\u00a0\u0003\u00a0\u0eb4\b"+
		"\u00a0\u0001\u00a0\u0003\u00a0\u0eb7\b\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0003\u00a0\u0ebc\b\u00a0\u0003\u00a0\u0ebe\b\u00a0\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0ec4\b\u00a1\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0005\u00a2"+
		"\u0ecc\b\u00a2\n\u00a2\f\u00a2\u0ecf\t\u00a2\u0004\u00a2\u0ed1\b\u00a2"+
		"\u000b\u00a2\f\u00a2\u0ed2\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0ed7\b"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0edb\b\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0003\u00a3\u0edf\b\u00a3\u0001\u00a3\u0004\u00a3\u0ee2\b\u00a3"+
		"\u000b\u00a3\f\u00a3\u0ee3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0003\u00a3\u0eea\b\u00a3\u0003\u00a3\u0eec\b\u00a3\u0001\u00a3\u0003"+
		"\u00a3\u0eef\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0ef4"+
		"\b\u00a4\u0001\u00a4\u0004\u00a4\u0ef7\b\u00a4\u000b\u00a4\f\u00a4\u0ef8"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0eff\b\u00a4"+
		"\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0f03\b\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0003\u00a5\u0f0d\b\u00a5\u0003\u00a5\u0f0f\b\u00a5\u0001\u00a6\u0001"+
		"\u00a6\u0003\u00a6\u0f13\b\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0f17"+
		"\b\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0f1c\b\u00a6"+
		"\u0001\u00a6\u0005\u00a6\u0f1f\b\u00a6\n\u00a6\f\u00a6\u0f22\t\u00a6\u0001"+
		"\u00a6\u0003\u00a6\u0f25\b\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003"+
		"\u00a7\u0f2a\b\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0003\u00a7\u0f31\b\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0f39\b\u00a8\u0001\u00a8\u0004"+
		"\u00a8\u0f3c\b\u00a8\u000b\u00a8\f\u00a8\u0f3d\u0001\u00a8\u0001\u00a8"+
		"\u0003\u00a8\u0f42\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8"+
		"\u0f47\b\u00a8\n\u00a8\f\u00a8\u0f4a\t\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0f51\b\u00a8\u0001\u00a8\u0004"+
		"\u00a8\u0f54\b\u00a8\u000b\u00a8\f\u00a8\u0f55\u0001\u00a8\u0001\u00a8"+
		"\u0003\u00a8\u0f5a\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8"+
		"\u0f5f\b\u00a8\n\u00a8\f\u00a8\u0f62\t\u00a8\u0001\u00a8\u0001\u00a8\u0003"+
		"\u00a8\u0f66\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0003\u00a8\u0f6d\b\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0f71"+
		"\b\u00a8\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0f75\b\u00a9\u0001\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0003\u00af\u0fa2\b\u00af\u0001\u00af\u0003\u00af\u0fa5\b\u00af\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0004\u00af\u0faa\b\u00af\u000b\u00af\f"+
		"\u00af\u0fab\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0fb7\b\u00b1"+
		"\u0001\u00b1\u0005\u00b1\u0fba\b\u00b1\n\u00b1\f\u00b1\u0fbd\t\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0003\u00b1\u0fc1\b\u00b1\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0003\u00b2\u0fc6\b\u00b2\u0003\u00b2\u0fc8\b\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2"+
		"\u0fd0\b\u00b2\n\u00b2\f\u00b2\u0fd3\t\u00b2\u0001\u00b2\u0001\u00b2\u0003"+
		"\u00b2\u0fd7\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0005\u00b2\u0fdf\b\u00b2\n\u00b2\f\u00b2\u0fe2\t\u00b2"+
		"\u0001\u00b2\u0003\u00b2\u0fe5\b\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2"+
		"\u0fe9\b\u00b2\u0001\u00b2\u0005\u00b2\u0fec\b\u00b2\n\u00b2\f\u00b2\u0fef"+
		"\t\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0ff3\b\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0ff8\b\u00b2\u0001\u00b3\u0001\u00b3"+
		"\u0003\u00b3\u0ffc\b\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0005\u00b4\u1008\b\u00b4\n\u00b4\f\u00b4\u100b\t\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0003\u00b4\u100f\b\u00b4\u0001\u00b4\u0003\u00b4\u1012\b\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0003\u00b5\u1018\b\u00b5"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0005\u00b6"+
		"\u101f\b\u00b6\n\u00b6\f\u00b6\u1022\t\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0005\u00b7\u102d\b\u00b7\n\u00b7\f\u00b7\u1030\t\u00b7\u0001\u00b7"+
		"\u0001\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u1037\b\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9"+
		"\u0001\u00b9\u0003\u00b9\u1040\b\u00b9\u0001\u00b9\u0003\u00b9\u1043\b"+
		"\u00b9\u0001\u00b9\u0005\u00b9\u1046\b\u00b9\n\u00b9\f\u00b9\u1049\t\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0003\u00b9\u104d\b\u00b9\u0001\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0003\u00ba\u1052\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0003\u00ba\u1057\b\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb"+
		"\u0005\u00bb\u105d\b\u00bb\n\u00bb\f\u00bb\u1060\t\u00bb\u0001\u00bb\u0001"+
		"\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb\u1066\b\u00bb\u0003\u00bb\u1068"+
		"\b\u00bb\u0001\u00bc\u0001\u00bc\u0003\u00bc\u106c\b\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0005\u00bc\u1070\b\u00bc\n\u00bc\f\u00bc\u1073\t\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0003\u00bc\u1077\b\u00bc\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u1082\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00be\u0005\u00be\u108a\b\u00be\n\u00be\f\u00be"+
		"\u108d\t\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u1091\b\u00be\u0001"+
		"\u00be\u0001\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00bf\u0005\u00bf\u109b\b\u00bf\n\u00bf\f\u00bf\u109e\t\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0003\u00bf\u10a2\b\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0003\u00bf\u10a7\b\u00bf\u0001\u00bf\u0003\u00bf\u10aa\b"+
		"\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0003\u00c0\u10b8\b\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001"+
		"\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003"+
		"\u00c2\u10c3\b\u00c2\u0001\u00c2\u0005\u00c2\u10c6\b\u00c2\n\u00c2\f\u00c2"+
		"\u10c9\t\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u10cd\b\u00c2\u0001"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u10d2\b\u00c3\u0003\u00c3\u10d4"+
		"\b\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001"+
		"\u00c3\u0005\u00c3\u10dc\b\u00c3\n\u00c3\f\u00c3\u10df\t\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0003\u00c3\u10e3\b\u00c3\u0001\u00c3\u0003\u00c3\u10e6\b"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u10ea\b\u00c3\u0001\u00c3\u0005"+
		"\u00c3\u10ed\b\u00c3\n\u00c3\f\u00c3\u10f0\t\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0003\u00c3\u10f5\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5"+
		"\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u1104\b\u00c5"+
		"\u0001\u00c5\u0005\u00c5\u1107\b\u00c5\n\u00c5\f\u00c5\u110a\t\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0003\u00c5\u110e\b\u00c5\u0003\u00c5\u1110\b\u00c5"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u1115\b\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u111c\b\u00c6"+
		"\u0001\u00c6\u0003\u00c6\u111f\b\u00c6\u0001\u00c6\u0003\u00c6\u1122\b"+
		"\u00c6\u0001\u00c6\u0003\u00c6\u1125\b\u00c6\u0001\u00c6\u0001\u00c6\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0005\u00c7\u112d\b\u00c7\n"+
		"\u00c7\f\u00c7\u1130\t\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003"+
		"\u00c9\u113b\b\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u113f\b\u00c9"+
		"\u0001\u00c9\u0003\u00c9\u1142\b\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0003\u00cb\u114b\b\u00cb"+
		"\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc\u1151\b\u00cc"+
		"\n\u00cc\f\u00cc\u1154\t\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0001\u00cc\u0003\u00cc\u115b\b\u00cc\u0001\u00cc\u0003\u00cc\u115e"+
		"\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003"+
		"\u00cd\u1165\b\u00cd\u0001\u00ce\u0001\u00ce\u0003\u00ce\u1169\b\u00ce"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u116e\b\u00cf\n\u00cf"+
		"\f\u00cf\u1171\t\u00cf\u0001\u00cf\u0004\u00cf\u1174\b\u00cf\u000b\u00cf"+
		"\f\u00cf\u1175\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u119f\b\u00d0"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0003\u00d1\u11bb\b\u00d1\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0005\u00d2\u11c0\b\u00d2\n\u00d2\f\u00d2\u11c3\t\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0003\u00d2\u11c7\b\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0005\u00d3\u11d0"+
		"\b\u00d3\n\u00d3\f\u00d3\u11d3\t\u00d3\u0003\u00d3\u11d5\b\u00d3\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d5\u0001"+
		"\u00d5\u0004\u00d5\u11de\b\u00d5\u000b\u00d5\f\u00d5\u11df\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7"+
		"\u11e8\b\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u11ec\b\u00d7\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0003\u00d8\u11f6\b\u00d8\u0001\u00d8\u0003\u00d8\u11f9"+
		"\b\u00d8\u0001\u00d9\u0001\u00d9\u0003\u00d9\u11fd\b\u00d9\u0001\u00d9"+
		"\u0003\u00d9\u1200\b\u00d9\u0001\u00d9\u0005\u00d9\u1203\b\u00d9\n\u00d9"+
		"\f\u00d9\u1206\t\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u120a\b\u00d9"+
		"\u0001\u00da\u0001\u00da\u0003\u00da\u120e\b\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u1216\b\u00da"+
		"\n\u00da\f\u00da\u1219\t\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001"+
		"\u00db\u0001\u00db\u0005\u00db\u1220\b\u00db\n\u00db\f\u00db\u1223\t\u00db"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u1228\b\u00dc\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0005\u00dd\u1231\b\u00dd\n\u00dd\f\u00dd\u1234\t\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0003\u00dd\u1238\b\u00dd\u0001\u00de\u0001\u00de\u0003\u00de\u123c"+
		"\b\u00de\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001"+
		"\u00df\u0003\u00df\u1244\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0001\u00e0\u0003\u00e0\u124c\b\u00e0\u0001\u00e0\u0001"+
		"\u00e0\u0001\u00e0\u0003\u00e0\u1251\b\u00e0\u0001\u00e0\u0003\u00e0\u1254"+
		"\b\u00e0\u0003\u00e0\u1256\b\u00e0\u0001\u00e1\u0003\u00e1\u1259\b\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0003\u00e2\u1262\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2"+
		"\u0003\u00e2\u1267\b\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3"+
		"\u126c\b\u00e3\u0001\u00e3\u0003\u00e3\u126f\b\u00e3\u0001\u00e4\u0003"+
		"\u00e4\u1272\b\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1276\b\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u1279\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0005\u00e4\u127f\b\u00e4\n\u00e4\f\u00e4\u1282\t\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0003\u00e4\u1286\b\u00e4\u0001\u00e4\u0005\u00e4\u1289"+
		"\b\u00e4\n\u00e4\f\u00e4\u128c\t\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5"+
		"\u0001\u00e5\u0003\u00e5\u1292\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7"+
		"\u129c\b\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8"+
		"\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0004\u00e9\u12aa\b\u00e9\u000b\u00e9\f\u00e9\u12ab\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00ea\u0001\u00ea\u0003\u00ea\u12b2\b\u00ea\u0001"+
		"\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0003\u00ec\u12bc\b\u00ec\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0005\u00ed\u12c4\b\u00ed\n"+
		"\u00ed\f\u00ed\u12c7\t\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001"+
		"\u00ed\u0003\u00ed\u12cd\b\u00ed\u0001\u00ed\u0005\u00ed\u12d0\b\u00ed"+
		"\n\u00ed\f\u00ed\u12d3\t\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003"+
		"\u00ed\u12d8\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0001\u00ee\u0005\u00ee\u12e0\b\u00ee\n\u00ee\f\u00ee\u12e3\t\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0003\u00ee\u12e7\b\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee\u12ee\b\u00ee\u0001\u00ee"+
		"\u0005\u00ee\u12f1\b\u00ee\n\u00ee\f\u00ee\u12f4\t\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0001\u00ee\u0003\u00ee\u12f9\b\u00ee\u0001\u00ef\u0003\u00ef\u12fc"+
		"\b\u00ef\u0001\u00ef\u0003\u00ef\u12ff\b\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0005\u00ef"+
		"\u130e\b\u00ef\n\u00ef\f\u00ef\u1311\t\u00ef\u0001\u00ef\u0001\u00ef\u0003"+
		"\u00ef\u1315\b\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u131e\b\u00ef\u0001\u00ef\u0005"+
		"\u00ef\u1321\b\u00ef\n\u00ef\f\u00ef\u1324\t\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0003\u00ef\u1329\b\u00ef\u0001\u00f0\u0003\u00f0\u132c\b"+
		"\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003"+
		"\u00f1\u1333\b\u00f1\u0001\u00f1\u0003\u00f1\u1336\b\u00f1\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0003\u00f3\u133d\b\u00f3"+
		"\u0001\u00f3\u0004\u00f3\u1340\b\u00f3\u000b\u00f3\f\u00f3\u1341\u0001"+
		"\u00f3\u0001\u00f3\u0003\u00f3\u1346\b\u00f3\u0001\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0003\u00f4\u134b\b\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003"+
		"\u00f5\u1350\b\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001"+
		"\u00f6\u0001\u00f6\u0005\u00f6\u1358\b\u00f6\n\u00f6\f\u00f6\u135b\t\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u1360\b\u00f6\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0005\u00f7"+
		"\u1368\b\u00f7\n\u00f7\f\u00f7\u136b\t\u00f7\u0001\u00f7\u0001\u00f7\u0003"+
		"\u00f7\u136f\b\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001"+
		"\u00f7\u0003\u00f7\u1376\b\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001"+
		"\u00f7\u0003\u00f7\u137c\b\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u1380"+
		"\b\u00f7\u0001\u00f8\u0003\u00f8\u1383\b\u00f8\u0001\u00f8\u0003\u00f8"+
		"\u1386\b\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0005\u00f8\u1395\b\u00f8\n\u00f8\f\u00f8\u1398"+
		"\t\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8\u139c\b\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0003\u00f8"+
		"\u13a4\b\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0005\u00fa"+
		"\u13b0\b\u00fa\n\u00fa\f\u00fa\u13b3\t\u00fa\u0001\u00fa\u0001\u00fa\u0001"+
		"\u00fb\u0001\u00fb\u0003\u00fb\u13b9\b\u00fb\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0004\u00fe\u13c6\b\u00fe\u000b\u00fe\f"+
		"\u00fe\u13c7\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0005\u00ff\u13cf\b\u00ff\n\u00ff\f\u00ff\u13d2\t\u00ff\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u13e4\b\u0100\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0001\u0101\u0001\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0104\u0001\u0104\u0001"+
		"\u0104\u0003\u0104\u13f4\b\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0001"+
		"\u0105\u0001\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u13fd\b\u0106\u0001"+
		"\u0106\u0001\u0106\u0001\u0106\u0003\u0106\u1402\b\u0106\u0001\u0106\u0001"+
		"\u0106\u0003\u0106\u1406\b\u0106\u0001\u0106\u0003\u0106\u1409\b\u0106"+
		"\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107"+
		"\u0005\u0107\u1411\b\u0107\n\u0107\f\u0107\u1414\t\u0107\u0001\u0107\u0001"+
		"\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0005"+
		"\u0108\u141d\b\u0108\n\u0108\f\u0108\u1420\t\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0003\u0108\u1425\b\u0108\u0001\u0108\u0001\u0108\u0001\u0109"+
		"\u0001\u0109\u0005\u0109\u142b\b\u0109\n\u0109\f\u0109\u142e\t\u0109\u0001"+
		"\u0109\u0003\u0109\u1431\b\u0109\u0001\u0109\u0003\u0109\u1434\b\u0109"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0003\u010b\u1442\b\u010b\u0001\u010c\u0001\u010c\u0003\u010c\u1446\b"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u144b\b\u010c\u0001"+
		"\u010c\u0003\u010c\u144e\b\u010c\u0001\u010c\u0001\u010c\u0001\u010d\u0001"+
		"\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001"+
		"\u010d\u0001\u010d\u0003\u010d\u145b\b\u010d\u0001\u010d\u0001\u010d\u0003"+
		"\u010d\u145f\b\u010d\u0001\u010d\u0001\u010d\u0001\u010e\u0001\u010e\u0001"+
		"\u010e\u0001\u010e\u0001\u010e\u0001\u010e\u0005\u010e\u1469\b\u010e\n"+
		"\u010e\f\u010e\u146c\t\u010e\u0001\u010e\u0001\u010e\u0003\u010e\u1470"+
		"\b\u010e\u0001\u010e\u0001\u010e\u0003\u010e\u1474\b\u010e\u0001\u010e"+
		"\u0001\u010e\u0003\u010e\u1478\b\u010e\u0001\u010e\u0001\u010e\u0001\u010f"+
		"\u0001\u010f\u0003\u010f\u147e\b\u010f\u0001\u010f\u0003\u010f\u1481\b"+
		"\u010f\u0001\u010f\u0003\u010f\u1484\b\u010f\u0001\u0110\u0001\u0110\u0001"+
		"\u0110\u0001\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0003\u0111\u149f"+
		"\b\u0111\u0001\u0111\u0001\u0111\u0004\u0111\u14a3\b\u0111\u000b\u0111"+
		"\f\u0111\u14a4\u0001\u0111\u0001\u0111\u0003\u0111\u14a9\b\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0112\u0001\u0112\u0003\u0112\u14af\b\u0112\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0005\u0113\u14b9\b\u0113\n\u0113\f\u0113\u14bc\t\u0113"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113"+
		"\u0003\u0113\u14c4\b\u0113\u0003\u0113\u14c6\b\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0114\u0001\u0114\u0003\u0114\u14cc\b\u0114\u0001\u0114\u0001"+
		"\u0114\u0003\u0114\u14d0\b\u0114\u0001\u0114\u0003\u0114\u14d3\b\u0114"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0116"+
		"\u0001\u0116\u0003\u0116\u14dc\b\u0116\u0001\u0116\u0001\u0116\u0001\u0117"+
		"\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117"+
		"\u0003\u0117\u14e7\b\u0117\u0001\u0117\u0001\u0117\u0003\u0117\u14eb\b"+
		"\u0117\u0001\u0117\u0003\u0117\u14ee\b\u0117\u0001\u0118\u0001\u0118\u0003"+
		"\u0118\u14f2\b\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0003\u0119\u14fa\b\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u1503"+
		"\b\u0119\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011b\u0001\u011b\u0001"+
		"\u011b\u0001\u011b\u0004\u011b\u150c\b\u011b\u000b\u011b\f\u011b\u150d"+
		"\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0003\u011d\u151c\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011d\u0003\u011d\u1530\b\u011d\u0001\u011e\u0001\u011e"+
		"\u0003\u011e\u1534\b\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011f"+
		"\u0001\u011f\u0003\u011f\u153b\b\u011f\u0001\u011f\u0001\u011f\u0003\u011f"+
		"\u153f\b\u011f\u0001\u0120\u0001\u0120\u0003\u0120\u1543\b\u0120\u0001"+
		"\u0120\u0001\u0120\u0003\u0120\u1547\b\u0120\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0005"+
		"\u0122\u1551\b\u0122\n\u0122\f\u0122\u1554\t\u0122\u0001\u0122\u0003\u0122"+
		"\u1557\b\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0124\u0001\u0124\u0001\u0124"+
		"\u0001\u0125\u0003\u0125\u1565\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0001\u0125\u0003\u0125\u156b\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125"+
		"\u0001\u0125\u0001\u0125\u0003\u0125\u1572\b\u0125\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0003\u0126\u1577\b\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0003\u0126"+
		"\u1581\b\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0003\u0126"+
		"\u1587\b\u0126\u0003\u0126\u1589\b\u0126\u0001\u0127\u0001\u0127\u0001"+
		"\u0127\u0001\u0127\u0001\u0127\u0001\u0127\u0001\u0127\u0003\u0127\u1592"+
		"\b\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u159c\b\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0003\u0128\u15a1\b\u0128\u0001\u0129\u0001\u0129\u0001"+
		"\u0129\u0001\u0129\u0001\u0129\u0001\u012a\u0001\u012a\u0001\u012b\u0001"+
		"\u012b\u0001\u012c\u0001\u012c\u0001\u012d\u0001\u012d\u0003\u012d\u15b0"+
		"\b\u012d\u0001\u012e\u0001\u012e\u0003\u012e\u15b4\b\u012e\u0001\u012f"+
		"\u0003\u012f\u15b7\b\u012f\u0001\u012f\u0001\u012f\u0003\u012f\u15bb\b"+
		"\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130\u0004\u0130\u15c1"+
		"\b\u0130\u000b\u0130\f\u0130\u15c2\u0003\u0130\u15c5\b\u0130\u0001\u0130"+
		"\u0001\u0130\u0003\u0130\u15c9\b\u0130\u0001\u0131\u0001\u0131\u0001\u0131"+
		"\u0001\u0131\u0005\u0131\u15cf\b\u0131\n\u0131\f\u0131\u15d2\t\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0132\u0003\u0132\u15d8\b\u0132\u0001"+
		"\u0132\u0004\u0132\u15db\b\u0132\u000b\u0132\f\u0132\u15dc\u0003\u0132"+
		"\u15df\b\u0132\u0001\u0132\u0001\u0132\u0001\u0133\u0003\u0133\u15e4\b"+
		"\u0133\u0001\u0133\u0004\u0133\u15e7\b\u0133\u000b\u0133\f\u0133\u15e8"+
		"\u0001\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0134"+
		"\u0003\u0134\u15f1\b\u0134\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0001\u0135\u0003\u0135\u15f8\b\u0135\u0001\u0135\u0001\u0135\u0003\u0135"+
		"\u15fc\b\u0135\u0001\u0135\u0003\u0135\u15ff\b\u0135\u0001\u0136\u0001"+
		"\u0136\u0001\u0136\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0001"+
		"\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u160b\b\u0137\u0001\u0138\u0001"+
		"\u0138\u0001\u0138\u0001\u0138\u0003\u0138\u1611\b\u0138\u0001\u0139\u0001"+
		"\u0139\u0001\u0139\u0001\u013a\u0001\u013a\u0001\u013a\u0003\u013a\u1619"+
		"\b\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001"+
		"\u013b\u0005\u013b\u1621\b\u013b\n\u013b\f\u013b\u1624\t\u013b\u0001\u013b"+
		"\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0005\u013b"+
		"\u162c\b\u013b\n\u013b\f\u013b\u162f\t\u013b\u0003\u013b\u1631\b\u013b"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c"+
		"\u1638\b\u013c\u0001\u013c\u0003\u013c\u163b\b\u013c\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0003\u013d\u1642\b\u013d\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u164d\b\u013e\u0001\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u1653\b\u013e\u0001\u013e\u0001"+
		"\u013e\u0003\u013e\u1657\b\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u013f\u0001\u013f\u0001\u013f\u0005\u013f\u165f\b\u013f\n\u013f\f\u013f"+
		"\u1662\t\u013f\u0003\u013f\u1664\b\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u0140\u0001\u0140\u0003\u0140\u166a\b\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0140\u0003\u0140\u1675\b\u0140\u0003\u0140\u1677\b\u0140\u0003\u0140"+
		"\u1679\b\u0140\u0001\u0140\u0003\u0140\u167c\b\u0140\u0001\u0141\u0001"+
		"\u0141\u0003\u0141\u1680\b\u0141\u0001\u0141\u0003\u0141\u1683\b\u0141"+
		"\u0001\u0142\u0001\u0142\u0003\u0142\u1687\b\u0142\u0001\u0142\u0001\u0142"+
		"\u0003\u0142\u168b\b\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003\u0142"+
		"\u1690\b\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u169b\b\u0144"+
		"\u0001\u0144\u0001\u0144\u0003\u0144\u169f\b\u0144\u0001\u0144\u0001\u0144"+
		"\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u16a7\b\u0144"+
		"\u0001\u0145\u0003\u0145\u16aa\b\u0145\u0001\u0145\u0001\u0145\u0001\u0146"+
		"\u0001\u0146\u0001\u0146\u0001\u0146\u0005\u0146\u16b2\b\u0146\n\u0146"+
		"\f\u0146\u16b5\t\u0146\u0001\u0147\u0001\u0147\u0003\u0147\u16b9\b\u0147"+
		"\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0003\u0147\u16bf\b\u0147"+
		"\u0001\u0147\u0001\u0147\u0003\u0147\u16c3\b\u0147\u0001\u0147\u0003\u0147"+
		"\u16c6\b\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148"+
		"\u0001\u0148\u0003\u0148\u16ce\b\u0148\u0001\u0148\u0003\u0148\u16d1\b"+
		"\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u16d5\b\u0148\u0001\u0148\u0001"+
		"\u0148\u0003\u0148\u16d9\b\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003"+
		"\u0148\u16de\b\u0148\u0001\u0148\u0003\u0148\u16e1\b\u0148\u0001\u0148"+
		"\u0001\u0148\u0003\u0148\u16e5\b\u0148\u0001\u0148\u0001\u0148\u0003\u0148"+
		"\u16e9\b\u0148\u0005\u0148\u16eb\b\u0148\n\u0148\f\u0148\u16ee\t\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0005\u0149\u16f7\b\u0149\n\u0149\f\u0149\u16fa\t\u0149\u0001"+
		"\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001"+
		"\u0149\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0003\u014a\u1709\b\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0003\u014a\u170f\b\u014a\u0005\u014a\u1711\b\u014a\n\u014a\f\u014a"+
		"\u1714\t\u014a\u0001\u014b\u0001\u014b\u0003\u014b\u1718\b\u014b\u0001"+
		"\u014c\u0001\u014c\u0003\u014c\u171c\b\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0005\u014c\u1721\b\u014c\n\u014c\f\u014c\u1724\t\u014c\u0001\u014c"+
		"\u0003\u014c\u1727\b\u014c\u0001\u014c\u0003\u014c\u172a\b\u014c\u0001"+
		"\u014c\u0003\u014c\u172d\b\u014c\u0001\u014c\u0003\u014c\u1730\b\u014c"+
		"\u0001\u014c\u0001\u014c\u0005\u014c\u1734\b\u014c\n\u014c\f\u014c\u1737"+
		"\t\u014c\u0001\u014c\u0003\u014c\u173a\b\u014c\u0001\u014c\u0001\u014c"+
		"\u0001\u014c\u0005\u014c\u173f\b\u014c\n\u014c\f\u014c\u1742\t\u014c\u0001"+
		"\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001"+
		"\u014d\u0001\u014d\u0003\u014d\u174c\b\u014d\u0003\u014d\u174e\b\u014d"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0005\u014e\u1754\b\u014e"+
		"\n\u014e\f\u014e\u1757\t\u014e\u0001\u014f\u0001\u014f\u0001\u014f\u0003"+
		"\u014f\u175c\b\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0005\u0150\u1761"+
		"\b\u0150\n\u0150\f\u0150\u1764\t\u0150\u0001\u0150\u0001\u0150\u0005\u0150"+
		"\u1768\b\u0150\n\u0150\f\u0150\u176b\t\u0150\u0001\u0150\u0003\u0150\u176e"+
		"\b\u0150\u0003\u0150\u1770\b\u0150\u0001\u0150\u0001\u0150\u0005\u0150"+
		"\u1774\b\u0150\n\u0150\f\u0150\u1777\t\u0150\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0003\u0151\u177c\b\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0151\u0001\u0151\u0003\u0151\u1783\b\u0151\u0001\u0152\u0003\u0152\u1786"+
		"\b\u0152\u0001\u0152\u0003\u0152\u1789\b\u0152\u0001\u0152\u0001\u0152"+
		"\u0001\u0152\u0003\u0152\u178e\b\u0152\u0001\u0152\u0001\u0152\u0003\u0152"+
		"\u1792\b\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0154\u0001\u0154"+
		"\u0001\u0154\u0001\u0154\u0001\u0154\u0005\u0154\u179c\b\u0154\n\u0154"+
		"\f\u0154\u179f\t\u0154\u0001\u0154\u0001\u0154\u0001\u0155\u0001\u0155"+
		"\u0003\u0155\u17a5\b\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155"+
		"\u17aa\b\u0155\u0003\u0155\u17ac\b\u0155\u0003\u0155\u17ae\b\u0155\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0005\u0156\u17ba\b\u0156\n"+
		"\u0156\f\u0156\u17bd\t\u0156\u0003\u0156\u17bf\b\u0156\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0003\u0157\u17c9\b\u0157\u0001\u0158\u0001\u0158\u0003\u0158\u17cd"+
		"\b\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0005\u0158\u17d3"+
		"\b\u0158\n\u0158\f\u0158\u17d6\t\u0158\u0001\u0158\u0001\u0158\u0001\u0158"+
		"\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159"+
		"\u0003\u0159\u17e1\b\u0159\u0001\u015a\u0001\u015a\u0001\u015a\u0001\u015a"+
		"\u0001\u015a\u0001\u015a\u0005\u015a\u17e9\b\u015a\n\u015a\f\u015a\u17ec"+
		"\t\u015a\u0001\u015a\u0001\u015a\u0003\u015a\u17f0\b\u015a\u0001\u015b"+
		"\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0005\u015b"+
		"\u17f8\b\u015b\n\u015b\f\u015b\u17fb\t\u015b\u0001\u015b\u0001\u015b\u0001"+
		"\u015b\u0005\u015b\u1800\b\u015b\n\u015b\f\u015b\u1803\t\u015b\u0003\u015b"+
		"\u1805\b\u015b\u0001\u015b\u0001\u015b\u0001\u015c\u0001\u015c\u0003\u015c"+
		"\u180b\b\u015c\u0001\u015d\u0001\u015d\u0003\u015d\u180f\b\u015d\u0001"+
		"\u015e\u0001\u015e\u0001\u015e\u0003\u015e\u1814\b\u015e\u0001\u015e\u0001"+
		"\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0005\u015e\u181c"+
		"\b\u015e\n\u015e\f\u015e\u181f\t\u015e\u0001\u015e\u0001\u015e\u0003\u015e"+
		"\u1823\b\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015f"+
		"\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0005\u015f\u182e\b\u015f"+
		"\n\u015f\f\u015f\u1831\t\u015f\u0001\u015f\u0001\u015f\u0001\u0160\u0001"+
		"\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0005\u0160\u183a\b\u0160\n"+
		"\u0160\f\u0160\u183d\t\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u1841"+
		"\b\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001"+
		"\u0160\u0005\u0160\u1849\b\u0160\n\u0160\f\u0160\u184c\t\u0160\u0001\u0160"+
		"\u0001\u0160\u0003\u0160\u1850\b\u0160\u0003\u0160\u1852\b\u0160\u0001"+
		"\u0161\u0001\u0161\u0001\u0161\u0003\u0161\u1857\b\u0161\u0001\u0161\u0001"+
		"\u0161\u0003\u0161\u185b\b\u0161\u0001\u0161\u0001\u0161\u0001\u0161\u0001"+
		"\u0161\u0003\u0161\u1861\b\u0161\u0001\u0161\u0001\u0161\u0003\u0161\u1865"+
		"\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0005\u0163\u1870\b\u0163\n"+
		"\u0163\f\u0163\u1873\t\u0163\u0001\u0164\u0001\u0164\u0001\u0164\u0003"+
		"\u0164\u1878\b\u0164\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001"+
		"\u0165\u0005\u0165\u187f\b\u0165\n\u0165\f\u0165\u1882\t\u0165\u0001\u0165"+
		"\u0001\u0165\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166"+
		"\u0001\u0166\u0005\u0166\u188c\b\u0166\n\u0166\f\u0166\u188f\t\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u1896"+
		"\b\u0167\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0169\u0001\u0169\u0005"+
		"\u0169\u189d\b\u0169\n\u0169\f\u0169\u18a0\t\u0169\u0001\u0169\u0003\u0169"+
		"\u18a3\b\u0169\u0001\u0169\u0005\u0169\u18a6\b\u0169\n\u0169\f\u0169\u18a9"+
		"\t\u0169\u0001\u0169\u0001\u0169\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0003\u016a\u18b3\b\u016a\u0003\u016a\u18b5"+
		"\b\u016a\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0005\u016c\u18c3\b\u016c\n\u016c\f\u016c\u18c6\t\u016c\u0001\u016d"+
		"\u0001\u016d\u0003\u016d\u18ca\b\u016d\u0001\u016d\u0001\u016d\u0005\u016d"+
		"\u18ce\b\u016d\n\u016d\f\u016d\u18d1\t\u016d\u0001\u016d\u0001\u016d\u0001"+
		"\u016e\u0003\u016e\u18d6\b\u016e\u0001\u016e\u0001\u016e\u0001\u016e\u0001"+
		"\u016e\u0001\u016e\u0001\u016e\u0001\u016f\u0001\u016f\u0001\u016f\u0001"+
		"\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0005\u0170\u18e6"+
		"\b\u0170\n\u0170\f\u0170\u18e9\t\u0170\u0001\u0170\u0001\u0170\u0001\u0171"+
		"\u0001\u0171\u0003\u0171\u18ef\b\u0171\u0001\u0172\u0003\u0172\u18f2\b"+
		"\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0001\u0172\u0005\u0172\u18f8"+
		"\b\u0172\n\u0172\f\u0172\u18fb\t\u0172\u0001\u0172\u0001\u0172\u0001\u0173"+
		"\u0001\u0173\u0001\u0173\u0001\u0173\u0003\u0173\u1903\b\u0173\u0003\u0173"+
		"\u1905\b\u0173\u0001\u0173\u0001\u0173\u0003\u0173\u1909\b\u0173\u0001"+
		"\u0173\u0003\u0173\u190c\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0003"+
		"\u0174\u1911\b\u0174\u0003\u0174\u1913\b\u0174\u0001\u0174\u0001\u0174"+
		"\u0003\u0174\u1917\b\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0175"+
		"\u0001\u0175\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0001\u0176"+
		"\u0003\u0176\u1923\b\u0176\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177"+
		"\u0001\u0177\u0001\u0178\u0001\u0178\u0003\u0178\u192c\b\u0178\u0001\u0178"+
		"\u0001\u0178\u0001\u0178\u0001\u0178\u0005\u0178\u1932\b\u0178\n\u0178"+
		"\f\u0178\u1935\t\u0178\u0001\u0179\u0001\u0179\u0003\u0179\u1939\b\u0179"+
		"\u0001\u0179\u0001\u0179\u0003\u0179\u193d\b\u0179\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0003\u017a\u1942\b\u017a\u0001\u017a\u0003\u017a\u1945\b"+
		"\u017a\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017b\u0005\u017b\u194b"+
		"\b\u017b\n\u017b\f\u017b\u194e\t\u017b\u0001\u017c\u0001\u017c\u0001\u017c"+
		"\u0001\u017c\u0001\u017c\u0003\u017c\u1955\b\u017c\u0001\u017d\u0001\u017d"+
		"\u0001\u017d\u0001\u017e\u0001\u017e\u0001\u017e\u0001\u017e\u0003\u017e"+
		"\u195e\b\u017e\u0001\u017e\u0003\u017e\u1961\b\u017e\u0001\u017e\u0003"+
		"\u017e\u1964\b\u017e\u0001\u017e\u0003\u017e\u1967\b\u017e\u0001\u017f"+
		"\u0001\u017f\u0001\u017f\u0001\u017f\u0005\u017f\u196d\b\u017f\n\u017f"+
		"\f\u017f\u1970\t\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u017f"+
		"\u0001\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u1979\b\u017f\u0001\u0180"+
		"\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180\u0001\u0180"+
		"\u0001\u0180\u0003\u0180\u1983\b\u0180\u0001\u0181\u0001\u0181\u0003\u0181"+
		"\u1987\b\u0181\u0001\u0181\u0001\u0181\u0003\u0181\u198b\b\u0181\u0001"+
		"\u0181\u0003\u0181\u198e\b\u0181\u0001\u0181\u0003\u0181\u1991\b\u0181"+
		"\u0001\u0182\u0001\u0182\u0001\u0182\u0003\u0182\u1996\b\u0182\u0001\u0183"+
		"\u0001\u0183\u0001\u0183\u0003\u0183\u199b\b\u0183\u0001\u0183\u0003\u0183"+
		"\u199e\b\u0183\u0001\u0183\u0003\u0183\u19a1\b\u0183\u0001\u0184\u0001"+
		"\u0184\u0004\u0184\u19a5\b\u0184\u000b\u0184\f\u0184\u19a6\u0001\u0184"+
		"\u0003\u0184\u19aa\b\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185"+
		"\u0003\u0185\u19b0\b\u0185\u0001\u0185\u0003\u0185\u19b3\b\u0185\u0001"+
		"\u0186\u0003\u0186\u19b6\b\u0186\u0001\u0186\u0004\u0186\u19b9\b\u0186"+
		"\u000b\u0186\f\u0186\u19ba\u0001\u0186\u0003\u0186\u19be\b\u0186\u0001"+
		"\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0004\u0187\u19c4\b\u0187\u000b"+
		"\u0187\f\u0187\u19c5\u0001\u0188\u0001\u0188\u0004\u0188\u19ca\b\u0188"+
		"\u000b\u0188\f\u0188\u19cb\u0001\u0189\u0001\u0189\u0001\u0189\u0003\u0189"+
		"\u19d1\b\u0189\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0005\u018a"+
		"\u19d7\b\u018a\n\u018a\f\u018a\u19da\t\u018a\u0001\u018b\u0001\u018b\u0001"+
		"\u018b\u0001\u018b\u0003\u018b\u19e0\b\u018b\u0001\u018b\u0001\u018b\u0001"+
		"\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0003"+
		"\u018b\u19ea\b\u018b\u0001\u018b\u0001\u018b\u0003\u018b\u19ee\b\u018b"+
		"\u0003\u018b\u19f0\b\u018b\u0001\u018b\u0003\u018b\u19f3\b\u018b\u0001"+
		"\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001"+
		"\u018c\u0001\u018c\u0005\u018c\u19fd\b\u018c\n\u018c\f\u018c\u1a00\t\u018c"+
		"\u0001\u018c\u0003\u018c\u1a03\b\u018c\u0001\u018c\u0003\u018c\u1a06\b"+
		"\u018c\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018d\u0001\u018e\u0001"+
		"\u018e\u0001\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001"+
		"\u018f\u0001\u018f\u0003\u018f\u1a15\b\u018f\u0001\u018f\u0001\u018f\u0001"+
		"\u018f\u0003\u018f\u1a1a\b\u018f\u0001\u0190\u0001\u0190\u0001\u0190\u0001"+
		"\u0190\u0001\u0190\u0003\u0190\u1a21\b\u0190\u0001\u0190\u0003\u0190\u1a24"+
		"\b\u0190\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0005"+
		"\u0191\u1a2b\b\u0191\n\u0191\f\u0191\u1a2e\t\u0191\u0001\u0191\u0001\u0191"+
		"\u0001\u0191\u0001\u0191\u0003\u0191\u1a34\b\u0191\u0001\u0192\u0001\u0192"+
		"\u0001\u0192\u0003\u0192\u1a39\b\u0192\u0001\u0193\u0001\u0193\u0003\u0193"+
		"\u1a3d\b\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194"+
		"\u0001\u0194\u0003\u0194\u1a45\b\u0194\u0001\u0194\u0001\u0194\u0001\u0194"+
		"\u0001\u0194\u0003\u0194\u1a4b\b\u0194\u0001\u0195\u0001\u0195\u0001\u0195"+
		"\u0001\u0195\u0001\u0195\u0001\u0195\u0003\u0195\u1a53\b\u0195\u0001\u0195"+
		"\u0003\u0195\u1a56\b\u0195\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196"+
		"\u0005\u0196\u1a5c\b\u0196\n\u0196\f\u0196\u1a5f\t\u0196\u0001\u0196\u0001"+
		"\u0196\u0001\u0197\u0001\u0197\u0001\u0197\u0003\u0197\u1a66\b\u0197\u0001"+
		"\u0197\u0003\u0197\u1a69\b\u0197\u0001\u0197\u0003\u0197\u1a6c\b\u0197"+
		"\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u0199\u0003\u0199\u1a75\b\u0199\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0003\u019a\u1a7b\b\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0003\u019a\u1a81\b\u019a\u0003\u019a\u1a83\b\u019a\u0001"+
		"\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001"+
		"\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0003\u019b\u1a90"+
		"\b\u019b\u0003\u019b\u1a92\b\u019b\u0001\u019c\u0001\u019c\u0001\u019c"+
		"\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0003\u019c\u1a9b\b\u019c"+
		"\u0003\u019c\u1a9d\b\u019c\u0001\u019d\u0001\u019d\u0003\u019d\u1aa1\b"+
		"\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0003\u019d\u1aa7"+
		"\b\u019d\u0001\u019d\u0001\u019d\u0003\u019d\u1aab\b\u019d\u0001\u019e"+
		"\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019f\u0001\u019f"+
		"\u0001\u019f\u0001\u019f\u0001\u019f\u0001\u01a0\u0001\u01a0\u0003\u01a0"+
		"\u1ab9\b\u01a0\u0001\u01a0\u0001\u01a0\u0005\u01a0\u1abd\b\u01a0\n\u01a0"+
		"\f\u01a0\u1ac0\t\u01a0\u0001\u01a0\u0001\u01a0\u0001\u01a1\u0001\u01a1"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0003\u01a2\u1ad0\b\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0003\u01a2\u1ad4\b\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0003\u01a2\u1aea\b\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0001\u01a2\u0001\u01a2\u0003\u01a2\u1af2\b\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0003\u01a2\u1af6\b\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2"+
		"\u0003\u01a2\u1afc\b\u01a2\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0003\u01a2"+
		"\u1b01\b\u01a2\u0001\u01a2\u0005\u01a2\u1b04\b\u01a2\n\u01a2\f\u01a2\u1b07"+
		"\t\u01a2\u0001\u01a3\u0003\u01a3\u1b0a\b\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0003\u01a3\u1b15\b\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3"+
		"\u1b19\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0005\u01a3\u1b1e\b"+
		"\u01a3\n\u01a3\f\u01a3\u1b21\t\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3"+
		"\u1b25\b\u01a3\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a4\u0001\u01a5"+
		"\u0001\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6"+
		"\u0001\u01a6\u0003\u01a6\u1b33\b\u01a6\u0001\u01a7\u0001\u01a7\u0001\u01a8"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9"+
		"\u0001\u01aa\u0001\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1b46\b\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab\u1b5a\b\u01ab"+
		"\u0001\u01ab\u0003\u01ab\u1b5d\b\u01ab\u0005\u01ab\u1b5f\b\u01ab\n\u01ab"+
		"\f\u01ab\u1b62\t\u01ab\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ac"+
		"\u0001\u01ac\u0003\u01ac\u1b69\b\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ac"+
		"\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0003\u01ac\u1b71\b\u01ac\u0001\u01ac"+
		"\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ac\u0003\u01ac\u1b78\b\u01ac"+
		"\u0001\u01ac\u0001\u01ac\u0003\u01ac\u1b7c\b\u01ac\u0001\u01ad\u0001\u01ad"+
		"\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ae\u0001\u01ae\u0003\u01ae"+
		"\u1b85\b\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u1b8a\b"+
		"\u01ae\u0005\u01ae\u1b8c\b\u01ae\n\u01ae\f\u01ae\u1b8f\t\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0005\u01ae\u1b94\b\u01ae\n\u01ae\f\u01ae\u1b97"+
		"\t\u01ae\u0001\u01ae\u0003\u01ae\u1b9a\b\u01ae\u0001\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0003\u01af\u1ba1\b\u01af\u0001\u01af"+
		"\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af"+
		"\u0003\u01af\u1baa\b\u01af\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b1"+
		"\u0001\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2"+
		"\u0005\u01b2\u1bb6\b\u01b2\n\u01b2\f\u01b2\u1bb9\t\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0005\u01b2\u1bc3\b\u01b2\n\u01b2\f\u01b2\u1bc6\t\u01b2\u0001\u01b2"+
		"\u0001\u01b2\u0003\u01b2\u1bca\b\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0003\u01b3\u1bdf\b\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0005\u01b3"+
		"\u1be6\b\u01b3\n\u01b3\f\u01b3\u1be9\t\u01b3\u0001\u01b4\u0001\u01b4\u0003"+
		"\u01b4\u1bed\b\u01b4\u0001\u01b5\u0003\u01b5\u1bf0\b\u01b5\u0001\u01b5"+
		"\u0001\u01b5\u0001\u01b5\u0004\u01b5\u1bf5\b\u01b5\u000b\u01b5\f\u01b5"+
		"\u1bf6\u0001\u01b5\u0003\u01b5\u1bfa\b\u01b5\u0001\u01b5\u0001\u01b5\u0003"+
		"\u01b5\u1bfe\b\u01b5\u0001\u01b5\u0003\u01b5\u1c01\b\u01b5\u0001\u01b6"+
		"\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0001\u01b6\u0003\u01b6\u1c08\b\u01b6"+
		"\u0001\u01b7\u0003\u01b7\u1c0b\b\u01b7\u0001\u01b7\u0001\u01b7\u0004\u01b7"+
		"\u1c0f\b\u01b7\u000b\u01b7\f\u01b7\u1c10\u0001\u01b7\u0003\u01b7\u1c14"+
		"\b\u01b7\u0001\u01b7\u0001\u01b7\u0003\u01b7\u1c18\b\u01b7\u0001\u01b7"+
		"\u0003\u01b7\u1c1b\b\u01b7\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8"+
		"\u0001\u01b8\u0003\u01b8\u1c22\b\u01b8\u0001\u01b9\u0001\u01b9\u0001\u01b9"+
		"\u0003\u01b9\u1c27\b\u01b9\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba"+
		"\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba"+
		"\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba"+
		"\u0003\u01ba\u1c39\b\u01ba\u0003\u01ba\u1c3b\b\u01ba\u0001\u01bb\u0001"+
		"\u01bb\u0003\u01bb\u1c3f\b\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001"+
		"\u01bc\u0005\u01bc\u1c45\b\u01bc\n\u01bc\f\u01bc\u1c48\t\u01bc\u0001\u01bd"+
		"\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd\u0001\u01bd"+
		"\u0001\u01bd\u0001\u01bd\u0003\u01bd\u1c53\b\u01bd\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1c5a\b\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0003\u01be\u1c65\b\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1c6d\b\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0003\u01be\u1c7c\b\u01be\u0001\u01be\u0001\u01be\u0003\u01be"+
		"\u1c80\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0004\u01be\u1c87\b\u01be\u000b\u01be\f\u01be\u1c88\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1c8f\b\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1c97"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0003\u01be\u1ca0\b\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0005\u01be\u1ca9"+
		"\b\u01be\n\u01be\f\u01be\u1cac\t\u01be\u0001\u01be\u0003\u01be\u1caf\b"+
		"\u01be\u0001\u01be\u0003\u01be\u1cb2\b\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1cc2\b\u01be\u0001\u01be\u0001\u01be\u0005\u01be\u1cc6\b\u01be"+
		"\n\u01be\f\u01be\u1cc9\t\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1cd2\b\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1cda\b\u01be\u0001\u01be\u0003\u01be\u1cdd\b\u01be\u0001\u01be"+
		"\u0003\u01be\u1ce0\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1ce9\b\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0003\u01be\u1cee\b\u01be\u0001\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0005\u01be\u1cf5\b\u01be\n\u01be"+
		"\f\u01be\u1cf8\t\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be"+
		"\u1cfd\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d02\b"+
		"\u01be\u0001\u01be\u0003\u01be\u1d05\b\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0003\u01be\u1d0a\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1d0f\b\u01be\u0005\u01be\u1d11\b\u01be\n\u01be\f\u01be\u1d14\t"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d19\b\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d1f\b\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0003\u01be\u1d28\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1d2d\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0001\u01be\u0003\u01be\u1d35\b\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1d39\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d3e"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d44"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1d4b\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d50"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u1d57\b\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d5b\b\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d60\b\u01be\u0001\u01be"+
		"\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be"+
		"\u1d68\b\u01be\u0001\u01be\u0003\u01be\u1d6b\b\u01be\u0001\u01be\u0003"+
		"\u01be\u1d6e\b\u01be\u0001\u01be\u0003\u01be\u1d71\b\u01be\u0001\u01be"+
		"\u0001\u01be\u0003\u01be\u1d75\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be"+
		"\u0003\u01be\u1d7a\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be"+
		"\u1d7f\b\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d83\b\u01be\u0001"+
		"\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d8a"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u1d8f\b\u01be"+
		"\u0003\u01be\u1d91\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0005\u01be"+
		"\u1d96\b\u01be\n\u01be\f\u01be\u1d99\t\u01be\u0001\u01bf\u0001\u01bf\u0001"+
		"\u01bf\u0003\u01bf\u1d9e\b\u01bf\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0001"+
		"\u01bf\u0003\u01bf\u1da4\b\u01bf\u0001\u01bf\u0003\u01bf\u1da7\b\u01bf"+
		"\u0001\u01bf\u0001\u01bf\u0003\u01bf\u1dab\b\u01bf\u0003\u01bf\u1dad\b"+
		"\u01bf\u0001\u01c0\u0001\u01c0\u0001\u01c1\u0001\u01c1\u0001\u01c2\u0001"+
		"\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0003\u01c3\u1db8\b\u01c3\u0001"+
		"\u01c3\u0001\u01c3\u0003\u01c3\u1dbc\b\u01c3\u0003\u01c3\u1dbe\b\u01c3"+
		"\u0001\u01c3\u0001\u01c3\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0003\u01c4\u1dc9\b\u01c4\u0001\u01c5"+
		"\u0001\u01c5\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6"+
		"\u0001\u01c6\u0001\u01c6\u0003\u01c6\u1dd4\b\u01c6\u0001\u01c7\u0001\u01c7"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0005\u01c7\u1ddb\b\u01c7\n\u01c7"+
		"\f\u01c7\u1dde\t\u01c7\u0003\u01c7\u1de0\b\u01c7\u0001\u01c8\u0001\u01c8"+
		"\u0003\u01c8\u1de4\b\u01c8\u0001\u01c8\u0003\u01c8\u1de7\b\u01c8\u0001"+
		"\u01c8\u0001\u01c8\u0003\u01c8\u1deb\b\u01c8\u0001\u01c9\u0001\u01c9\u0001"+
		"\u01c9\u0001\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0001"+
		"\u01ca\u0001\u01ca\u0001\u01ca\u0003\u01ca\u1df8\b\u01ca\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0003\u01cb\u1dfd\b\u01cb\u0001\u01cb\u0001\u01cb\u0001"+
		"\u01cb\u0001\u01cb\u0005\u01cb\u1e03\b\u01cb\n\u01cb\f\u01cb\u1e06\t\u01cb"+
		"\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cb\u0003\u01cb\u1e0c\b\u01cb"+
		"\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u1e11\b\u01cc\u0001\u01cc"+
		"\u0001\u01cc\u0003\u01cc\u1e15\b\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc"+
		"\u0003\u01cc\u1e1a\b\u01cc\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0003\u01cd"+
		"\u1e1f\b\u01cd\u0001\u01cd\u0003\u01cd\u1e22\b\u01cd\u0001\u01cd\u0001"+
		"\u01cd\u0001\u01cd\u0005\u01cd\u1e27\b\u01cd\n\u01cd\f\u01cd\u1e2a\t\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0003\u01ce\u1e33\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01ce\u0005\u01ce\u1e39\b\u01ce\n\u01ce\f\u01ce\u1e3c\t\u01ce\u0001"+
		"\u01ce\u0003\u01ce\u1e3f\b\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01cf\u0001"+
		"\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0003\u01cf\u1e49"+
		"\b\u01cf\u0001\u01cf\u0003\u01cf\u1e4c\b\u01cf\u0003\u01cf\u1e4e\b\u01cf"+
		"\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0001\u01d1\u0001\u01d1\u0003\u01d1\u1e58\b\u01d1\u0003\u01d1\u1e5a\b"+
		"\u01d1\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0003\u01d2\u1e60"+
		"\b\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u1e66"+
		"\b\u01d3\u0003\u01d3\u1e68\b\u01d3\u0001\u01d4\u0001\u01d4\u0001\u01d4"+
		"\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u1e76\b\u01d6\u0003\u01d6"+
		"\u1e78\b\u01d6\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d7\u0003\u01d7\u1e80\b\u01d7\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8\u1e89\b\u01d8"+
		"\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9"+
		"\u0001\u01d9\u0003\u01d9\u1e92\b\u01d9\u0001\u01da\u0001\u01da\u0001\u01db"+
		"\u0001\u01db\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc"+
		"\u1e9c\b\u01dc\u0001\u01dd\u0001\u01dd\u0003\u01dd\u1ea0\b\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01de\u0003\u01de\u1ea5\b\u01de\u0001\u01de\u0001"+
		"\u01de\u0003\u01de\u1ea9\b\u01de\u0001\u01de\u0003\u01de\u1eac\b\u01de"+
		"\u0001\u01df\u0003\u01df\u1eaf\b\u01df\u0001\u01df\u0001\u01df\u0003\u01df"+
		"\u1eb3\b\u01df\u0001\u01e0\u0001\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e1"+
		"\u0003\u01e1\u1eba\b\u01e1\u0001\u01e2\u0001\u01e2\u0001\u01e2\u0001\u01e2"+
		"\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0005\u01e3\u1ec4\b\u01e3"+
		"\n\u01e3\f\u01e3\u1ec7\t\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0001\u01e3\u0005\u01e3\u1ecf\b\u01e3\n\u01e3\f\u01e3"+
		"\u1ed2\t\u01e3\u0003\u01e3\u1ed4\b\u01e3\u0001\u01e4\u0001\u01e4\u0003"+
		"\u01e4\u1ed8\b\u01e4\u0001\u01e5\u0001\u01e5\u0001\u01e6\u0001\u01e6\u0001"+
		"\u01e7\u0001\u01e7\u0001\u01e8\u0001\u01e8\u0001\u01e9\u0001\u01e9\u0001"+
		"\u01ea\u0001\u01ea\u0001\u01eb\u0001\u01eb\u0001\u01eb\u0005\u01eb\u1ee9"+
		"\b\u01eb\n\u01eb\f\u01eb\u1eec\t\u01eb\u0001\u01eb\u0001\u01eb\u0003\u01eb"+
		"\u1ef0\b\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0003\u01ed\u1ef7\b\u01ed\u0001\u01ee\u0001\u01ee\u0001\u01ef\u0001\u01ef"+
		"\u0001\u01f0\u0001\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f1\u0005\u01f1"+
		"\u1f02\b\u01f1\n\u01f1\f\u01f1\u1f05\t\u01f1\u0001\u01f2\u0001\u01f2\u0001"+
		"\u01f3\u0001\u01f3\u0001\u01f3\u0005\u01f3\u1f0c\b\u01f3\n\u01f3\f\u01f3"+
		"\u1f0f\t\u01f3\u0001\u01f3\u0001\u01f3\u0003\u01f3\u1f13\b\u01f3\u0001"+
		"\u01f4\u0001\u01f4\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0005\u01f5\u1f1a"+
		"\b\u01f5\n\u01f5\f\u01f5\u1f1d\t\u01f5\u0001\u01f6\u0001\u01f6\u0001\u01f6"+
		"\u0005\u01f6\u1f22\b\u01f6\n\u01f6\f\u01f6\u1f25\t\u01f6\u0001\u01f7\u0001"+
		"\u01f7\u0001\u01f7\u0005\u01f7\u1f2a\b\u01f7\n\u01f7\f\u01f7\u1f2d\t\u01f7"+
		"\u0001\u01f8\u0001\u01f8\u0001\u01f8\u0003\u01f8\u1f32\b\u01f8\u0001\u01f9"+
		"\u0001\u01f9\u0001\u01f9\u0003\u01f9\u1f37\b\u01f9\u0001\u01fa\u0001\u01fa"+
		"\u0001\u01fa\u0003\u01fa\u1f3c\b\u01fa\u0001\u01fb\u0001\u01fb\u0003\u01fb"+
		"\u1f40\b\u01fb\u0001\u01fc\u0001\u01fc\u0001\u01fd\u0001\u01fd\u0003\u01fd"+
		"\u1f46\b\u01fd\u0001\u01fe\u0001\u01fe\u0003\u01fe\u1f4a\b\u01fe\u0001"+
		"\u01ff\u0001\u01ff\u0001\u01ff\u0003\u01ff\u1f4f\b\u01ff\u0001\u0200\u0001"+
		"\u0200\u0001\u0201\u0001\u0201\u0001\u0201\u0005\u0201\u1f56\b\u0201\n"+
		"\u0201\f\u0201\u1f59\t\u0201\u0001\u0202\u0001\u0202\u0001\u0203\u0001"+
		"\u0203\u0001\u0203\u0001\u0203\u0003\u0203\u1f61\b\u0203\u0001\u0204\u0001"+
		"\u0204\u0001\u0204\u0005\u0204\u1f66\b\u0204\n\u0204\f\u0204\u1f69\t\u0204"+
		"\u0001\u0205\u0001\u0205\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206"+
		"\u0001\u0206\u0001\u0206\u0001\u0206\u0003\u0206\u1f74\b\u0206\u0001\u0207"+
		"\u0001\u0207\u0003\u0207\u1f78\b\u0207\u0001\u0207\u0001\u0207\u0005\u0207"+
		"\u1f7c\b\u0207\n\u0207\f\u0207\u1f7f\t\u0207\u0001\u0207\u0001\u0207\u0003"+
		"\u0207\u1f83\b\u0207\u0001\u0208\u0001\u0208\u0001\u0208\u0003\u0208\u1f88"+
		"\b\u0208\u0003\u0208\u1f8a\b\u0208\u0001\u0208\u0001\u0208\u0001\u0208"+
		"\u0003\u0208\u1f8f\b\u0208\u0005\u0208\u1f91\b\u0208\n\u0208\f\u0208\u1f94"+
		"\t\u0208\u0001\u0208\u0001\u0208\u0003\u0208\u1f98\b\u0208\u0001\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1f9f\b\u0209"+
		"\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1fa4\b\u0209\u0003\u0209"+
		"\u1fa6\b\u0209\u0003\u0209\u1fa8\b\u0209\u0001\u0209\u0001\u0209\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003"+
		"\u0209\u1fb2\b\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1fb7"+
		"\b\u0209\u0005\u0209\u1fb9\b\u0209\n\u0209\f\u0209\u1fbc\t\u0209\u0003"+
		"\u0209\u1fbe\b\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u1fc2\b\u0209"+
		"\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020b\u0001\u020b\u0001\u020b"+
		"\u0001\u020b\u0003\u020b\u1fcb\b\u020b\u0001\u020b\u0001\u020b\u0001\u020c"+
		"\u0001\u020c\u0003\u020c\u1fd1\b\u020c\u0001\u020c\u0001\u020c\u0003\u020c"+
		"\u1fd5\b\u020c\u0003\u020c\u1fd7\b\u020c\u0001\u020d\u0001\u020d\u0003"+
		"\u020d\u1fdb\b\u020d\u0001\u020d\u0001\u020d\u0003\u020d\u1fdf\b\u020d"+
		"\u0001\u020d\u0001\u020d\u0003\u020d\u1fe3\b\u020d\u0001\u020d\u0001\u020d"+
		"\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020d\u0003\u020d\u1feb\b\u020d"+
		"\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020d\u0001\u020d"+
		"\u0003\u020d\u1ff3\b\u020d\u0003\u020d\u1ff5\b\u020d\u0001\u020e\u0001"+
		"\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u1ffb\b\u020e\u0001\u020e\u0003"+
		"\u020e\u1ffe\b\u020e\u0001\u020e\u0001\u020e\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0003"+
		"\u020f\u2016\b\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0003\u020f\u201d\b\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001"+
		"\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0003\u020f\u203e\b\u020f\u0001"+
		"\u0210\u0001\u0210\u0001\u0210\u0003\u0210\u2043\b\u0210\u0001\u0210\u0003"+
		"\u0210\u2046\b\u0210\u0001\u0210\u0001\u0210\u0001\u0210\u0003\u0210\u204b"+
		"\b\u0210\u0003\u0210\u204d\b\u0210\u0001\u0210\u0001\u0210\u0005\u0210"+
		"\u2051\b\u0210\n\u0210\f\u0210\u2054\t\u0210\u0001\u0211\u0001\u0211\u0001"+
		"\u0211\u0001\u0211\u0003\u0211\u205a\b\u0211\u0001\u0212\u0001\u0212\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2061\b\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2067\b\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u206d\b\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2073\b\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0003\u0213\u2078\b\u0213\u0003\u0213\u207a\b\u0213"+
		"\u0001\u0213\u0003\u0213\u207d\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213"+
		"\u2087\b\u0213\u0001\u0213\u0003\u0213\u208a\b\u0213\u0003\u0213\u208c"+
		"\b\u0213\u0003\u0213\u208e\b\u0213\u0001\u0213\u0001\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213"+
		"\u0001\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u209c\b\u0213\u0001\u0214"+
		"\u0001\u0214\u0001\u0215\u0001\u0215\u0001\u0215\u0001\u0216\u0001\u0216"+
		"\u0001\u0217\u0001\u0217\u0001\u0218\u0001\u0218\u0003\u0218\u20a9\b\u0218"+
		"\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219\u0001\u0219"+
		"\u0001\u0219\u0003\u0219\u20b2\b\u0219\u0001\u021a\u0001\u021a\u0001\u021a"+
		"\u0003\u021a\u20b7\b\u021a\u0001\u021b\u0001\u021b\u0001\u021b\u0003\u021b"+
		"\u20bc\b\u021b\u0001\u021c\u0001\u021c\u0001\u021c\u0003\u021c\u20c1\b"+
		"\u021c\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021d\u0001\u021e\u0001"+
		"\u021e\u0001\u021e\u0000\u0006\u0294\u02a0\u0344\u0356\u0366\u037c\u021f"+
		"\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a"+
		"\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322"+
		"\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a"+
		"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352"+
		"\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a"+
		"\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382"+
		"\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a"+
		"\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2"+
		"\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca"+
		"\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2"+
		"\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa"+
		"\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412"+
		"\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a"+
		"\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u0000q\u0001\u0000"+
		"\u0291\u0291\u0002\u0000de\u0115\u0115\u0001\u0000\u0241\u0242\u0002\u0000"+
		"66\u013f\u013f\u0002\u0000\u008b\u008b\u0099\u0099\u0003\u0000QQ\u00b2"+
		"\u00b2\u00bf\u00bf\u0002\u0000LL\u0086\u0086\u0002\u0000\u010c\u010c\u011d"+
		"\u011d\u0002\u0000\u009d\u009d\u0219\u0219\u0002\u0000\u0083\u0083\u00d8"+
		"\u00d8\u0007\u0000\u0085\u0085\u00ea\u00ea\u01a1\u01a1\u01cc\u01cc\u0215"+
		"\u0215\u0218\u0218\u0224\u0224\u0002\u0000))\u021e\u021e\u0002\u0000\u0150"+
		"\u0150\u01e4\u01e4\u0002\u0000\u00f4\u00f4\u0239\u0239\u0002\u0000\u0015"+
		"\u0015\u0088\u0088\u0003\u000000\u0100\u0100\u0211\u0211\u0002\u0000\u001f"+
		"\u001f\u01c9\u01c9\u0002\u0000\u0012\u0012\u0193\u0193\u0002\u0000\u00d1"+
		"\u00d1\u0119\u0119\u0002\u0000\u0085\u0085\u018d\u018d\u0002\u0000\u0080"+
		"\u0080\u00bf\u00bf\u0002\u0000\u014e\u014e\u01bb\u01bb\u0002\u0000\u021f"+
		"\u021f\u027f\u027f\u0003\u0000\u0080\u0080\u00fa\u00fa\u019d\u019d\u0003"+
		"\u0000\u0080\u0080\u00fa\u00fa\u0149\u0149\u0003\u0000\u00b4\u00b4\u0113"+
		"\u0113\u0144\u0144\u0002\u0000\u00c8\u00c8\u010c\u010c\u0002\u0000\u010f"+
		"\u010f\u022c\u022c\u0002\u0000\u014d\u014d\u01a8\u01a8\u0002\u0000\u0152"+
		"\u0152\u022b\u022b\u0002\u0000\u007f\u007f\u00fb\u00fb\u0003\u0000\u00d1"+
		"\u00d1\u0119\u0119\u0122\u0122\u0002\u0000\u010e\u010e\u01fe\u01fe\u0002"+
		"\u0000\u000b\u000b\u008c\u008c\u0002\u0000\u0091\u0091\u00fa\u00fa\u0002"+
		"\u0000\u0126\u0126\u0147\u0147\u0002\u0000\u0091\u0091\u01d4\u01d4\u0002"+
		"\u0000\u00c3\u00c3\u017d\u017d\u0002\u0000\u0014\u0014\u00f5\u00f5\u0002"+
		"\u0000\b\b\u0180\u0180\u0002\u0000\u00ce\u00ce\u0195\u0195\u0002\u0000"+
		"EE\u0169\u0169\u0003\u0000..\u0171\u0171\u01e6\u01e6\u0002\u0000\u0006"+
		"\u0006!!\u0003\u0000\u0085\u0085\u00ea\u00ea\u0224\u0224\u0003\u0000\u013b"+
		"\u013b\u0160\u0160\u0175\u0175\u0002\u0000\u00bf\u00bf\u022b\u022b\u0002"+
		"\u0000..\u01e6\u01e6\u0002\u0000\u0005\u0005\u0091\u0091\u0003\u0000\u0005"+
		"\u0005\u0091\u0091\u012d\u012d\u0003\u0000ll\u0168\u0168\u01e7\u01e7\u0002"+
		"\u0000\u011b\u011b\u0169\u0169\u0002\u0000\u0123\u0123\u01ee\u01ee\u0003"+
		"\u0000\u00b5\u00b5\u00ec\u00ec\u0170\u0170\u0002\u0000jj\u0084\u0084\u0004"+
		"\u0000\u00d9\u00d9\u00e9\u00e9\u0141\u0141\u016c\u016c\u0002\u0000\u0080"+
		"\u0080\u028e\u028e\u0001\u0000\u017e\u017f\u0001\u0001\u0291\u0291\u0001"+
		"\u0000\u01b0\u01b1\u0002\u0000\u0163\u0163\u0245\u0245\u0001\u0000XY\u0002"+
		"\u0000\u0153\u0153\u023a\u023a\u0002\u0000  \u00d8\u00d8\u0002\u00001"+
		"1\u0087\u0087\u0004\u0000\u00a3\u00a3\u00f0\u00f0\u0127\u0127\u021d\u021d"+
		"\u0003\u0000\t\t\u008e\u008e\u021e\u021e\u0003\u0000\u00c5\u00c5\u0101"+
		"\u0101\u01b6\u01b6\u0002\u0000\u01c5\u01c5\u0206\u0206\u0003\u0000\u01c5"+
		"\u01c5\u01e2\u01e2\u0206\u0206\u0002\u0000\u00a7\u00a7\u00da\u00da\u0002"+
		"\u0000hh\u01b9\u01b9\u0002\u0000\u00d6\u00d6\u00fa\u00fa\u0002\u0000\t"+
		"\t\u0225\u0225\u0002\u0000\u001c\u001c\u01cf\u01cf\u0002\u0000\u00b6\u00b6"+
		"\u00fe\u00fe\u0002\u0000\t\t\u00b6\u00b6\u0002\u0000\u01fd\u01fd\u0203"+
		"\u0203\u0002\u0000\u0123\u0123\u01f3\u01f3\u0002\u0000\u00d7\u00d7\u0106"+
		"\u0109\u0003\u0000\u0283\u0283\u0288\u0288\u028c\u028c\u0001\u0000\u0289"+
		"\u028a\u0002\u0000}}\u00dc\u00dc\u0004\u0000\t\t\u0010\u0010\u00aa\u00aa"+
		"\u01e3\u01e3\u0002\u0000;;\u024a\u024a\u0002\u0000\u008e\u008e\u021e\u021e"+
		"\u0002\u000088OO\u0002\u0000\u00b7\u00b7\u00ff\u00ff\u0002\u0000==\u0137"+
		"\u0137\u0002\u0000\u024b\u024b\u024e\u024e\u0002\u0000\u009e\u009e\u0143"+
		"\u0143\u0002\u0000\u00a2\u00a2\u0131\u0131\u0002\u0000[[\u008f\u008f\u0002"+
		"\u0000\u00d0\u00d0\u01d8\u01d8\u0001\u0000\u026a\u0279\u0001\u0000\u0263"+
		"\u0269\u0001\u0000\u025d\u0262\u0002\u0000\u0195\u0195\u01bd\u01bd\u0002"+
		"\u0000\u00bb\u00bb\u018a\u018a\u0002\u0000\u014f\u014f\u01c4\u01c4\u0002"+
		"\u0000\u016b\u016b\u01e8\u01e8\u0003\u0000\u00b0\u00b0\u01f9\u01f9\u023b"+
		"\u023b\u0002\u0000LL\u01b8\u01b8\u0003\u0000LL\u0149\u0149\u01b8\u01b8"+
		"\u0002\u0000\u0176\u0176\u01f4\u01f4\u0002\u0000\u00d6\u00d6\u01ab\u01ab"+
		"\u0002\u0000rr\u0259\u0259\u0002\u0000\u012e\u012e\u01c8\u01c8\u0002\u0000"+
		"44<<\u0004\u0000rr\u00d2\u00d2\u0128\u0128\u01c8\u01c8\u0001\u0000\u027f"+
		"\u0280\u0002\u0000\u027a\u027a\u0281\u0281\u0080\u0000\u0004\b\u000e\u000e"+
		"\u0013\u0013\u0016\u001d !$$&(+0224579;>AACGIIKMORTTWbghjoqvxy{}\u0081"+
		"\u0081\u0083\u0084\u0086\u0086\u0089\u008b\u008d\u008d\u008f\u0090\u0092"+
		"\u0095\u0098\u009a\u009d\u00a2\u00a4\u00a7\u00a9\u00a9\u00ab\u00ac\u00ae"+
		"\u00b0\u00b2\u00b2\u00b5\u00b7\u00ba\u00bc\u00be\u00bf\u00c5\u00c6\u00cd"+
		"\u00ce\u00d0\u00d0\u00d2\u00d2\u00d6\u00d6\u00d8\u00d8\u00da\u00dd\u00df"+
		"\u00df\u00e1\u00e3\u00e7\u00e9\u00ec\u00ef\u00f1\u00f1\u00f3\u00f3\u00f6"+
		"\u00fa\u00fd\u0101\u0103\u0103\u0105\u0105\u0107\u010c\u0111\u0112\u0114"+
		"\u0114\u0116\u0118\u011a\u011b\u011d\u011e\u0120\u0121\u0123\u0124\u0128"+
		"\u012a\u012c\u012e\u0130\u013b\u013d\u013e\u0141\u0143\u0149\u0149\u014f"+
		"\u014f\u0154\u0154\u0156\u015b\u015d\u015e\u0160\u0160\u0163\u0164\u0168"+
		"\u0168\u016a\u016e\u0170\u0171\u0173\u0178\u0180\u0180\u0182\u0183\u0186"+
		"\u018c\u0191\u0191\u0194\u0197\u0199\u0199\u019b\u019b\u019e\u01a0\u01a2"+
		"\u01a4\u01a7\u01a7\u01a9\u01ae\u01b0\u01b3\u01b5\u01ba\u01bc\u01be\u01c0"+
		"\u01c5\u01c8\u01c8\u01ca\u01cb\u01cd\u01cd\u01cf\u01d6\u01d8\u01d8\u01da"+
		"\u01e3\u01e6\u01e9\u01eb\u01ef\u01f2\u01f4\u01f6\u01f9\u01fb\u01fb\u01fe"+
		"\u01fe\u0205\u020d\u020f\u0216\u0218\u021c\u021f\u021f\u0221\u0221\u0225"+
		"\u0225\u0227\u0229\u022b\u022c\u022e\u0231\u0233\u0237\u023a\u023c\u023e"+
		"\u023e\u0240\u0240\u0242\u0245\u0247\u024e\u0250\u0254\u0256\u0257\u0259"+
		"\u0279\u02a4\u02a4\u253b\u0000\u043f\u0001\u0000\u0000\u0000\u0002\u0446"+
		"\u0001\u0000\u0000\u0000\u0004\u045c\u0001\u0000\u0000\u0000\u0006\u0460"+
		"\u0001\u0000\u0000\u0000\b\u0468\u0001\u0000\u0000\u0000\n\u0488\u0001"+
		"\u0000\u0000\u0000\f\u048a\u0001\u0000\u0000\u0000\u000e\u0497\u0001\u0000"+
		"\u0000\u0000\u0010\u0499\u0001\u0000\u0000\u0000\u0012\u049e\u0001\u0000"+
		"\u0000\u0000\u0014\u0505\u0001\u0000\u0000\u0000\u0016\u0507\u0001\u0000"+
		"\u0000\u0000\u0018\u054c\u0001\u0000\u0000\u0000\u001a\u0552\u0001\u0000"+
		"\u0000\u0000\u001c\u0556\u0001\u0000\u0000\u0000\u001e\u056e\u0001\u0000"+
		"\u0000\u0000 \u0570\u0001\u0000\u0000\u0000\"\u0584\u0001\u0000\u0000"+
		"\u0000$\u0593\u0001\u0000\u0000\u0000&\u059b\u0001\u0000\u0000\u0000("+
		"\u05ab\u0001\u0000\u0000\u0000*\u05af\u0001\u0000\u0000\u0000,\u05b4\u0001"+
		"\u0000\u0000\u0000.\u05b6\u0001\u0000\u0000\u00000\u05b8\u0001\u0000\u0000"+
		"\u00002\u05bf\u0001\u0000\u0000\u00004\u05c1\u0001\u0000\u0000\u00006"+
		"\u05d7\u0001\u0000\u0000\u00008\u05e6\u0001\u0000\u0000\u0000:\u05e8\u0001"+
		"\u0000\u0000\u0000<\u05f9\u0001\u0000\u0000\u0000>\u060d\u0001\u0000\u0000"+
		"\u0000@\u0613\u0001\u0000\u0000\u0000B\u067a\u0001\u0000\u0000\u0000D"+
		"\u067c\u0001\u0000\u0000\u0000F\u0684\u0001\u0000\u0000\u0000H\u06a9\u0001"+
		"\u0000\u0000\u0000J\u06ba\u0001\u0000\u0000\u0000L\u06bc\u0001\u0000\u0000"+
		"\u0000N\u06d4\u0001\u0000\u0000\u0000P\u06d6\u0001\u0000\u0000\u0000R"+
		"\u06db\u0001\u0000\u0000\u0000T\u06e4\u0001\u0000\u0000\u0000V\u0709\u0001"+
		"\u0000\u0000\u0000X\u070b\u0001\u0000\u0000\u0000Z\u0712\u0001\u0000\u0000"+
		"\u0000\\\u072b\u0001\u0000\u0000\u0000^\u0768\u0001\u0000\u0000\u0000"+
		"`\u0777\u0001\u0000\u0000\u0000b\u07b7\u0001\u0000\u0000\u0000d\u07b9"+
		"\u0001\u0000\u0000\u0000f\u07bb\u0001\u0000\u0000\u0000h\u07cc\u0001\u0000"+
		"\u0000\u0000j\u07d0\u0001\u0000\u0000\u0000l\u07d2\u0001\u0000\u0000\u0000"+
		"n\u07ea\u0001\u0000\u0000\u0000p\u07f3\u0001\u0000\u0000\u0000r\u0802"+
		"\u0001\u0000\u0000\u0000t\u0826\u0001\u0000\u0000\u0000v\u0852\u0001\u0000"+
		"\u0000\u0000x\u088a\u0001\u0000\u0000\u0000z\u088e\u0001\u0000\u0000\u0000"+
		"|\u08c9\u0001\u0000\u0000\u0000~\u08cb\u0001\u0000\u0000\u0000\u0080\u08e2"+
		"\u0001\u0000\u0000\u0000\u0082\u08f4\u0001\u0000\u0000\u0000\u0084\u08fb"+
		"\u0001\u0000\u0000\u0000\u0086\u0925\u0001\u0000\u0000\u0000\u0088\u0927"+
		"\u0001\u0000\u0000\u0000\u008a\u092d\u0001\u0000\u0000\u0000\u008c\u0940"+
		"\u0001\u0000\u0000\u0000\u008e\u0942\u0001\u0000\u0000\u0000\u0090\u0957"+
		"\u0001\u0000\u0000\u0000\u0092\u095d\u0001\u0000\u0000\u0000\u0094\u0965"+
		"\u0001\u0000\u0000\u0000\u0096\u0970\u0001\u0000\u0000\u0000\u0098\u0974"+
		"\u0001\u0000\u0000\u0000\u009a\u0995\u0001\u0000\u0000\u0000\u009c\u0999"+
		"\u0001\u0000\u0000\u0000\u009e\u09a2\u0001\u0000\u0000\u0000\u00a0\u09a4"+
		"\u0001\u0000\u0000\u0000\u00a2\u09bb\u0001\u0000\u0000\u0000\u00a4\u09bd"+
		"\u0001\u0000\u0000\u0000\u00a6\u09e2\u0001\u0000\u0000\u0000\u00a8\u09fa"+
		"\u0001\u0000\u0000\u0000\u00aa\u09fe\u0001\u0000\u0000\u0000\u00ac\u0a0e"+
		"\u0001\u0000\u0000\u0000\u00ae\u0a12\u0001\u0000\u0000\u0000\u00b0\u0a1a"+
		"\u0001\u0000\u0000\u0000\u00b2\u0a1e\u0001\u0000\u0000\u0000\u00b4\u0a2f"+
		"\u0001\u0000\u0000\u0000\u00b6\u0a33\u0001\u0000\u0000\u0000\u00b8\u0a3d"+
		"\u0001\u0000\u0000\u0000\u00ba\u0a46\u0001\u0000\u0000\u0000\u00bc\u0a5d"+
		"\u0001\u0000\u0000\u0000\u00be\u0a78\u0001\u0000\u0000\u0000\u00c0\u0a7c"+
		"\u0001\u0000\u0000\u0000\u00c2\u0a84\u0001\u0000\u0000\u0000\u00c4\u0a8b"+
		"\u0001\u0000\u0000\u0000\u00c6\u0a8f\u0001\u0000\u0000\u0000\u00c8\u0a9f"+
		"\u0001\u0000\u0000\u0000\u00ca\u0ac6\u0001\u0000\u0000\u0000\u00cc\u0af0"+
		"\u0001\u0000\u0000\u0000\u00ce\u0af4\u0001\u0000\u0000\u0000\u00d0\u0b02"+
		"\u0001\u0000\u0000\u0000\u00d2\u0b0c\u0001\u0000\u0000\u0000\u00d4\u0b0e"+
		"\u0001\u0000\u0000\u0000\u00d6\u0b38\u0001\u0000\u0000\u0000\u00d8\u0b47"+
		"\u0001\u0000\u0000\u0000\u00da\u0b5b\u0001\u0000\u0000\u0000\u00dc\u0b74"+
		"\u0001\u0000\u0000\u0000\u00de\u0b83\u0001\u0000\u0000\u0000\u00e0\u0b8b"+
		"\u0001\u0000\u0000\u0000\u00e2\u0bb4\u0001\u0000\u0000\u0000\u00e4\u0bbb"+
		"\u0001\u0000\u0000\u0000\u00e6\u0bc4\u0001\u0000\u0000\u0000\u00e8\u0be6"+
		"\u0001\u0000\u0000\u0000\u00ea\u0bee\u0001\u0000\u0000\u0000\u00ec\u0bf6"+
		"\u0001\u0000\u0000\u0000\u00ee\u0bfd\u0001\u0000\u0000\u0000\u00f0\u0bff"+
		"\u0001\u0000\u0000\u0000\u00f2\u0c17\u0001\u0000\u0000\u0000\u00f4\u0c3f"+
		"\u0001\u0000\u0000\u0000\u00f6\u0c50\u0001\u0000\u0000\u0000\u00f8\u0c66"+
		"\u0001\u0000\u0000\u0000\u00fa\u0c8e\u0001\u0000\u0000\u0000\u00fc\u0ca2"+
		"\u0001\u0000\u0000\u0000\u00fe\u0cb5\u0001\u0000\u0000\u0000\u0100\u0cbb"+
		"\u0001\u0000\u0000\u0000\u0102\u0cca\u0001\u0000\u0000\u0000\u0104\u0ce3"+
		"\u0001\u0000\u0000\u0000\u0106\u0ce8\u0001\u0000\u0000\u0000\u0108\u0cf3"+
		"\u0001\u0000\u0000\u0000\u010a\u0cf5\u0001\u0000\u0000\u0000\u010c\u0d3a"+
		"\u0001\u0000\u0000\u0000\u010e\u0d41\u0001\u0000\u0000\u0000\u0110\u0d4a"+
		"\u0001\u0000\u0000\u0000\u0112\u0d58\u0001\u0000\u0000\u0000\u0114\u0d9c"+
		"\u0001\u0000\u0000\u0000\u0116\u0dae\u0001\u0000\u0000\u0000\u0118\u0db8"+
		"\u0001\u0000\u0000\u0000\u011a\u0dcc\u0001\u0000\u0000\u0000\u011c\u0ddf"+
		"\u0001\u0000\u0000\u0000\u011e\u0e05\u0001\u0000\u0000\u0000\u0120\u0e07"+
		"\u0001\u0000\u0000\u0000\u0122\u0e17\u0001\u0000\u0000\u0000\u0124\u0e1d"+
		"\u0001\u0000\u0000\u0000\u0126\u0e27\u0001\u0000\u0000\u0000\u0128\u0e2f"+
		"\u0001\u0000\u0000\u0000\u012a\u0e35\u0001\u0000\u0000\u0000\u012c\u0e3d"+
		"\u0001\u0000\u0000\u0000\u012e\u0e41\u0001\u0000\u0000\u0000\u0130\u0e51"+
		"\u0001\u0000\u0000\u0000\u0132\u0e53\u0001\u0000\u0000\u0000\u0134\u0e67"+
		"\u0001\u0000\u0000\u0000\u0136\u0e6f\u0001\u0000\u0000\u0000\u0138\u0ea3"+
		"\u0001\u0000\u0000\u0000\u013a\u0ea5\u0001\u0000\u0000\u0000\u013c\u0ea7"+
		"\u0001\u0000\u0000\u0000\u013e\u0ea9\u0001\u0000\u0000\u0000\u0140\u0ebd"+
		"\u0001\u0000\u0000\u0000\u0142\u0ec3\u0001\u0000\u0000\u0000\u0144\u0ed0"+
		"\u0001\u0000\u0000\u0000\u0146\u0ed4\u0001\u0000\u0000\u0000\u0148\u0ef0"+
		"\u0001\u0000\u0000\u0000\u014a\u0f00\u0001\u0000\u0000\u0000\u014c\u0f10"+
		"\u0001\u0000\u0000\u0000\u014e\u0f26\u0001\u0000\u0000\u0000\u0150\u0f70"+
		"\u0001\u0000\u0000\u0000\u0152\u0f72\u0001\u0000\u0000\u0000\u0154\u0f7a"+
		"\u0001\u0000\u0000\u0000\u0156\u0f7c\u0001\u0000\u0000\u0000\u0158\u0f7e"+
		"\u0001\u0000\u0000\u0000\u015a\u0f86\u0001\u0000\u0000\u0000\u015c\u0f88"+
		"\u0001\u0000\u0000\u0000\u015e\u0fa9\u0001\u0000\u0000\u0000\u0160\u0fad"+
		"\u0001\u0000\u0000\u0000\u0162\u0fb1\u0001\u0000\u0000\u0000\u0164\u0fc7"+
		"\u0001\u0000\u0000\u0000\u0166\u0ff9\u0001\u0000\u0000\u0000\u0168\u0ffd"+
		"\u0001\u0000\u0000\u0000\u016a\u1015\u0001\u0000\u0000\u0000\u016c\u1019"+
		"\u0001\u0000\u0000\u0000\u016e\u1025\u0001\u0000\u0000\u0000\u0170\u1033"+
		"\u0001\u0000\u0000\u0000\u0172\u103a\u0001\u0000\u0000\u0000\u0174\u104e"+
		"\u0001\u0000\u0000\u0000\u0176\u1058\u0001\u0000\u0000\u0000\u0178\u1069"+
		"\u0001\u0000\u0000\u0000\u017a\u1081\u0001\u0000\u0000\u0000\u017c\u1083"+
		"\u0001\u0000\u0000\u0000\u017e\u1094\u0001\u0000\u0000\u0000\u0180\u10b7"+
		"\u0001\u0000\u0000\u0000\u0182\u10b9\u0001\u0000\u0000\u0000\u0184\u10bd"+
		"\u0001\u0000\u0000\u0000\u0186\u10d3\u0001\u0000\u0000\u0000\u0188\u10f6"+
		"\u0001\u0000\u0000\u0000\u018a\u10fa\u0001\u0000\u0000\u0000\u018c\u1111"+
		"\u0001\u0000\u0000\u0000\u018e\u1128\u0001\u0000\u0000\u0000\u0190\u1131"+
		"\u0001\u0000\u0000\u0000\u0192\u113a\u0001\u0000\u0000\u0000\u0194\u1143"+
		"\u0001\u0000\u0000\u0000\u0196\u1147\u0001\u0000\u0000\u0000\u0198\u114c"+
		"\u0001\u0000\u0000\u0000\u019a\u1164\u0001\u0000\u0000\u0000\u019c\u1166"+
		"\u0001\u0000\u0000\u0000\u019e\u116a\u0001\u0000\u0000\u0000\u01a0\u119e"+
		"\u0001\u0000\u0000\u0000\u01a2\u11ba\u0001\u0000\u0000\u0000\u01a4\u11bc"+
		"\u0001\u0000\u0000\u0000\u01a6\u11ca\u0001\u0000\u0000\u0000\u01a8\u11d6"+
		"\u0001\u0000\u0000\u0000\u01aa\u11db\u0001\u0000\u0000\u0000\u01ac\u11e1"+
		"\u0001\u0000\u0000\u0000\u01ae\u11e4\u0001\u0000\u0000\u0000\u01b0\u11ed"+
		"\u0001\u0000\u0000\u0000\u01b2\u11fa\u0001\u0000\u0000\u0000\u01b4\u120b"+
		"\u0001\u0000\u0000\u0000\u01b6\u121c\u0001\u0000\u0000\u0000\u01b8\u1224"+
		"\u0001\u0000\u0000\u0000\u01ba\u1229\u0001\u0000\u0000\u0000\u01bc\u1239"+
		"\u0001\u0000\u0000\u0000\u01be\u123d\u0001\u0000\u0000\u0000\u01c0\u1255"+
		"\u0001\u0000\u0000\u0000\u01c2\u1258\u0001\u0000\u0000\u0000\u01c4\u125e"+
		"\u0001\u0000\u0000\u0000\u01c6\u1268\u0001\u0000\u0000\u0000\u01c8\u1271"+
		"\u0001\u0000\u0000\u0000\u01ca\u128d\u0001\u0000\u0000\u0000\u01cc\u1293"+
		"\u0001\u0000\u0000\u0000\u01ce\u1296\u0001\u0000\u0000\u0000\u01d0\u129d"+
		"\u0001\u0000\u0000\u0000\u01d2\u12a5\u0001\u0000\u0000\u0000\u01d4\u12b1"+
		"\u0001\u0000\u0000\u0000\u01d6\u12b3\u0001\u0000\u0000\u0000\u01d8\u12b7"+
		"\u0001\u0000\u0000\u0000\u01da\u12bd\u0001\u0000\u0000\u0000\u01dc\u12d9"+
		"\u0001\u0000\u0000\u0000\u01de\u12fb\u0001\u0000\u0000\u0000\u01e0\u132b"+
		"\u0001\u0000\u0000\u0000\u01e2\u1335\u0001\u0000\u0000\u0000\u01e4\u1337"+
		"\u0001\u0000\u0000\u0000\u01e6\u133c\u0001\u0000\u0000\u0000\u01e8\u134a"+
		"\u0001\u0000\u0000\u0000\u01ea\u134c\u0001\u0000\u0000\u0000\u01ec\u1351"+
		"\u0001\u0000\u0000\u0000\u01ee\u1361\u0001\u0000\u0000\u0000\u01f0\u1382"+
		"\u0001\u0000\u0000\u0000\u01f2\u13a5\u0001\u0000\u0000\u0000\u01f4\u13a9"+
		"\u0001\u0000\u0000\u0000\u01f6\u13b8\u0001\u0000\u0000\u0000\u01f8\u13ba"+
		"\u0001\u0000\u0000\u0000\u01fa\u13bd\u0001\u0000\u0000\u0000\u01fc\u13c1"+
		"\u0001\u0000\u0000\u0000\u01fe\u13c9\u0001\u0000\u0000\u0000\u0200\u13e3"+
		"\u0001\u0000\u0000\u0000\u0202\u13e5\u0001\u0000\u0000\u0000\u0204\u13e9"+
		"\u0001\u0000\u0000\u0000\u0206\u13ec\u0001\u0000\u0000\u0000\u0208\u13f0"+
		"\u0001\u0000\u0000\u0000\u020a\u13f5\u0001\u0000\u0000\u0000\u020c\u13f9"+
		"\u0001\u0000\u0000\u0000\u020e\u140a\u0001\u0000\u0000\u0000\u0210\u1417"+
		"\u0001\u0000\u0000\u0000\u0212\u1428\u0001\u0000\u0000\u0000\u0214\u1435"+
		"\u0001\u0000\u0000\u0000\u0216\u1441\u0001\u0000\u0000\u0000\u0218\u1443"+
		"\u0001\u0000\u0000\u0000\u021a\u1451\u0001\u0000\u0000\u0000\u021c\u1462"+
		"\u0001\u0000\u0000\u0000\u021e\u147b\u0001\u0000\u0000\u0000\u0220\u1485"+
		"\u0001\u0000\u0000\u0000\u0222\u1489\u0001\u0000\u0000\u0000\u0224\u14ae"+
		"\u0001\u0000\u0000\u0000\u0226\u14b0\u0001\u0000\u0000\u0000\u0228\u14c9"+
		"\u0001\u0000\u0000\u0000\u022a\u14d4\u0001\u0000\u0000\u0000\u022c\u14db"+
		"\u0001\u0000\u0000\u0000\u022e\u14df\u0001\u0000\u0000\u0000\u0230\u14f1"+
		"\u0001\u0000\u0000\u0000\u0232\u14f9\u0001\u0000\u0000\u0000\u0234\u1504"+
		"\u0001\u0000\u0000\u0000\u0236\u150b\u0001\u0000\u0000\u0000\u0238\u150f"+
		"\u0001\u0000\u0000\u0000\u023a\u152f\u0001\u0000\u0000\u0000\u023c\u1533"+
		"\u0001\u0000\u0000\u0000\u023e\u1538\u0001\u0000\u0000\u0000\u0240\u1540"+
		"\u0001\u0000\u0000\u0000\u0242\u1548\u0001\u0000\u0000\u0000\u0244\u154b"+
		"\u0001\u0000\u0000\u0000\u0246\u155b\u0001\u0000\u0000\u0000\u0248\u1560"+
		"\u0001\u0000\u0000\u0000\u024a\u1564\u0001\u0000\u0000\u0000\u024c\u1588"+
		"\u0001\u0000\u0000\u0000\u024e\u158a\u0001\u0000\u0000\u0000\u0250\u15a0"+
		"\u0001\u0000\u0000\u0000\u0252\u15a2\u0001\u0000\u0000\u0000\u0254\u15a7"+
		"\u0001\u0000\u0000\u0000\u0256\u15a9\u0001\u0000\u0000\u0000\u0258\u15ab"+
		"\u0001\u0000\u0000\u0000\u025a\u15ad\u0001\u0000\u0000\u0000\u025c\u15b1"+
		"\u0001\u0000\u0000\u0000\u025e\u15b6\u0001\u0000\u0000\u0000\u0260\u15bc"+
		"\u0001\u0000\u0000\u0000\u0262\u15ca\u0001\u0000\u0000\u0000\u0264\u15de"+
		"\u0001\u0000\u0000\u0000\u0266\u15e3\u0001\u0000\u0000\u0000\u0268\u15f0"+
		"\u0001\u0000\u0000\u0000\u026a\u15f2\u0001\u0000\u0000\u0000\u026c\u1600"+
		"\u0001\u0000\u0000\u0000\u026e\u160a\u0001\u0000\u0000\u0000\u0270\u1610"+
		"\u0001\u0000\u0000\u0000\u0272\u1612\u0001\u0000\u0000\u0000\u0274\u1615"+
		"\u0001\u0000\u0000\u0000\u0276\u161a\u0001\u0000\u0000\u0000\u0278\u1632"+
		"\u0001\u0000\u0000\u0000\u027a\u1641\u0001\u0000\u0000\u0000\u027c\u1643"+
		"\u0001\u0000\u0000\u0000\u027e\u1658\u0001\u0000\u0000\u0000\u0280\u1667"+
		"\u0001\u0000\u0000\u0000\u0282\u167d\u0001\u0000\u0000\u0000\u0284\u1684"+
		"\u0001\u0000\u0000\u0000\u0286\u1691\u0001\u0000\u0000\u0000\u0288\u1694"+
		"\u0001\u0000\u0000\u0000\u028a\u16a9\u0001\u0000\u0000\u0000\u028c\u16ad"+
		"\u0001\u0000\u0000\u0000\u028e\u16b6\u0001\u0000\u0000\u0000\u0290\u16c7"+
		"\u0001\u0000\u0000\u0000\u0292\u16f2\u0001\u0000\u0000\u0000\u0294\u1708"+
		"\u0001\u0000\u0000\u0000\u0296\u1715\u0001\u0000\u0000\u0000\u0298\u1719"+
		"\u0001\u0000\u0000\u0000\u029a\u174d\u0001\u0000\u0000\u0000\u029c\u174f"+
		"\u0001\u0000\u0000\u0000\u029e\u1758\u0001\u0000\u0000\u0000\u02a0\u176f"+
		"\u0001\u0000\u0000\u0000\u02a2\u1782\u0001\u0000\u0000\u0000\u02a4\u1785"+
		"\u0001\u0000\u0000\u0000\u02a6\u1793\u0001\u0000\u0000\u0000\u02a8\u1796"+
		"\u0001\u0000\u0000\u0000\u02aa\u17ad\u0001\u0000\u0000\u0000\u02ac\u17af"+
		"\u0001\u0000\u0000\u0000\u02ae\u17c8\u0001\u0000\u0000\u0000\u02b0\u17ca"+
		"\u0001\u0000\u0000\u0000\u02b2\u17db\u0001\u0000\u0000\u0000\u02b4\u17e2"+
		"\u0001\u0000\u0000\u0000\u02b6\u17f1\u0001\u0000\u0000\u0000";
	private static final String _serializedATNSegment1 =
		"\u02b8\u1808\u0001\u0000\u0000\u0000\u02ba\u180e\u0001\u0000\u0000\u0000"+
		"\u02bc\u1810\u0001\u0000\u0000\u0000\u02be\u1828\u0001\u0000\u0000\u0000"+
		"\u02c0\u1840\u0001\u0000\u0000\u0000\u02c2\u1864\u0001\u0000\u0000\u0000"+
		"\u02c4\u1866\u0001\u0000\u0000\u0000\u02c6\u186a\u0001\u0000\u0000\u0000"+
		"\u02c8\u1877\u0001\u0000\u0000\u0000\u02ca\u1879\u0001\u0000\u0000\u0000"+
		"\u02cc\u1885\u0001\u0000\u0000\u0000\u02ce\u1895\u0001\u0000\u0000\u0000"+
		"\u02d0\u1897\u0001\u0000\u0000\u0000\u02d2\u189a\u0001\u0000\u0000\u0000"+
		"\u02d4\u18b4\u0001\u0000\u0000\u0000\u02d6\u18b6\u0001\u0000\u0000\u0000"+
		"\u02d8\u18ba\u0001\u0000\u0000\u0000\u02da\u18c9\u0001\u0000\u0000\u0000"+
		"\u02dc\u18d5\u0001\u0000\u0000\u0000\u02de\u18dd\u0001\u0000\u0000\u0000"+
		"\u02e0\u18e1\u0001\u0000\u0000\u0000\u02e2\u18ec\u0001\u0000\u0000\u0000"+
		"\u02e4\u18f1\u0001\u0000\u0000\u0000\u02e6\u18fe\u0001\u0000\u0000\u0000"+
		"\u02e8\u1912\u0001\u0000\u0000\u0000\u02ea\u191b\u0001\u0000\u0000\u0000"+
		"\u02ec\u191d\u0001\u0000\u0000\u0000\u02ee\u1924\u0001\u0000\u0000\u0000"+
		"\u02f0\u1929\u0001\u0000\u0000\u0000\u02f2\u1936\u0001\u0000\u0000\u0000"+
		"\u02f4\u193e\u0001\u0000\u0000\u0000\u02f6\u1946\u0001\u0000\u0000\u0000"+
		"\u02f8\u1954\u0001\u0000\u0000\u0000\u02fa\u1956\u0001\u0000\u0000\u0000"+
		"\u02fc\u1959\u0001\u0000\u0000\u0000\u02fe\u1968\u0001\u0000\u0000\u0000"+
		"\u0300\u1982\u0001\u0000\u0000\u0000\u0302\u1984\u0001\u0000\u0000\u0000"+
		"\u0304\u1992\u0001\u0000\u0000\u0000\u0306\u1997\u0001\u0000\u0000\u0000"+
		"\u0308\u19a9\u0001\u0000\u0000\u0000\u030a\u19ad\u0001\u0000\u0000\u0000"+
		"\u030c\u19b5\u0001\u0000\u0000\u0000\u030e\u19bf\u0001\u0000\u0000\u0000"+
		"\u0310\u19c7\u0001\u0000\u0000\u0000\u0312\u19cd\u0001\u0000\u0000\u0000"+
		"\u0314\u19d2\u0001\u0000\u0000\u0000\u0316\u19db\u0001\u0000\u0000\u0000"+
		"\u0318\u19f4\u0001\u0000\u0000\u0000\u031a\u1a07\u0001\u0000\u0000\u0000"+
		"\u031c\u1a0b\u0001\u0000\u0000\u0000\u031e\u1a0e\u0001\u0000\u0000\u0000"+
		"\u0320\u1a20\u0001\u0000\u0000\u0000\u0322\u1a25\u0001\u0000\u0000\u0000"+
		"\u0324\u1a38\u0001\u0000\u0000\u0000\u0326\u1a3a\u0001\u0000\u0000\u0000"+
		"\u0328\u1a4a\u0001\u0000\u0000\u0000\u032a\u1a52\u0001\u0000\u0000\u0000"+
		"\u032c\u1a57\u0001\u0000\u0000\u0000\u032e\u1a62\u0001\u0000\u0000\u0000"+
		"\u0330\u1a6d\u0001\u0000\u0000\u0000\u0332\u1a70\u0001\u0000\u0000\u0000"+
		"\u0334\u1a82\u0001\u0000\u0000\u0000\u0336\u1a84\u0001\u0000\u0000\u0000"+
		"\u0338\u1a93\u0001\u0000\u0000\u0000\u033a\u1a9e\u0001\u0000\u0000\u0000"+
		"\u033c\u1aac\u0001\u0000\u0000\u0000\u033e\u1ab1\u0001\u0000\u0000\u0000"+
		"\u0340\u1ab6\u0001\u0000\u0000\u0000\u0342\u1ac3\u0001\u0000\u0000\u0000"+
		"\u0344\u1acf\u0001\u0000\u0000\u0000\u0346\u1b09\u0001\u0000\u0000\u0000"+
		"\u0348\u1b26\u0001\u0000\u0000\u0000\u034a\u1b2a\u0001\u0000\u0000\u0000"+
		"\u034c\u1b32\u0001\u0000\u0000\u0000\u034e\u1b34\u0001\u0000\u0000\u0000"+
		"\u0350\u1b36\u0001\u0000\u0000\u0000\u0352\u1b39\u0001\u0000\u0000\u0000"+
		"\u0354\u1b3d\u0001\u0000\u0000\u0000\u0356\u1b45\u0001\u0000\u0000\u0000"+
		"\u0358\u1b7b\u0001\u0000\u0000\u0000\u035a\u1b7d\u0001\u0000\u0000\u0000"+
		"\u035c\u1b99\u0001\u0000\u0000\u0000\u035e\u1b9b\u0001\u0000\u0000\u0000"+
		"\u0360\u1bab\u0001\u0000\u0000\u0000\u0362\u1bae\u0001\u0000\u0000\u0000"+
		"\u0364\u1bb0\u0001\u0000\u0000\u0000\u0366\u1bde\u0001\u0000\u0000\u0000"+
		"\u0368\u1bec\u0001\u0000\u0000\u0000\u036a\u1bef\u0001\u0000\u0000\u0000"+
		"\u036c\u1c02\u0001\u0000\u0000\u0000\u036e\u1c0a\u0001\u0000\u0000\u0000"+
		"\u0370\u1c1c\u0001\u0000\u0000\u0000\u0372\u1c23\u0001\u0000\u0000\u0000"+
		"\u0374\u1c3a\u0001\u0000\u0000\u0000\u0376\u1c3c\u0001\u0000\u0000\u0000"+
		"\u0378\u1c40\u0001\u0000\u0000\u0000\u037a\u1c49\u0001\u0000\u0000\u0000"+
		"\u037c\u1d90\u0001\u0000\u0000\u0000\u037e\u1dac\u0001\u0000\u0000\u0000"+
		"\u0380\u1dae\u0001\u0000\u0000\u0000\u0382\u1db0\u0001\u0000\u0000\u0000"+
		"\u0384\u1db2\u0001\u0000\u0000\u0000\u0386\u1db4\u0001\u0000\u0000\u0000"+
		"\u0388\u1dc1\u0001\u0000\u0000\u0000\u038a\u1dca\u0001\u0000\u0000\u0000"+
		"\u038c\u1dd3\u0001\u0000\u0000\u0000\u038e\u1dd5\u0001\u0000\u0000\u0000"+
		"\u0390\u1de6\u0001\u0000\u0000\u0000\u0392\u1dec\u0001\u0000\u0000\u0000"+
		"\u0394\u1df7\u0001\u0000\u0000\u0000\u0396\u1df9\u0001\u0000\u0000\u0000"+
		"\u0398\u1e0d\u0001\u0000\u0000\u0000\u039a\u1e1b\u0001\u0000\u0000\u0000"+
		"\u039c\u1e2d\u0001\u0000\u0000\u0000\u039e\u1e42\u0001\u0000\u0000\u0000"+
		"\u03a0\u1e4f\u0001\u0000\u0000\u0000\u03a2\u1e52\u0001\u0000\u0000\u0000"+
		"\u03a4\u1e5b\u0001\u0000\u0000\u0000\u03a6\u1e61\u0001\u0000\u0000\u0000"+
		"\u03a8\u1e69\u0001\u0000\u0000\u0000\u03aa\u1e6c\u0001\u0000\u0000\u0000"+
		"\u03ac\u1e77\u0001\u0000\u0000\u0000\u03ae\u1e7f\u0001\u0000\u0000\u0000"+
		"\u03b0\u1e81\u0001\u0000\u0000\u0000\u03b2\u1e8a\u0001\u0000\u0000\u0000"+
		"\u03b4\u1e93\u0001\u0000\u0000\u0000\u03b6\u1e95\u0001\u0000\u0000\u0000"+
		"\u03b8\u1e9b\u0001\u0000\u0000\u0000\u03ba\u1e9d\u0001\u0000\u0000\u0000"+
		"\u03bc\u1eab\u0001\u0000\u0000\u0000\u03be\u1eae\u0001\u0000\u0000\u0000"+
		"\u03c0\u1eb4\u0001\u0000\u0000\u0000\u03c2\u1eb6\u0001\u0000\u0000\u0000"+
		"\u03c4\u1ebb\u0001\u0000\u0000\u0000\u03c6\u1ed3\u0001\u0000\u0000\u0000"+
		"\u03c8\u1ed7\u0001\u0000\u0000\u0000\u03ca\u1ed9\u0001\u0000\u0000\u0000"+
		"\u03cc\u1edb\u0001\u0000\u0000\u0000\u03ce\u1edd\u0001\u0000\u0000\u0000"+
		"\u03d0\u1edf\u0001\u0000\u0000\u0000\u03d2\u1ee1\u0001\u0000\u0000\u0000"+
		"\u03d4\u1ee3\u0001\u0000\u0000\u0000\u03d6\u1ee5\u0001\u0000\u0000\u0000"+
		"\u03d8\u1ef1\u0001\u0000\u0000\u0000\u03da\u1ef3\u0001\u0000\u0000\u0000"+
		"\u03dc\u1ef8\u0001\u0000\u0000\u0000\u03de\u1efa\u0001\u0000\u0000\u0000"+
		"\u03e0\u1efc\u0001\u0000\u0000\u0000\u03e2\u1efe\u0001\u0000\u0000\u0000"+
		"\u03e4\u1f06\u0001\u0000\u0000\u0000\u03e6\u1f08\u0001\u0000\u0000\u0000"+
		"\u03e8\u1f14\u0001\u0000\u0000\u0000\u03ea\u1f16\u0001\u0000\u0000\u0000"+
		"\u03ec\u1f1e\u0001\u0000\u0000\u0000\u03ee\u1f26\u0001\u0000\u0000\u0000"+
		"\u03f0\u1f2e\u0001\u0000\u0000\u0000\u03f2\u1f33\u0001\u0000\u0000\u0000"+
		"\u03f4\u1f38\u0001\u0000\u0000\u0000\u03f6\u1f3f\u0001\u0000\u0000\u0000"+
		"\u03f8\u1f41\u0001\u0000\u0000\u0000\u03fa\u1f45\u0001\u0000\u0000\u0000"+
		"\u03fc\u1f49\u0001\u0000\u0000\u0000\u03fe\u1f4b\u0001\u0000\u0000\u0000"+
		"\u0400\u1f50\u0001\u0000\u0000\u0000\u0402\u1f52\u0001\u0000\u0000\u0000"+
		"\u0404\u1f5a\u0001\u0000\u0000\u0000\u0406\u1f5c\u0001\u0000\u0000\u0000"+
		"\u0408\u1f62\u0001\u0000\u0000\u0000\u040a\u1f6a\u0001\u0000\u0000\u0000"+
		"\u040c\u1f6c\u0001\u0000\u0000\u0000\u040e\u1f75\u0001\u0000\u0000\u0000"+
		"\u0410\u1f84\u0001\u0000\u0000\u0000\u0412\u1f99\u0001\u0000\u0000\u0000"+
		"\u0414\u1fc3\u0001\u0000\u0000\u0000\u0416\u1fca\u0001\u0000\u0000\u0000"+
		"\u0418\u1fd6\u0001\u0000\u0000\u0000\u041a\u1ff4\u0001\u0000\u0000\u0000"+
		"\u041c\u1ff6\u0001\u0000\u0000\u0000\u041e\u203d\u0001\u0000\u0000\u0000"+
		"\u0420\u2042\u0001\u0000\u0000\u0000\u0422\u2059\u0001\u0000\u0000\u0000"+
		"\u0424\u205b\u0001\u0000\u0000\u0000\u0426\u209b\u0001\u0000\u0000\u0000"+
		"\u0428\u209d\u0001\u0000\u0000\u0000\u042a\u209f\u0001\u0000\u0000\u0000"+
		"\u042c\u20a2\u0001\u0000\u0000\u0000\u042e\u20a4\u0001\u0000\u0000\u0000"+
		"\u0430\u20a8\u0001\u0000\u0000\u0000\u0432\u20b1\u0001\u0000\u0000\u0000"+
		"\u0434\u20b6\u0001\u0000\u0000\u0000\u0436\u20bb\u0001\u0000\u0000\u0000"+
		"\u0438\u20c0\u0001\u0000\u0000\u0000\u043a\u20c2\u0001\u0000\u0000\u0000"+
		"\u043c\u20c6\u0001\u0000\u0000\u0000\u043e\u0440\b\u0000\u0000\u0000\u043f"+
		"\u043e\u0001\u0000\u0000\u0000\u0440\u0441\u0001\u0000\u0000\u0000\u0441"+
		"\u043f\u0001\u0000\u0000\u0000\u0441\u0442\u0001\u0000\u0000\u0000\u0442"+
		"\u0001\u0001\u0000\u0000\u0000\u0443\u0445\u0003\b\u0004\u0000\u0444\u0443"+
		"\u0001\u0000\u0000\u0000\u0445\u0448\u0001\u0000\u0000\u0000\u0446\u0444"+
		"\u0001\u0000\u0000\u0000\u0446\u0447\u0001\u0000\u0000\u0000\u0447\u0449"+
		"\u0001\u0000\u0000\u0000\u0448\u0446\u0001\u0000\u0000\u0000\u0449\u044a"+
		"\u0005\u0000\u0000\u0001\u044a\u0003\u0001\u0000\u0000\u0000\u044b\u044e"+
		"\u0003\b\u0004\u0000\u044c\u044e\u0003\u03ae\u01d7\u0000\u044d\u044b\u0001"+
		"\u0000\u0000\u0000\u044d\u044c\u0001\u0000\u0000\u0000\u044e\u0456\u0001"+
		"\u0000\u0000\u0000\u044f\u0452\u0005\u0291\u0000\u0000\u0450\u0453\u0003"+
		"\b\u0004\u0000\u0451\u0453\u0003\u03ae\u01d7\u0000\u0452\u0450\u0001\u0000"+
		"\u0000\u0000\u0452\u0451\u0001\u0000\u0000\u0000\u0453\u0455\u0001\u0000"+
		"\u0000\u0000\u0454\u044f\u0001\u0000\u0000\u0000\u0455\u0458\u0001\u0000"+
		"\u0000\u0000\u0456\u0454\u0001\u0000\u0000\u0000\u0456\u0457\u0001\u0000"+
		"\u0000\u0000\u0457\u045a\u0001\u0000\u0000\u0000\u0458\u0456\u0001\u0000"+
		"\u0000\u0000\u0459\u045b\u0005\u0291\u0000\u0000\u045a\u0459\u0001\u0000"+
		"\u0000\u0000\u045a\u045b\u0001\u0000\u0000\u0000\u045b\u045d\u0001\u0000"+
		"\u0000\u0000\u045c\u044d\u0001\u0000\u0000\u0000\u045c\u045d\u0001\u0000"+
		"\u0000\u0000\u045d\u045e\u0001\u0000\u0000\u0000\u045e\u045f\u0005\u0000"+
		"\u0000\u0001\u045f\u0005\u0001\u0000\u0000\u0000\u0460\u0462\u0005\u00ac"+
		"\u0000\u0000\u0461\u0463\u0005\u000e\u0000\u0000\u0462\u0461\u0001\u0000"+
		"\u0000\u0000\u0462\u0463\u0001\u0000\u0000\u0000\u0463\u0465\u0001\u0000"+
		"\u0000\u0000\u0464\u0466\u0005\u0234\u0000\u0000\u0465\u0464\u0001\u0000"+
		"\u0000\u0000\u0465\u0466\u0001\u0000\u0000\u0000\u0466\u0007\u0001\u0000"+
		"\u0000\u0000\u0467\u0469\u0003\u0006\u0003\u0000\u0468\u0467\u0001\u0000"+
		"\u0000\u0000\u0468\u0469\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000"+
		"\u0000\u0000\u046a\u046b\u0003\n\u0005\u0000\u046b\t\u0001\u0000\u0000"+
		"\u0000\u046c\u0489\u0003\u0162\u00b1\u0000\u046d\u0489\u0003\u0172\u00b9"+
		"\u0000\u046e\u0489\u0003\u0184\u00c2\u0000\u046f\u0489\u0003\u01fc\u00fe"+
		"\u0000\u0470\u0489\u0003\u018a\u00c5\u0000\u0471\u0489\u0003\u01b0\u00d8"+
		"\u0000\u0472\u0489\u0003\u0118\u008c\u0000\u0473\u0489\u0003\u0018\f\u0000"+
		"\u0474\u0489\u0003\u0164\u00b2\u0000\u0475\u0489\u0003\u0186\u00c3\u0000"+
		"\u0476\u0489\u0003\u0174\u00ba\u0000\u0477\u0489\u0003\"\u0011\u0000\u0478"+
		"\u0489\u0003t:\u0000\u0479\u0489\u0003\u001c\u000e\u0000\u047a\u0489\u0003"+
		"\u0012\t\u0000\u047b\u0489\u0003\u0010\b\u0000\u047c\u0489\u0003\u01fe"+
		"\u00ff\u0000\u047d\u0489\u0003\u018c\u00c6\u0000\u047e\u0489\u0003\u01c4"+
		"\u00e2\u0000\u047f\u0489\u0003\f\u0006\u0000\u0480\u0489\u0003\u0160\u00b0"+
		"\u0000\u0481\u0489\u0003\u0170\u00b8\u0000\u0482\u0489\u0003\u0182\u00c1"+
		"\u0000\u0483\u0489\u0003\u01fa\u00fd\u0000\u0484\u0489\u0003\u0188\u00c4"+
		"\u0000\u0485\u0489\u0003\u01ae\u00d7\u0000\u0486\u0489\u0003\u026e\u0137"+
		"\u0000\u0487\u0489\u0003\u0116\u008b\u0000\u0488\u046c\u0001\u0000\u0000"+
		"\u0000\u0488\u046d\u0001\u0000\u0000\u0000\u0488\u046e\u0001\u0000\u0000"+
		"\u0000\u0488\u046f\u0001\u0000\u0000\u0000\u0488\u0470\u0001\u0000\u0000"+
		"\u0000\u0488\u0471\u0001\u0000\u0000\u0000\u0488\u0472\u0001\u0000\u0000"+
		"\u0000\u0488\u0473\u0001\u0000\u0000\u0000\u0488\u0474\u0001\u0000\u0000"+
		"\u0000\u0488\u0475\u0001\u0000\u0000\u0000\u0488\u0476\u0001\u0000\u0000"+
		"\u0000\u0488\u0477\u0001\u0000\u0000\u0000\u0488\u0478\u0001\u0000\u0000"+
		"\u0000\u0488\u0479\u0001\u0000\u0000\u0000\u0488\u047a\u0001\u0000\u0000"+
		"\u0000\u0488\u047b\u0001\u0000\u0000\u0000\u0488\u047c\u0001\u0000\u0000"+
		"\u0000\u0488\u047d\u0001\u0000\u0000\u0000\u0488\u047e\u0001\u0000\u0000"+
		"\u0000\u0488\u047f\u0001\u0000\u0000\u0000\u0488\u0480\u0001\u0000\u0000"+
		"\u0000\u0488\u0481\u0001\u0000\u0000\u0000\u0488\u0482\u0001\u0000\u0000"+
		"\u0000\u0488\u0483\u0001\u0000\u0000\u0000\u0488\u0484\u0001\u0000\u0000"+
		"\u0000\u0488\u0485\u0001\u0000\u0000\u0000\u0488\u0486\u0001\u0000\u0000"+
		"\u0000\u0488\u0487\u0001\u0000\u0000\u0000\u0489\u000b\u0001\u0000\u0000"+
		"\u0000\u048a\u048b\u0005c\u0000\u0000\u048b\u048c\u0005\u01b7\u0000\u0000"+
		"\u048c\u0495\u0003\u0404\u0202\u0000\u048d\u048f\u0005\u0241\u0000\u0000"+
		"\u048e\u048d\u0001\u0000\u0000\u0000\u048e\u048f\u0001\u0000\u0000\u0000"+
		"\u048f\u0491\u0001\u0000\u0000\u0000\u0490\u0492\u0003\u000e\u0007\u0000"+
		"\u0491\u0490\u0001\u0000\u0000\u0000\u0492\u0493\u0001\u0000\u0000\u0000"+
		"\u0493\u0491\u0001\u0000\u0000\u0000\u0493\u0494\u0001\u0000\u0000\u0000"+
		"\u0494\u0496\u0001\u0000\u0000\u0000\u0495\u048e\u0001\u0000\u0000\u0000"+
		"\u0495\u0496\u0001\u0000\u0000\u0000\u0496\r\u0001\u0000\u0000\u0000\u0497"+
		"\u0498\u0007\u0001\u0000\u0000\u0498\u000f\u0001\u0000\u0000\u0000\u0499"+
		"\u049a\u0005\u01a3\u0000\u0000\u049a\u049b\u0005\u015a\u0000\u0000\u049b"+
		"\u049c\u0005\u0237\u0000\u0000\u049c\u049d\u0003\u0406\u0203\u0000\u049d"+
		"\u0011\u0001\u0000\u0000\u0000\u049e\u049f\u0005c\u0000\u0000\u049f\u04a0"+
		"\u0005\u015a\u0000\u0000\u04a0\u04a1\u0005\u0237\u0000\u0000\u04a1\u04a4"+
		"\u0003\u0406\u0203\u0000\u04a2\u04a3\u0005\u015c\u0000\u0000\u04a3\u04a5"+
		"\u0003\u03ea\u01f5\u0000\u04a4\u04a2\u0001\u0000\u0000\u0000\u04a4\u04a5"+
		"\u0001\u0000\u0000\u0000\u04a5\u04ba\u0001\u0000\u0000\u0000\u04a6\u04a7"+
		"\u0005\u0162\u0000\u0000\u04a7\u04a8\u0005\u0189\u0000\u0000\u04a8\u04ac"+
		"\u0005\u01fd\u0000\u0000\u04a9\u04aa\u0007\u0002\u0000\u0000\u04aa\u04ab"+
		"\u0005\u019e\u0000\u0000\u04ab\u04ad\u0005\u018b\u0000\u0000\u04ac\u04a9"+
		"\u0001\u0000\u0000\u0000\u04ac\u04ad\u0001\u0000\u0000\u0000\u04ad\u04bb"+
		"\u0001\u0000\u0000\u0000\u04ae\u04b0\u0003\u0090H\u0000\u04af\u04ae\u0001"+
		"\u0000\u0000\u0000\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u04b2\u0001"+
		"\u0000\u0000\u0000\u04b1\u04b3\u0007\u0003\u0000\u0000\u04b2\u04b1\u0001"+
		"\u0000\u0000\u0000\u04b2\u04b3\u0001\u0000\u0000\u0000\u04b3\u04b5\u0001"+
		"\u0000\u0000\u0000\u04b4\u04b6\u00032\u0019\u0000\u04b5\u04b4\u0001\u0000"+
		"\u0000\u0000\u04b5\u04b6\u0001\u0000\u0000\u0000\u04b6\u04b8\u0001\u0000"+
		"\u0000\u0000\u04b7\u04b9\u0003\u0016\u000b\u0000\u04b8\u04b7\u0001\u0000"+
		"\u0000\u0000\u04b8\u04b9\u0001\u0000\u0000\u0000\u04b9\u04bb\u0001\u0000"+
		"\u0000\u0000\u04ba\u04a6\u0001\u0000\u0000\u0000\u04ba\u04af\u0001\u0000"+
		"\u0000\u0000\u04bb\u04cd\u0001\u0000\u0000\u0000\u04bc\u04bd\u0005\u022a"+
		"\u0000\u0000\u04bd\u04c7\u0005\u00de\u0000\u0000\u04be\u04c2\u0003\u0096"+
		"K\u0000\u04bf\u04c0\u0005\u01ff\u0000\u0000\u04c0\u04c2\u0003\u0430\u0218"+
		"\u0000\u04c1\u04be\u0001\u0000\u0000\u0000\u04c1\u04bf\u0001\u0000\u0000"+
		"\u0000\u04c2\u04c3\u0001\u0000\u0000\u0000\u04c3\u04c1\u0001\u0000\u0000"+
		"\u0000\u04c3\u04c4\u0001\u0000\u0000\u0000\u04c4\u04c6\u0001\u0000\u0000"+
		"\u0000\u04c5\u04c1\u0001\u0000\u0000\u0000\u04c6\u04c9\u0001\u0000\u0000"+
		"\u0000\u04c7\u04c5\u0001\u0000\u0000\u0000\u04c7\u04c8\u0001\u0000\u0000"+
		"\u0000\u04c8\u04ce\u0001\u0000\u0000\u0000\u04c9\u04c7\u0001\u0000\u0000"+
		"\u0000\u04ca\u04cb\u0005\u022a\u0000\u0000\u04cb\u04cc\u0005\u013d\u0000"+
		"\u0000\u04cc\u04ce\u0005\u00de\u0000\u0000\u04cd\u04bc\u0001\u0000\u0000"+
		"\u0000\u04cd\u04ca\u0001\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000\u0000"+
		"\u0000\u04ce\u04d0\u0001\u0000\u0000\u0000\u04cf\u04d1\u0003\u0014\n\u0000"+
		"\u04d0\u04cf\u0001\u0000\u0000\u0000\u04d0\u04d1\u0001\u0000\u0000\u0000"+
		"\u04d1\u04d4\u0001\u0000\u0000\u0000\u04d2\u04d3\u0005\u00bd\u0000\u0000"+
		"\u04d3\u04d5\u0005\u0224\u0000\u0000\u04d4\u04d2\u0001\u0000\u0000\u0000"+
		"\u04d4\u04d5\u0001\u0000\u0000\u0000\u04d5\u04d9\u0001\u0000\u0000\u0000"+
		"\u04d6\u04d7\u0007\u0004\u0000\u0000\u04d7\u04d8\u0005\u0193\u0000\u0000"+
		"\u04d8\u04da\u0005\u01b5\u0000\u0000\u04d9\u04d6\u0001\u0000\u0000\u0000"+
		"\u04d9\u04da\u0001\u0000\u0000\u0000\u04da\u04db\u0001\u0000\u0000\u0000"+
		"\u04db\u04dc\u0005\u0014\u0000\u0000\u04dc\u04dd\u0003\u0294\u014a\u0000"+
		"\u04dd\u0013\u0001\u0000\u0000\u0000\u04de\u04df\u0005\u013a\u0000\u0000"+
		"\u04df\u0506\u0005\u01a3\u0000\u0000\u04e0\u0501\u0005\u01a3\u0000\u0000"+
		"\u04e1\u0502\u0007\u0005\u0000\u0000\u04e2\u04e3\u0005\u0162\u0000\u0000"+
		"\u04e3\u0502\u0007\u0006\u0000\u0000\u04e4\u04e5\u0005\u01ea\u0000\u0000"+
		"\u04e5\u04e8\u0005\u0241\u0000\u0000\u04e6\u04e8\u0005\u013c\u0000\u0000"+
		"\u04e7\u04e4\u0001\u0000\u0000\u0000\u04e7\u04e6\u0001\u0000\u0000\u0000"+
		"\u04e8\u0502\u0001\u0000\u0000\u0000\u04e9\u04ed\u0005\u0241\u0000\u0000"+
		"\u04ea\u04eb\u0005\u018e\u0000\u0000\u04eb\u04ee\u0005\u00fc\u0000\u0000"+
		"\u04ec\u04ee\u0005\u01bc\u0000\u0000\u04ed\u04ea\u0001\u0000\u0000\u0000"+
		"\u04ed\u04ec\u0001\u0000\u0000\u0000\u04ee\u0502\u0001\u0000\u0000\u0000"+
		"\u04ef\u04fc\u0005\u022a\u0000\u0000\u04f0\u04f2\u0005\u0080\u0000\u0000"+
		"\u04f1\u04f3\u0007\u0007\u0000\u0000\u04f2\u04f1\u0001\u0000\u0000\u0000"+
		"\u04f2\u04f3\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000"+
		"\u04f4\u04f5\u0005\u01b8\u0000\u0000\u04f5\u04fd\u0005\u01cb\u0000\u0000"+
		"\u04f6\u04f8\u0007\u0007\u0000\u0000\u04f7\u04f6\u0001\u0000\u0000\u0000"+
		"\u04f7\u04f8\u0001\u0000\u0000\u0000\u04f8\u04f9\u0001\u0000\u0000\u0000"+
		"\u04f9\u04fa\u0005\u01b8\u0000\u0000\u04fa\u04fb\u0005\u01cb\u0000\u0000"+
		"\u04fb\u04fd\u0005\u02a4\u0000\u0000\u04fc\u04f0\u0001\u0000\u0000\u0000"+
		"\u04fc\u04f7\u0001\u0000\u0000\u0000\u04fd\u0502\u0001\u0000\u0000\u0000"+
		"\u04fe\u04ff\u0005\u022a\u0000\u0000\u04ff\u0500\u0007\b\u0000\u0000\u0500"+
		"\u0502\u0005Y\u0000\u0000\u0501\u04e1\u0001\u0000\u0000\u0000\u0501\u04e2"+
		"\u0001\u0000\u0000\u0000\u0501\u04e7\u0001\u0000\u0000\u0000\u0501\u04e9"+
		"\u0001\u0000\u0000\u0000\u0501\u04ef\u0001\u0000\u0000\u0000\u0501\u04fe"+
		"\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u0501"+
		"\u0001\u0000\u0000\u0000\u0503\u0504\u0001\u0000\u0000\u0000\u0504\u0506"+
		"\u0001\u0000\u0000\u0000\u0505\u04de\u0001\u0000\u0000\u0000\u0505\u04e0"+
		"\u0001\u0000\u0000\u0000\u0506\u0015\u0001\u0000\u0000\u0000\u0507\u0508"+
		"\u0005+\u0000\u0000\u0508\u0509\u0007\t\u0000\u0000\u0509\u0017\u0001"+
		"\u0000\u0000\u0000\u050a\u050b\u0005\u01b4\u0000\u0000\u050b\u050c\u0003"+
		"\u001a\r\u0000\u050c\u050e\u0005\u0162\u0000\u0000\u050d\u050f\u0005\u01fd"+
		"\u0000\u0000\u050e\u050d\u0001\u0000\u0000\u0000\u050e\u050f\u0001\u0000"+
		"\u0000\u0000\u050f\u0510\u0001\u0000\u0000\u0000\u0510\u0511\u0003\u0406"+
		"\u0203\u0000\u0511\u0513\u0005\u00c4\u0000\u0000\u0512\u0514\u0005\u00cb"+
		"\u0000\u0000\u0513\u0512\u0001\u0000\u0000\u0000\u0513\u0514\u0001\u0000"+
		"\u0000\u0000\u0514\u0517\u0001\u0000\u0000\u0000\u0515\u0518\u0005\u0191"+
		"\u0000\u0000\u0516\u0518\u0003\u0404\u0202\u0000\u0517\u0515\u0001\u0000"+
		"\u0000\u0000\u0517\u0516\u0001\u0000\u0000\u0000\u0518\u054d\u0001\u0000"+
		"\u0000\u0000\u0519\u051a\u0005\u00ca\u0000\u0000\u051a\u051b\u0003\u001a"+
		"\r\u0000\u051b\u051d\u0005\u0162\u0000\u0000\u051c\u051e\u0005\u01fd\u0000"+
		"\u0000\u051d\u051c\u0001\u0000\u0000\u0000\u051d\u051e\u0001\u0000\u0000"+
		"\u0000\u051e\u051f\u0001\u0000\u0000\u0000\u051f\u0520\u0003\u0406\u0203"+
		"\u0000\u0520\u0522\u0005\u020e\u0000\u0000\u0521\u0523\u0005\u00cb\u0000"+
		"\u0000\u0522\u0521\u0001\u0000\u0000\u0000\u0522\u0523\u0001\u0000\u0000"+
		"\u0000\u0523\u0526\u0001\u0000\u0000\u0000\u0524\u0527\u0005\u0191\u0000"+
		"\u0000\u0525\u0527\u0003\u0404\u0202\u0000\u0526\u0524\u0001\u0000\u0000"+
		"\u0000\u0526\u0525\u0001\u0000\u0000\u0000\u0527\u054d\u0001\u0000\u0000"+
		"\u0000\u0528\u0529\u0005\u00ca\u0000\u0000\u0529\u052e\u0003\u0404\u0202"+
		"\u0000\u052a\u052b\u0005\u028b\u0000\u0000\u052b\u052d\u0003\u0404\u0202"+
		"\u0000\u052c\u052a\u0001\u0000\u0000\u0000\u052d\u0530\u0001\u0000\u0000"+
		"\u0000\u052e\u052c\u0001\u0000\u0000\u0000\u052e\u052f\u0001\u0000\u0000"+
		"\u0000\u052f\u0531\u0001\u0000\u0000\u0000\u0530\u052e\u0001\u0000\u0000"+
		"\u0000\u0531\u0532\u0005\u020e\u0000\u0000\u0532\u0537\u0003\u0404\u0202"+
		"\u0000\u0533\u0534\u0005\u028b\u0000\u0000\u0534\u0536\u0003\u0404\u0202"+
		"\u0000\u0535\u0533\u0001\u0000\u0000\u0000\u0536\u0539\u0001\u0000\u0000"+
		"\u0000\u0537\u0535\u0001\u0000\u0000\u0000\u0537\u0538\u0001\u0000\u0000"+
		"\u0000\u0538\u054d\u0001\u0000\u0000\u0000\u0539\u0537\u0001\u0000\u0000"+
		"\u0000\u053a\u053b\u0005\u01b4\u0000\u0000\u053b\u0540\u0003\u0404\u0202"+
		"\u0000\u053c\u053d\u0005\u028b\u0000\u0000\u053d\u053f\u0003\u0404\u0202"+
		"\u0000\u053e\u053c\u0001\u0000\u0000\u0000\u053f\u0542\u0001\u0000\u0000"+
		"\u0000\u0540\u053e\u0001\u0000\u0000\u0000\u0540\u0541\u0001\u0000\u0000"+
		"\u0000\u0541\u0543\u0001\u0000\u0000\u0000\u0542\u0540\u0001\u0000\u0000"+
		"\u0000\u0543\u0544\u0005\u00c4\u0000\u0000\u0544\u0549\u0003\u0404\u0202"+
		"\u0000\u0545\u0546\u0005\u028b\u0000\u0000\u0546\u0548\u0003\u0404\u0202"+
		"\u0000\u0547\u0545\u0001\u0000\u0000\u0000\u0548\u054b\u0001\u0000\u0000"+
		"\u0000\u0549\u0547\u0001\u0000\u0000\u0000\u0549\u054a\u0001\u0000\u0000"+
		"\u0000\u054a\u054d\u0001\u0000\u0000\u0000\u054b\u0549\u0001\u0000\u0000"+
		"\u0000\u054c\u050a\u0001\u0000\u0000\u0000\u054c\u0519\u0001\u0000\u0000"+
		"\u0000\u054c\u0528\u0001\u0000\u0000\u0000\u054c\u053a\u0001\u0000\u0000"+
		"\u0000\u054d\u0019\u0001\u0000\u0000\u0000\u054e\u0550\u0005\u028b\u0000"+
		"\u0000\u054f\u054e\u0001\u0000\u0000\u0000\u054f\u0550\u0001\u0000\u0000"+
		"\u0000\u0550\u0551\u0001\u0000\u0000\u0000\u0551\u0553\u0007\n\u0000\u0000"+
		"\u0552\u054f\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000\u0000"+
		"\u0554\u0552\u0001\u0000\u0000\u0000\u0554\u0555\u0001\u0000\u0000\u0000"+
		"\u0555\u001b\u0001\u0000\u0000\u0000\u0556\u0559\u0005c\u0000\u0000\u0557"+
		"\u0558\u0005\u0167\u0000\u0000\u0558\u055a\u0005\u01aa\u0000\u0000\u0559"+
		"\u0557\u0001\u0000\u0000\u0000\u0559\u055a\u0001\u0000\u0000\u0000\u055a"+
		"\u055f\u0001\u0000\u0000\u0000\u055b\u055d\u0005\u0167\u0000\u0000\u055c"+
		"\u055b\u0001\u0000\u0000\u0000\u055c\u055d\u0001\u0000\u0000\u0000\u055d"+
		"\u055e\u0001\u0000\u0000\u0000\u055e\u0560\u0005\u00bf\u0000\u0000\u055f"+
		"\u055c\u0001\u0000\u0000\u0000\u055f\u0560\u0001\u0000\u0000\u0000\u0560"+
		"\u0562\u0001\u0000\u0000\u0000\u0561\u0563\u0005\u0094\u0000\u0000\u0562"+
		"\u0561\u0001\u0000\u0000\u0000\u0562\u0563\u0001\u0000\u0000\u0000\u0563"+
		"\u0564\u0001\u0000\u0000\u0000\u0564\u0565\u0005\u0237\u0000\u0000\u0565"+
		"\u0567\u0003\u0406\u0203\u0000\u0566\u0568\u0003\u001e\u000f\u0000\u0567"+
		"\u0566\u0001\u0000\u0000\u0000\u0567\u0568\u0001\u0000\u0000\u0000\u0568"+
		"\u0569\u0001\u0000\u0000\u0000\u0569\u056a\u0005\u0014\u0000\u0000\u056a"+
		"\u056c\u0003\u0294\u014a\u0000\u056b\u056d\u0003\u0338\u019c\u0000\u056c"+
		"\u056b\u0001\u0000\u0000\u0000\u056c\u056d\u0001\u0000\u0000\u0000\u056d"+
		"\u001d\u0001\u0000\u0000\u0000\u056e\u056f\u0003 \u0010\u0000\u056f\u001f"+
		"\u0001\u0000\u0000\u0000\u0570\u057e\u0005\u0285\u0000\u0000\u0571\u0573"+
		"\u0005\u028b\u0000\u0000\u0572\u0571\u0001\u0000\u0000\u0000\u0572\u0573"+
		"\u0001\u0000\u0000\u0000\u0573\u057c\u0001\u0000\u0000\u0000\u0574\u0578"+
		"\u0003\u03be\u01df\u0000\u0575\u0577\u0003\u00aaU\u0000\u0576\u0575\u0001"+
		"\u0000\u0000\u0000\u0577\u057a\u0001\u0000\u0000\u0000\u0578\u0576\u0001"+
		"\u0000\u0000\u0000\u0578\u0579\u0001\u0000\u0000\u0000\u0579\u057d\u0001"+
		"\u0000\u0000\u0000\u057a\u0578\u0001\u0000\u0000\u0000\u057b\u057d\u0003"+
		"\u0080@\u0000\u057c\u0574\u0001\u0000\u0000\u0000\u057c\u057b\u0001\u0000"+
		"\u0000\u0000\u057d\u057f\u0001\u0000\u0000\u0000\u057e\u0572\u0001\u0000"+
		"\u0000\u0000\u057f\u0580\u0001\u0000\u0000\u0000\u0580\u057e\u0001\u0000"+
		"\u0000\u0000\u0580\u0581\u0001\u0000\u0000\u0000\u0581\u0582\u0001\u0000"+
		"\u0000\u0000\u0582\u0583\u0005\u0286\u0000\u0000\u0583!\u0001\u0000\u0000"+
		"\u0000\u0584\u0586\u0005c\u0000\u0000\u0585\u0587\u0007\u000b\u0000\u0000"+
		"\u0586\u0585\u0001\u0000\u0000\u0000\u0586\u0587\u0001\u0000\u0000\u0000"+
		"\u0587\u0588\u0001\u0000\u0000\u0000\u0588\u0589\u0005\u00de\u0000\u0000"+
		"\u0589\u058a\u0003\u03f8\u01fc\u0000\u058a\u058e\u0005\u0162\u0000\u0000"+
		"\u058b\u058f\u0003$\u0012\u0000\u058c\u058f\u00034\u001a\u0000\u058d\u058f"+
		"\u0003r9\u0000\u058e\u058b\u0001\u0000\u0000\u0000\u058e\u058c\u0001\u0000"+
		"\u0000\u0000\u058e\u058d\u0001\u0000\u0000\u0000\u058f\u0591\u0001\u0000"+
		"\u0000\u0000\u0590\u0592\u0005\u0222\u0000\u0000\u0591\u0590\u0001\u0000"+
		"\u0000\u0000\u0591\u0592\u0001\u0000\u0000\u0000\u0592#\u0001\u0000\u0000"+
		"\u0000\u0593\u0594\u0005E\u0000\u0000\u0594\u0596\u0003&\u0013\u0000\u0595"+
		"\u0597\u0003(\u0014\u0000\u0596\u0595\u0001\u0000\u0000\u0000\u0596\u0597"+
		"\u0001\u0000\u0000\u0000\u0597%\u0001\u0000\u0000\u0000\u0598\u0599\u0003"+
		"\u0430\u0218\u0000\u0599\u059a\u0005\u027e\u0000\u0000\u059a\u059c\u0001"+
		"\u0000\u0000\u0000\u059b\u0598\u0001\u0000\u0000\u0000\u059b\u059c\u0001"+
		"\u0000\u0000\u0000\u059c\u059d\u0001\u0000\u0000\u0000\u059d\u059e\u0003"+
		"\u0430\u0218\u0000\u059e\'\u0001\u0000\u0000\u0000\u059f\u05ac\u0003\u0096"+
		"K\u0000\u05a0\u05ac\u0003\u009cN\u0000\u05a1\u05a4\u0005\u01ff\u0000\u0000"+
		"\u05a2\u05a5\u0003*\u0015\u0000\u05a3\u05a5\u0005\u0080\u0000\u0000\u05a4"+
		"\u05a2\u0001\u0000\u0000\u0000\u05a4\u05a3\u0001\u0000\u0000\u0000\u05a5"+
		"\u05ac\u0001\u0000\u0000\u0000\u05a6\u05ac\u0003,\u0016\u0000\u05a7\u05ac"+
		"\u0003.\u0017\u0000\u05a8\u05ac\u0005\u01b3\u0000\u0000\u05a9\u05ac\u0003"+
		"0\u0018\u0000\u05aa\u05ac\u00032\u0019\u0000\u05ab\u059f\u0001\u0000\u0000"+
		"\u0000\u05ab\u05a0\u0001\u0000\u0000\u0000\u05ab\u05a1\u0001\u0000\u0000"+
		"\u0000\u05ab\u05a6\u0001\u0000\u0000\u0000\u05ab\u05a7\u0001\u0000\u0000"+
		"\u0000\u05ab\u05a8\u0001\u0000\u0000\u0000\u05ab\u05a9\u0001\u0000\u0000"+
		"\u0000\u05ab\u05aa\u0001\u0000\u0000\u0000\u05ac\u05ad\u0001\u0000\u0000"+
		"\u0000\u05ad\u05ab\u0001\u0000\u0000\u0000\u05ad\u05ae\u0001\u0000\u0000"+
		"\u0000\u05ae)\u0001\u0000\u0000\u0000\u05af\u05b0\u0003\u043c\u021e\u0000"+
		"\u05b0+\u0001\u0000\u0000\u0000\u05b1\u05b5\u0005\u0140\u0000\u0000\u05b2"+
		"\u05b3\u0005S\u0000\u0000\u05b3\u05b5\u0005\u027f\u0000\u0000\u05b4\u05b1"+
		"\u0001\u0000\u0000\u0000\u05b4\u05b2\u0001\u0000\u0000\u0000\u05b5-\u0001"+
		"\u0000\u0000\u0000\u05b6\u05b7\u0007\f\u0000\u0000\u05b7/\u0001\u0000"+
		"\u0000\u0000\u05b8\u05b9\u0007\r\u0000\u0000\u05b91\u0001\u0000\u0000"+
		"\u0000\u05ba\u05c0\u0005\u014c\u0000\u0000\u05bb\u05bd\u0005\u0172\u0000"+
		"\u0000\u05bc\u05be\u0005\u027f\u0000\u0000\u05bd\u05bc\u0001\u0000\u0000"+
		"\u0000\u05bd\u05be\u0001\u0000\u0000\u0000\u05be\u05c0\u0001\u0000\u0000"+
		"\u0000\u05bf\u05ba\u0001\u0000\u0000\u0000\u05bf\u05bb\u0001\u0000\u0000"+
		"\u0000\u05c03\u0001\u0000\u0000\u0000\u05c1\u05c3\u0003\u0406\u0203\u0000"+
		"\u05c2\u05c4\u0003\u03be\u01df\u0000\u05c3\u05c2\u0001\u0000\u0000\u0000"+
		"\u05c3\u05c4\u0001\u0000\u0000\u0000\u05c4\u05c5\u0001\u0000\u0000\u0000"+
		"\u05c5\u05cd\u0005\u0285\u0000\u0000\u05c6\u05c8\u0005\u028b\u0000\u0000"+
		"\u05c7\u05c6\u0001\u0000\u0000\u0000\u05c7\u05c8\u0001\u0000\u0000\u0000"+
		"\u05c8\u05c9\u0001\u0000\u0000\u0000\u05c9\u05cb\u00036\u001b\u0000\u05ca"+
		"\u05cc\u0007\u000e\u0000\u0000\u05cb\u05ca\u0001\u0000\u0000\u0000\u05cb"+
		"\u05cc\u0001\u0000\u0000\u0000\u05cc\u05ce\u0001\u0000\u0000\u0000\u05cd"+
		"\u05c7\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000\u05cf"+
		"\u05cd\u0001\u0000\u0000\u0000\u05cf\u05d0\u0001\u0000\u0000\u0000\u05d0"+
		"\u05d1\u0001\u0000\u0000\u0000\u05d1\u05d3\u0005\u0286\u0000\u0000\u05d2"+
		"\u05d4\u00038\u001c\u0000\u05d3\u05d2\u0001\u0000\u0000\u0000\u05d3\u05d4"+
		"\u0001\u0000\u0000\u0000\u05d45\u0001\u0000\u0000\u0000\u05d5\u05d8\u0003"+
		"\u0402\u0201\u0000\u05d6\u05d8\u0003\u0344\u01a2\u0000\u05d7\u05d5\u0001"+
		"\u0000\u0000\u0000\u05d7\u05d6\u0001\u0000\u0000\u0000\u05d87\u0001\u0000"+
		"\u0000\u0000\u05d9\u05dd\u0003:\u001d\u0000\u05da\u05dd\u0003X,\u0000"+
		"\u05db\u05dd\u0003(\u0014\u0000\u05dc\u05d9\u0001\u0000\u0000\u0000\u05dc"+
		"\u05da\u0001\u0000\u0000\u0000\u05dc\u05db\u0001\u0000\u0000\u0000\u05dd"+
		"\u05de\u0001\u0000\u0000\u0000\u05de\u05dc\u0001\u0000\u0000\u0000\u05de"+
		"\u05df\u0001\u0000\u0000\u0000\u05df\u05e7\u0001\u0000\u0000\u0000\u05e0"+
		"\u05e1\u0005\u00e0\u0000\u0000\u05e1\u05e4\u0005\u00f5\u0000\u0000\u05e2"+
		"\u05e5\u0003f3\u0000\u05e3\u05e5\u0003n7\u0000\u05e4\u05e2\u0001\u0000"+
		"\u0000\u0000\u05e4\u05e3\u0001\u0000\u0000\u0000\u05e5\u05e7\u0001\u0000"+
		"\u0000\u0000\u05e6\u05dc\u0001\u0000\u0000\u0000\u05e6\u05e0\u0001\u0000"+
		"\u0000\u0000\u05e79\u0001\u0000\u0000\u0000\u05e8\u05e9\u0005\u00c8\u0000"+
		"\u0000\u05e9\u05ea\u0005\u0176\u0000\u0000\u05ea\u05f7\u00053\u0000\u0000"+
		"\u05eb\u05ec\u0005\u0195\u0000\u0000\u05ec\u05ed\u0003\u00aeW\u0000\u05ed"+
		"\u05ee\u0005\u0285\u0000\u0000\u05ee\u05ef\u0003<\u001e\u0000\u05ef\u05f0"+
		"\u0005\u0286\u0000\u0000\u05f0\u05f8\u0001\u0000\u0000\u0000\u05f1\u05f2"+
		"\u0005\u00ce\u0000\u0000\u05f2\u05f5\u0003\u00aeW\u0000\u05f3\u05f6\u0003"+
		"F#\u0000\u05f4\u05f6\u0003T*\u0000\u05f5\u05f3\u0001\u0000\u0000\u0000"+
		"\u05f5\u05f4\u0001\u0000\u0000\u0000\u05f6\u05f8\u0001\u0000\u0000\u0000"+
		"\u05f7\u05eb\u0001\u0000\u0000\u0000\u05f7\u05f1\u0001\u0000\u0000\u0000"+
		"\u05f8;\u0001\u0000\u0000\u0000\u05f9\u05fb\u0005\u0176\u0000\u0000\u05fa"+
		"\u05fc\u0003>\u001f\u0000\u05fb\u05fa\u0001\u0000\u0000\u0000\u05fb\u05fc"+
		"\u0001\u0000\u0000\u0000\u05fc\u05fd\u0001\u0000\u0000\u0000\u05fd\u05fe"+
		"\u0005\u022d\u0000\u0000\u05fe\u05ff\u0005\u0102\u0000\u0000\u05ff\u0600"+
		"\u0005\u0202\u0000\u0000\u0600\u0605\u0005\u0285\u0000\u0000\u0601\u0603"+
		"\u0005\u028b\u0000\u0000\u0602\u0601\u0001\u0000\u0000\u0000\u0602\u0603"+
		"\u0001\u0000\u0000\u0000\u0603\u0604\u0001\u0000\u0000\u0000\u0604\u0606"+
		"\u0003@ \u0000\u0605\u0602\u0001\u0000\u0000\u0000\u0606\u0607\u0001\u0000"+
		"\u0000\u0000\u0607\u0605\u0001\u0000\u0000\u0000\u0607\u0608\u0001\u0000"+
		"\u0000\u0000\u0608\u0609\u0001\u0000\u0000\u0000\u0609\u060b\u0005\u0286"+
		"\u0000\u0000\u060a\u060c\u0003\u0094J\u0000\u060b\u060a\u0001\u0000\u0000"+
		"\u0000\u060b\u060c\u0001\u0000\u0000\u0000\u060c=\u0001\u0000\u0000\u0000"+
		"\u060d\u060e\u0003\u043c\u021e\u0000\u060e?\u0001\u0000\u0000\u0000\u060f"+
		"\u0614\u0005\u0281\u0000\u0000\u0610\u0614\u0003B!\u0000\u0611\u0614\u0003"+
		"\u0428\u0214\u0000\u0612\u0614\u0005\u0120\u0000\u0000\u0613\u060f\u0001"+
		"\u0000\u0000\u0000\u0613\u0610\u0001\u0000\u0000\u0000\u0613\u0611\u0001"+
		"\u0000\u0000\u0000\u0613\u0612\u0001\u0000\u0000\u0000\u0614A\u0001\u0000"+
		"\u0000\u0000\u0615\u0616\u0005\u01f7\u0000\u0000\u0616\u0617\u0005\u0285"+
		"\u0000\u0000\u0617\u0618\u0003\u0344\u01a2\u0000\u0618\u0619\u0005\u028b"+
		"\u0000\u0000\u0619\u061c\u0003\u0344\u01a2\u0000\u061a\u061b\u0005\u028b"+
		"\u0000\u0000\u061b\u061d\u0003\u0344\u01a2\u0000\u061c\u061a\u0001\u0000"+
		"\u0000\u0000\u061c\u061d\u0001\u0000\u0000\u0000\u061d\u061e\u0001\u0000"+
		"\u0000\u0000\u061e\u061f\u0005\u0286\u0000\u0000\u061f\u067b\u0001\u0000"+
		"\u0000\u0000\u0620\u0621\u0005\u01f7\u0000\u0000\u0621\u0622\u0005\u0285"+
		"\u0000\u0000\u0622\u0625\u0003\u0344\u01a2\u0000\u0623\u0624\u0005\u00c4"+
		"\u0000\u0000\u0624\u0626\u0003\u0374\u01ba\u0000\u0625\u0623\u0001\u0000"+
		"\u0000\u0000\u0625\u0626\u0001\u0000\u0000\u0000\u0626\u0629\u0001\u0000"+
		"\u0000\u0000\u0627\u0628\u0005\u00bd\u0000\u0000\u0628\u062a\u0003\u0374"+
		"\u01ba\u0000\u0629\u0627\u0001\u0000\u0000\u0000\u0629\u062a\u0001\u0000"+
		"\u0000\u0000\u062a\u062b\u0001\u0000\u0000\u0000\u062b\u062c\u0005\u0286"+
		"\u0000\u0000\u062c\u067b\u0001\u0000\u0000\u0000\u062d\u062e\u0005\u020f"+
		"\u0000\u0000\u062e\u0632\u0005\u0285\u0000\u0000\u062f\u0633\u0003\u0424"+
		"\u0212\u0000\u0630\u0633\u0003\u037c\u01be\u0000\u0631\u0633\u0003\u0344"+
		"\u01a2\u0000\u0632\u062f\u0001\u0000\u0000\u0000\u0632\u0630\u0001\u0000"+
		"\u0000\u0000\u0632\u0631\u0001\u0000\u0000\u0000\u0633\u0636\u0001\u0000"+
		"\u0000\u0000\u0634\u0635\u0005\u028b\u0000\u0000\u0635\u0637\u0003\u042c"+
		"\u0216\u0000\u0636\u0634\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000"+
		"\u0000\u0000\u0637\u063a\u0001\u0000\u0000\u0000\u0638\u0639\u0005\u028b"+
		"\u0000\u0000\u0639\u063b\u0003\u042c\u0216\u0000\u063a\u0638\u0001\u0000"+
		"\u0000\u0000\u063a\u063b\u0001\u0000\u0000\u0000\u063b\u063c\u0001\u0000"+
		"\u0000\u0000\u063c\u063d\u0005\u0286\u0000\u0000\u063d\u067b\u0001\u0000"+
		"\u0000\u0000\u063e\u063f\u0005{\u0000\u0000\u063f\u0640\u0005\u0285\u0000"+
		"\u0000\u0640\u0641\u0003D\"\u0000\u0641\u0642\u0005\u0286\u0000\u0000"+
		"\u0642\u067b\u0001\u0000\u0000\u0000\u0643\u0644\u0005A\u0000\u0000\u0644"+
		"\u0645\u0005\u0285\u0000\u0000\u0645\u0646\u0003\u0354\u01aa\u0000\u0646"+
		"\u0647\u0005\u022a\u0000\u0000\u0647\u0648\u0005\u0137\u0000\u0000\u0648"+
		"\u0649\u0005\u0286\u0000\u0000\u0649\u067b\u0001\u0000\u0000\u0000\u064a"+
		"\u064b\u0005\u0154\u0000\u0000\u064b\u064c\u0005\u0285\u0000\u0000\u064c"+
		"\u064d\u0003\u0344\u01a2\u0000\u064d\u064e\u0005\u028b\u0000\u0000\u064e"+
		"\u064f\u0003\u0344\u01a2\u0000\u064f\u0650\u0005\u0286\u0000\u0000\u0650"+
		"\u067b\u0001\u0000\u0000\u0000\u0651\u0652\u0005\u0216\u0000\u0000\u0652"+
		"\u065a\u0005\u0285\u0000\u0000\u0653\u0655\u0007\u000f\u0000\u0000\u0654"+
		"\u0653\u0001\u0000\u0000\u0000\u0654\u0655\u0001\u0000\u0000\u0000\u0655"+
		"\u0657\u0001\u0000\u0000\u0000\u0656\u0658\u0003\u042c\u0216\u0000\u0657"+
		"\u0656\u0001\u0000\u0000\u0000\u0657\u0658\u0001\u0000\u0000\u0000\u0658"+
		"\u0659\u0001\u0000\u0000\u0000\u0659\u065b\u0005\u00c4\u0000\u0000\u065a"+
		"\u0654\u0001\u0000\u0000\u0000\u065a\u065b\u0001\u0000\u0000\u0000\u065b"+
		"\u065c\u0001\u0000\u0000\u0000\u065c\u065d\u0003\u0354\u01aa\u0000\u065d"+
		"\u065e\u0005\u0286\u0000\u0000\u065e\u067b\u0001\u0000\u0000\u0000\u065f"+
		"\u0660\u0005\u0210\u0000\u0000\u0660\u0661\u0005\u0285\u0000\u0000\u0661"+
		"\u0664\u0003\u0344\u01a2\u0000\u0662\u0663\u0005\u028b\u0000\u0000\u0663"+
		"\u0665\u0003\u042c\u0216\u0000\u0664\u0662\u0001\u0000\u0000\u0000\u0664"+
		"\u0665\u0001\u0000\u0000\u0000\u0665\u0666\u0001\u0000\u0000\u0000\u0666"+
		"\u0667\u0005\u0286\u0000\u0000\u0667\u067b\u0001\u0000\u0000\u0000\u0668"+
		"\u0669\u0005T\u0000\u0000\u0669\u0670\u0005\u0285\u0000\u0000\u066a\u066d"+
		"\u0003\u042c\u0216\u0000\u066b\u066d\u0003\u0344\u01a2\u0000\u066c\u066a"+
		"\u0001\u0000\u0000\u0000\u066c\u066b\u0001\u0000\u0000\u0000\u066d\u066e"+
		"\u0001\u0000\u0000\u0000\u066e\u066f\u0005\u028b\u0000\u0000\u066f\u0671"+
		"\u0001\u0000\u0000\u0000\u0670\u066c\u0001\u0000\u0000\u0000\u0671\u0672"+
		"\u0001\u0000\u0000\u0000\u0672\u0670\u0001\u0000\u0000\u0000\u0672\u0673"+
		"\u0001\u0000\u0000\u0000\u0673\u0676\u0001\u0000\u0000\u0000\u0674\u0677"+
		"\u0003\u042c\u0216\u0000\u0675\u0677\u0003\u0344\u01a2\u0000\u0676\u0674"+
		"\u0001\u0000\u0000\u0000\u0676\u0675\u0001\u0000\u0000\u0000\u0677\u0678"+
		"\u0001\u0000\u0000\u0000\u0678\u0679\u0005\u0286\u0000\u0000\u0679\u067b"+
		"\u0001\u0000\u0000\u0000\u067a\u0615\u0001\u0000\u0000\u0000\u067a\u0620"+
		"\u0001\u0000\u0000\u0000\u067a\u062d\u0001\u0000\u0000\u0000\u067a\u063e"+
		"\u0001\u0000\u0000\u0000\u067a\u0643\u0001\u0000\u0000\u0000\u067a\u064a"+
		"\u0001\u0000\u0000\u0000\u067a\u0651\u0001\u0000\u0000\u0000\u067a\u065f"+
		"\u0001\u0000\u0000\u0000\u067a\u0668\u0001\u0000\u0000\u0000\u067bC\u0001"+
		"\u0000\u0000\u0000\u067c\u0681\u0003\u0344\u01a2\u0000\u067d\u067e\u0005"+
		"\u028b\u0000\u0000\u067e\u0680\u0003\u0344\u01a2\u0000\u067f\u067d\u0001"+
		"\u0000\u0000\u0000\u0680\u0683\u0001\u0000\u0000\u0000\u0681\u067f\u0001"+
		"\u0000\u0000\u0000\u0681\u0682\u0001\u0000\u0000\u0000\u0682E\u0001\u0000"+
		"\u0000\u0000\u0683\u0681\u0001\u0000\u0000\u0000\u0684\u068f\u0005\u0285"+
		"\u0000\u0000\u0685\u0687\u0005\u028b\u0000\u0000\u0686\u0685\u0001\u0000"+
		"\u0000\u0000\u0686\u0687\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000"+
		"\u0000\u0000\u0688\u068a\u0005\u0176\u0000\u0000\u0689\u068b\u0003>\u001f"+
		"\u0000\u068a\u0689\u0001\u0000\u0000\u0000\u068a\u068b\u0001\u0000\u0000"+
		"\u0000\u068b\u068d\u0001\u0000\u0000\u0000\u068c\u068e\u0003H$\u0000\u068d"+
		"\u068c\u0001\u0000\u0000\u0000\u068d\u068e\u0001\u0000\u0000\u0000\u068e"+
		"\u0690\u0001\u0000\u0000\u0000\u068f\u0686\u0001\u0000\u0000\u0000\u0690"+
		"\u0691\u0001\u0000\u0000\u0000\u0691\u068f\u0001\u0000\u0000\u0000\u0691"+
		"\u0692\u0001\u0000\u0000\u0000\u0692\u0693\u0001\u0000\u0000\u0000\u0693"+
		"\u0694\u0005\u0286\u0000\u0000\u0694G\u0001\u0000\u0000\u0000\u0695\u0696"+
		"\u0005\u01ff\u0000\u0000\u0696\u06aa\u0003*\u0015\u0000\u0697\u069a\u0005"+
		"\u016f\u0000\u0000\u0698\u0699\u0005\u01ff\u0000\u0000\u0699\u069b\u0003"+
		"*\u0015\u0000\u069a\u0698\u0001\u0000\u0000\u0000\u069a\u069b\u0001\u0000"+
		"\u0000\u0000\u069b\u06aa\u0001\u0000\u0000\u0000\u069c\u06aa\u0003J%\u0000"+
		"\u069d\u06aa\u0003,\u0016\u0000\u069e\u06aa\u0003L&\u0000\u069f\u06a0"+
		"\u0005\u0231\u0000\u0000\u06a0\u06a1\u0003R)\u0000\u06a1\u06a2\u0005\u01f1"+
		"\u0000\u0000\u06a2\u06a4\u0005\u0014\u0000\u0000\u06a3\u06a5\u0007\u0010"+
		"\u0000\u0000\u06a4\u06a3\u0001\u0000\u0000\u0000\u06a4\u06a5\u0001\u0000"+
		"\u0000\u0000\u06a5\u06a6\u0001\u0000\u0000\u0000\u06a6\u06a7\u0005\u010d"+
		"\u0000\u0000\u06a7\u06a8\u0003P(\u0000\u06a8\u06aa\u0001\u0000\u0000\u0000"+
		"\u06a9\u0695\u0001\u0000\u0000\u0000\u06a9\u0697\u0001\u0000\u0000\u0000"+
		"\u06a9\u069c\u0001\u0000\u0000\u0000\u06a9\u069d\u0001\u0000\u0000\u0000"+
		"\u06a9\u069e\u0001\u0000\u0000\u0000\u06a9\u069f\u0001\u0000\u0000\u0000"+
		"\u06aa\u06ab\u0001\u0000\u0000\u0000\u06ab\u06a9\u0001\u0000\u0000\u0000"+
		"\u06ab\u06ac\u0001\u0000\u0000\u0000\u06acI\u0001\u0000\u0000\u0000\u06ad"+
		"\u06b7\u0005S\u0000\u0000\u06ae\u06b8\u0005\u001e\u0000\u0000\u06af\u06b5"+
		"\u0005\u00bd\u0000\u0000\u06b0\u06b6\u0005\u0161\u0000\u0000\u06b1\u06b3"+
		"\u0007\u0011\u0000\u0000\u06b2\u06b4\u0007\u0012\u0000\u0000\u06b3\u06b2"+
		"\u0001\u0000\u0000\u0000\u06b3\u06b4\u0001\u0000\u0000\u0000\u06b4\u06b6"+
		"\u0001\u0000\u0000\u0000\u06b5\u06b0\u0001\u0000\u0000\u0000\u06b5\u06b1"+
		"\u0001\u0000\u0000\u0000\u06b6\u06b8\u0001\u0000\u0000\u0000\u06b7\u06ae"+
		"\u0001\u0000\u0000\u0000\u06b7\u06af\u0001\u0000\u0000\u0000\u06b7\u06b8"+
		"\u0001\u0000\u0000\u0000\u06b8\u06bb\u0001\u0000\u0000\u0000\u06b9\u06bb"+
		"\u0005\u0140\u0000\u0000\u06ba\u06ad\u0001\u0000\u0000\u0000\u06ba\u06b9"+
		"\u0001\u0000\u0000\u0000\u06bbK\u0001\u0000\u0000\u0000\u06bc\u06bd\u0005"+
		"\u010d\u0000\u0000\u06bd\u06be\u0005\u0285\u0000\u0000\u06be\u06bf\u0003"+
		"N\'\u0000\u06bf\u06c0\u0005\u0286\u0000\u0000\u06c0\u06c1\u0005\u01f1"+
		"\u0000\u0000\u06c1\u06c3\u0005\u0014\u0000\u0000\u06c2\u06c4\u0007\u0010"+
		"\u0000\u0000\u06c3\u06c2\u0001\u0000\u0000\u0000\u06c3\u06c4\u0001\u0000"+
		"\u0000\u0000\u06c4\u06d2\u0001\u0000\u0000\u0000\u06c5\u06cb\u0003P(\u0000"+
		"\u06c6\u06c7\u0005\u0285\u0000\u0000\u06c7\u06c8\u0005\u01ff\u0000\u0000"+
		"\u06c8\u06c9\u0003*\u0015\u0000\u06c9\u06ca\u0005\u0286\u0000\u0000\u06ca"+
		"\u06cc\u0001\u0000\u0000\u0000\u06cb\u06c6\u0001\u0000\u0000\u0000\u06cb"+
		"\u06cc\u0001\u0000\u0000\u0000\u06cc\u06d3\u0001\u0000\u0000\u0000\u06cd"+
		"\u06ce\u0005\u0285\u0000\u0000\u06ce\u06cf\u0005\u01ff\u0000\u0000\u06cf"+
		"\u06d0\u0003*\u0015\u0000\u06d0\u06d1\u0005\u0286\u0000\u0000\u06d1\u06d3"+
		"\u0001\u0000\u0000\u0000\u06d2\u06c5\u0001\u0000\u0000\u0000\u06d2\u06cd"+
		"\u0001\u0000\u0000\u0000\u06d3M\u0001\u0000\u0000\u0000\u06d4\u06d5\u0003"+
		"\u043c\u021e\u0000\u06d5O\u0001\u0000\u0000\u0000\u06d6\u06d7\u0003\u043c"+
		"\u021e\u0000\u06d7Q\u0001\u0000\u0000\u0000\u06d8\u06d9\u0003\u0430\u0218"+
		"\u0000\u06d9\u06da\u0005\u027e\u0000\u0000\u06da\u06dc\u0001\u0000\u0000"+
		"\u0000\u06db\u06d8\u0001\u0000\u0000\u0000\u06db\u06dc\u0001\u0000\u0000"+
		"\u0000\u06dc\u06e0\u0001\u0000\u0000\u0000\u06dd\u06de\u0003\u0430\u0218"+
		"\u0000\u06de\u06df\u0005\u027e\u0000\u0000\u06df\u06e1\u0001\u0000\u0000"+
		"\u0000\u06e0\u06dd\u0001\u0000\u0000\u0000\u06e0\u06e1\u0001\u0000\u0000"+
		"\u0000\u06e1\u06e2\u0001\u0000\u0000\u0000\u06e2\u06e3\u0003\u0430\u0218"+
		"\u0000\u06e3S\u0001\u0000\u0000\u0000\u06e4\u06e5\u0005\u0184\u0000\u0000"+
		"\u06e5\u06f3\u0003V+\u0000\u06e6\u06e7\u0005\u01f1\u0000\u0000\u06e7\u06e8"+
		"\u0005\u00d9\u0000\u0000\u06e8\u06ed\u0005\u0285\u0000\u0000\u06e9\u06eb"+
		"\u0005\u028b\u0000\u0000\u06ea\u06e9\u0001\u0000\u0000\u0000\u06ea\u06eb"+
		"\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001\u0000\u0000\u0000\u06ec\u06ee"+
		"\u0003*\u0015\u0000\u06ed\u06ea\u0001\u0000\u0000\u0000\u06ee\u06ef\u0001"+
		"\u0000\u0000\u0000\u06ef\u06ed\u0001\u0000\u0000\u0000\u06ef\u06f0\u0001"+
		"\u0000\u0000\u0000\u06f0\u06f1\u0001\u0000\u0000\u0000\u06f1\u06f2\u0005"+
		"\u0286\u0000\u0000\u06f2\u06f4\u0001\u0000\u0000\u0000\u06f3\u06e6\u0001"+
		"\u0000\u0000\u0000\u06f3\u06f4\u0001\u0000\u0000\u0000\u06f4\u06f7\u0001"+
		"\u0000\u0000\u0000\u06f5\u06f8\u0003J%\u0000\u06f6\u06f8\u0003,\u0016"+
		"\u0000\u06f7\u06f5\u0001\u0000\u0000\u0000\u06f7\u06f6\u0001\u0000\u0000"+
		"\u0000\u06f7\u06f8\u0001\u0000\u0000\u0000\u06f8\u0707\u0001\u0000\u0000"+
		"\u0000\u06f9\u06fa\u0005\u016f\u0000\u0000\u06fa\u06fb\u0005\u01f1\u0000"+
		"\u0000\u06fb\u06fc\u0005\u00d9\u0000\u0000\u06fc\u0701\u0005\u0285\u0000"+
		"\u0000\u06fd\u06ff\u0005\u028b\u0000\u0000\u06fe\u06fd\u0001\u0000\u0000"+
		"\u0000\u06fe\u06ff\u0001\u0000\u0000\u0000\u06ff\u0700\u0001\u0000\u0000"+
		"\u0000\u0700\u0702\u0003*\u0015\u0000\u0701\u06fe\u0001\u0000\u0000\u0000"+
		"\u0702\u0703\u0001\u0000\u0000\u0000\u0703\u0701\u0001\u0000\u0000\u0000"+
		"\u0703\u0704\u0001\u0000\u0000\u0000\u0704\u0705\u0001\u0000\u0000\u0000"+
		"\u0705\u0706\u0005\u0286\u0000\u0000\u0706\u0708\u0001\u0000\u0000\u0000"+
		"\u0707\u06f9\u0001\u0000\u0000\u0000\u0707\u0708\u0001\u0000\u0000\u0000"+
		"\u0708U\u0001\u0000\u0000\u0000\u0709\u070a\u0005\u027f\u0000\u0000\u070a"+
		"W\u0001\u0000\u0000\u0000\u070b\u0710\u0005\u010c\u0000\u0000\u070c\u0711"+
		"\u0003Z-\u0000\u070d\u0711\u0003\\.\u0000\u070e\u0711\u0003^/\u0000\u070f"+
		"\u0711\u0003`0\u0000\u0710\u070c\u0001\u0000\u0000\u0000\u0710\u070d\u0001"+
		"\u0000\u0000\u0000\u0710\u070e\u0001\u0000\u0000\u0000\u0710\u070f\u0001"+
		"\u0000\u0000\u0000\u0710\u0711\u0001\u0000\u0000\u0000\u0711Y\u0001\u0000"+
		"\u0000\u0000\u0712\u0725\u0005\u0285\u0000\u0000\u0713\u0715\u0005\u028b"+
		"\u0000\u0000\u0714\u0713\u0001\u0000\u0000\u0000\u0714\u0715\u0001\u0000"+
		"\u0000\u0000\u0715\u0716\u0001\u0000\u0000\u0000\u0716\u0718\u0005\u0176"+
		"\u0000\u0000\u0717\u0719\u0003>\u001f\u0000\u0718\u0717\u0001\u0000\u0000"+
		"\u0000\u0718\u0719\u0001\u0000\u0000\u0000\u0719\u0720\u0001\u0000\u0000"+
		"\u0000\u071a\u071d\u0003\u0094J\u0000\u071b\u071d\u0003,\u0016\u0000\u071c"+
		"\u071a\u0001\u0000\u0000\u0000\u071c\u071b\u0001\u0000\u0000\u0000\u071d"+
		"\u071e\u0001\u0000\u0000\u0000\u071e\u071c\u0001\u0000\u0000\u0000\u071e"+
		"\u071f\u0001\u0000\u0000\u0000\u071f\u0721\u0001\u0000\u0000\u0000\u0720"+
		"\u071c\u0001\u0000\u0000\u0000\u0720\u0721\u0001\u0000\u0000\u0000\u0721"+
		"\u0723\u0001\u0000\u0000\u0000\u0722\u0724\u0005\u0222\u0000\u0000\u0723"+
		"\u0722\u0001\u0000\u0000\u0000\u0723\u0724\u0001\u0000\u0000\u0000\u0724"+
		"\u0726\u0001\u0000\u0000\u0000\u0725\u0714\u0001\u0000\u0000\u0000\u0726"+
		"\u0727\u0001\u0000\u0000\u0000\u0727\u0725\u0001\u0000\u0000\u0000\u0727"+
		"\u0728\u0001\u0000\u0000\u0000\u0728\u0729\u0001\u0000\u0000\u0000\u0729"+
		"\u072a\u0005\u0286\u0000\u0000\u072a[\u0001\u0000\u0000\u0000\u072b\u073e"+
		"\u0005\u0285\u0000\u0000\u072c\u072e\u0005\u028b\u0000\u0000\u072d\u072c"+
		"\u0001\u0000\u0000\u0000\u072d\u072e\u0001\u0000\u0000\u0000\u072e\u072f"+
		"\u0001\u0000\u0000\u0000\u072f\u0731\u0005\u0176\u0000\u0000\u0730\u0732"+
		"\u0003>\u001f\u0000\u0731\u0730\u0001\u0000\u0000\u0000\u0731\u0732\u0001"+
		"\u0000\u0000\u0000\u0732\u0739\u0001\u0000\u0000\u0000\u0733\u0736\u0003"+
		"\u0094J\u0000\u0734\u0736\u0003,\u0016\u0000\u0735\u0733\u0001\u0000\u0000"+
		"\u0000\u0735\u0734\u0001\u0000\u0000\u0000\u0736\u0737\u0001\u0000\u0000"+
		"\u0000\u0737\u0735\u0001\u0000\u0000\u0000\u0737\u0738\u0001\u0000\u0000"+
		"\u0000\u0738\u073a\u0001\u0000\u0000\u0000\u0739\u0735\u0001\u0000\u0000"+
		"\u0000\u0739\u073a\u0001\u0000\u0000\u0000\u073a\u073c\u0001\u0000\u0000"+
		"\u0000\u073b\u073d\u0005\u0222\u0000\u0000\u073c\u073b\u0001\u0000\u0000"+
		"\u0000\u073c\u073d\u0001\u0000\u0000\u0000\u073d\u073f\u0001\u0000\u0000"+
		"\u0000\u073e\u072d\u0001\u0000\u0000\u0000\u073f\u0740\u0001\u0000\u0000"+
		"\u0000\u0740\u073e\u0001\u0000\u0000\u0000\u0740\u0741\u0001\u0000\u0000"+
		"\u0000\u0741\u0742\u0001\u0000\u0000\u0000\u0742\u0743\u0005\u0286\u0000"+
		"\u0000\u0743]\u0001\u0000\u0000\u0000\u0744\u0745\u0005\u01f1\u0000\u0000"+
		"\u0745\u0746\u0005\u00d9\u0000\u0000\u0746\u074b\u0005\u0285\u0000\u0000"+
		"\u0747\u0749\u0005\u028b\u0000\u0000\u0748\u0747\u0001\u0000\u0000\u0000"+
		"\u0748\u0749\u0001\u0000\u0000\u0000\u0749\u074a\u0001\u0000\u0000\u0000"+
		"\u074a\u074c\u0003*\u0015\u0000\u074b\u0748\u0001\u0000\u0000\u0000\u074c"+
		"\u074d\u0001\u0000\u0000\u0000\u074d\u074b\u0001\u0000\u0000\u0000\u074d"+
		"\u074e\u0001\u0000\u0000\u0000\u074e\u074f\u0001\u0000\u0000\u0000\u074f"+
		"\u0750\u0005\u0286\u0000\u0000\u0750\u0769\u0001\u0000\u0000\u0000\u0751"+
		"\u0763\u0005\u0285\u0000\u0000\u0752\u0754\u0005\u028b\u0000\u0000\u0753"+
		"\u0752\u0001\u0000\u0000\u0000\u0753\u0754\u0001\u0000\u0000\u0000\u0754"+
		"\u0755\u0001\u0000\u0000\u0000\u0755\u0757\u0005\u0176\u0000\u0000\u0756"+
		"\u0758\u0003>\u001f\u0000\u0757\u0756\u0001\u0000\u0000\u0000\u0757\u0758"+
		"\u0001\u0000\u0000\u0000\u0758\u075b\u0001\u0000\u0000\u0000\u0759\u075a"+
		"\u0005\u01ff\u0000\u0000\u075a\u075c\u0003*\u0015\u0000\u075b\u0759\u0001"+
		"\u0000\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u075e\u0001"+
		"\u0000\u0000\u0000\u075d\u075f\u0003,\u0016\u0000\u075e\u075d\u0001\u0000"+
		"\u0000\u0000\u075e\u075f\u0001\u0000\u0000\u0000\u075f\u0761\u0001\u0000"+
		"\u0000\u0000\u0760\u0762\u0005\u0222\u0000\u0000\u0761\u0760\u0001\u0000"+
		"\u0000\u0000\u0761\u0762\u0001\u0000\u0000\u0000\u0762\u0764\u0001\u0000"+
		"\u0000\u0000\u0763\u0753\u0001\u0000\u0000\u0000\u0764\u0765\u0001\u0000"+
		"\u0000\u0000\u0765\u0763\u0001\u0000\u0000\u0000\u0765\u0766\u0001\u0000"+
		"\u0000\u0000\u0766\u0767\u0001\u0000\u0000\u0000\u0767\u0769\u0005\u0286"+
		"\u0000\u0000\u0768\u0744\u0001\u0000\u0000\u0000\u0768\u0751\u0001\u0000"+
		"\u0000\u0000\u0769_\u0001\u0000\u0000\u0000\u076a\u076b\u0005\u01f1\u0000"+
		"\u0000\u076b\u076c\u0005\u00d9\u0000\u0000\u076c\u0771\u0005\u0285\u0000"+
		"\u0000\u076d\u076f\u0005\u028b\u0000\u0000\u076e\u076d\u0001\u0000\u0000"+
		"\u0000\u076e\u076f\u0001\u0000\u0000\u0000\u076f\u0770\u0001\u0000\u0000"+
		"\u0000\u0770\u0772\u0003*\u0015\u0000\u0771\u076e\u0001\u0000\u0000\u0000"+
		"\u0772\u0773\u0001\u0000\u0000\u0000\u0773\u0771\u0001\u0000\u0000\u0000"+
		"\u0773\u0774\u0001\u0000\u0000\u0000\u0774\u0775\u0001\u0000\u0000\u0000"+
		"\u0775\u0776\u0005\u0286\u0000\u0000\u0776\u0778\u0001\u0000\u0000\u0000"+
		"\u0777\u076a\u0001\u0000\u0000\u0000\u0777\u0778\u0001\u0000\u0000\u0000"+
		"\u0778\u0779\u0001\u0000\u0000\u0000\u0779\u078d\u0005\u0285\u0000\u0000"+
		"\u077a\u077c\u0005\u028b\u0000\u0000\u077b\u077a\u0001\u0000\u0000\u0000"+
		"\u077b\u077c\u0001\u0000\u0000\u0000\u077c\u077d\u0001\u0000\u0000\u0000"+
		"\u077d\u077f\u0005\u0176\u0000\u0000\u077e\u0780\u0003>\u001f\u0000\u077f"+
		"\u077e\u0001\u0000\u0000\u0000\u077f\u0780\u0001\u0000\u0000\u0000\u0780"+
		"\u0787\u0001\u0000\u0000\u0000\u0781\u0784\u0003\u0094J\u0000\u0782\u0784"+
		"\u0003,\u0016\u0000\u0783\u0781\u0001\u0000\u0000\u0000\u0783\u0782\u0001"+
		"\u0000\u0000\u0000\u0784\u0785\u0001\u0000\u0000\u0000\u0785\u0783\u0001"+
		"\u0000\u0000\u0000\u0785\u0786\u0001\u0000\u0000\u0000\u0786\u0788\u0001"+
		"\u0000\u0000\u0000\u0787\u0783\u0001\u0000\u0000\u0000\u0787\u0788\u0001"+
		"\u0000\u0000\u0000\u0788\u0789\u0001\u0000\u0000\u0000\u0789\u078b\u0005"+
		"\u0222\u0000\u0000\u078a\u078c\u0003b1\u0000\u078b\u078a\u0001\u0000\u0000"+
		"\u0000\u078b\u078c\u0001\u0000\u0000\u0000\u078c\u078e\u0001\u0000\u0000"+
		"\u0000\u078d\u077b\u0001\u0000\u0000\u0000\u078e\u078f\u0001\u0000\u0000"+
		"\u0000\u078f\u078d\u0001\u0000\u0000\u0000\u078f\u0790\u0001\u0000\u0000"+
		"\u0000\u0790\u0791\u0001\u0000\u0000\u0000\u0791\u0792\u0005\u0286\u0000"+
		"\u0000\u0792a\u0001\u0000\u0000\u0000\u0793\u0794\u0005\u01f1\u0000\u0000"+
		"\u0794\u0795\u0005\u00d9\u0000\u0000\u0795\u079a\u0005\u0285\u0000\u0000"+
		"\u0796\u0798\u0005\u028b\u0000\u0000\u0797\u0796\u0001\u0000\u0000\u0000"+
		"\u0797\u0798\u0001\u0000\u0000\u0000\u0798\u0799\u0001\u0000\u0000\u0000"+
		"\u0799\u079b\u0003*\u0015\u0000\u079a\u0797\u0001\u0000\u0000\u0000\u079b"+
		"\u079c\u0001\u0000\u0000\u0000\u079c\u079a\u0001\u0000\u0000\u0000\u079c"+
		"\u079d\u0001\u0000\u0000\u0000\u079d\u079e\u0001\u0000\u0000\u0000\u079e"+
		"\u079f\u0005\u0286\u0000\u0000\u079f\u07b8\u0001\u0000\u0000\u0000\u07a0"+
		"\u07b2\u0005\u0285\u0000\u0000\u07a1\u07a3\u0005\u028b\u0000\u0000\u07a2"+
		"\u07a1\u0001\u0000\u0000\u0000\u07a2\u07a3\u0001\u0000\u0000\u0000\u07a3"+
		"\u07a4\u0001\u0000\u0000\u0000\u07a4\u07a6\u0005\u01f4\u0000\u0000\u07a5"+
		"\u07a7\u0003d2\u0000\u07a6\u07a5\u0001\u0000\u0000\u0000\u07a6\u07a7\u0001"+
		"\u0000\u0000\u0000\u07a7\u07aa\u0001\u0000\u0000\u0000\u07a8\u07a9\u0005"+
		"\u01ff\u0000\u0000\u07a9\u07ab\u0003*\u0015\u0000\u07aa\u07a8\u0001\u0000"+
		"\u0000\u0000\u07aa\u07ab\u0001\u0000\u0000\u0000\u07ab\u07ad\u0001\u0000"+
		"\u0000\u0000\u07ac\u07ae\u0003,\u0016\u0000\u07ad\u07ac\u0001\u0000\u0000"+
		"\u0000\u07ad\u07ae\u0001\u0000\u0000\u0000\u07ae\u07b0\u0001\u0000\u0000"+
		"\u0000\u07af\u07b1\u0005\u0222\u0000\u0000\u07b0\u07af\u0001\u0000\u0000"+
		"\u0000\u07b0\u07b1\u0001\u0000\u0000\u0000\u07b1\u07b3\u0001\u0000\u0000"+
		"\u0000\u07b2\u07a2\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000"+
		"\u0000\u07b4\u07b2\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000"+
		"\u0000\u07b5\u07b6\u0001\u0000\u0000\u0000\u07b6\u07b8\u0005\u0286\u0000"+
		"\u0000\u07b7\u0793\u0001\u0000\u0000\u0000\u07b7\u07a0\u0001\u0000\u0000"+
		"\u0000\u07b8c\u0001\u0000\u0000\u0000\u07b9\u07ba\u0003>\u001f\u0000\u07ba"+
		"e\u0001\u0000\u0000\u0000\u07bb\u07bd\u0003h4\u0000\u07bc\u07be\u0003"+
		"l6\u0000\u07bd\u07bc\u0001\u0000\u0000\u0000\u07bd\u07be\u0001\u0000\u0000"+
		"\u0000\u07be\u07c0\u0001\u0000\u0000\u0000\u07bf\u07c1\u00032\u0019\u0000"+
		"\u07c0\u07bf\u0001\u0000\u0000\u0000\u07c0\u07c1\u0001\u0000\u0000\u0000"+
		"\u07c1\u07c7\u0001\u0000\u0000\u0000\u07c2\u07c3\u0005\u0174\u0000\u0000"+
		"\u07c3\u07c4\u0005\u0285\u0000\u0000\u07c4\u07c5\u0003j5\u0000\u07c5\u07c6"+
		"\u0005\u0286\u0000\u0000\u07c6\u07c8\u0001\u0000\u0000\u0000\u07c7\u07c2"+
		"\u0001\u0000\u0000\u0000\u07c7\u07c8\u0001\u0000\u0000\u0000\u07c8g\u0001"+
		"\u0000\u0000\u0000\u07c9\u07ca\u0003\u0430\u0218\u0000\u07ca\u07cb\u0005"+
		"\u027e\u0000\u0000\u07cb\u07cd\u0001\u0000\u0000\u0000\u07cc\u07c9\u0001"+
		"\u0000\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000\u0000\u07cd\u07ce\u0001"+
		"\u0000\u0000\u0000\u07ce\u07cf\u0003\u0430\u0218\u0000\u07cfi\u0001\u0000"+
		"\u0000\u0000\u07d0\u07d1\u0005\u0281\u0000\u0000\u07d1k\u0001\u0000\u0000"+
		"\u0000\u07d2\u07e6\u0005\u010c\u0000\u0000\u07d3\u07e0\u0005\u0285\u0000"+
		"\u0000\u07d4\u07d6\u0005\u028b\u0000\u0000\u07d5\u07d4\u0001\u0000\u0000"+
		"\u0000\u07d5\u07d6\u0001\u0000\u0000\u0000\u07d6\u07d7\u0001\u0000\u0000"+
		"\u0000\u07d7\u07d8\u0005\u0176\u0000\u0000\u07d8\u07de\u0003>\u001f\u0000"+
		"\u07d9\u07da\u0005\u0174\u0000\u0000\u07da\u07db\u0005\u0285\u0000\u0000"+
		"\u07db\u07dc\u0003j5\u0000\u07dc\u07dd\u0005\u0286\u0000\u0000\u07dd\u07df"+
		"\u0001\u0000\u0000\u0000\u07de\u07d9\u0001\u0000\u0000\u0000\u07de\u07df"+
		"\u0001\u0000\u0000\u0000\u07df\u07e1\u0001\u0000\u0000\u0000\u07e0\u07d5"+
		"\u0001\u0000\u0000\u0000\u07e1\u07e2\u0001\u0000\u0000\u0000\u07e2\u07e0"+
		"\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001\u0000\u0000\u0000\u07e3\u07e4"+
		"\u0001\u0000\u0000\u0000\u07e4\u07e5\u0005\u0286\u0000\u0000\u07e5\u07e7"+
		"\u0001\u0000\u0000\u0000\u07e6\u07d3\u0001\u0000\u0000\u0000\u07e6\u07e7"+
		"\u0001\u0000\u0000\u0000\u07e7m\u0001\u0000\u0000\u0000\u07e8\u07e9\u0005"+
		"\u0246\u0000\u0000\u07e9\u07eb\u0005\u027e\u0000\u0000\u07ea\u07e8\u0001"+
		"\u0000\u0000\u0000\u07ea\u07eb\u0001\u0000\u0000\u0000\u07eb\u07ec\u0001"+
		"\u0000\u0000\u0000\u07ec\u07ee\u0005\u024f\u0000\u0000\u07ed\u07ef\u0003"+
		"p8\u0000\u07ee\u07ed\u0001\u0000\u0000\u0000\u07ee\u07ef\u0001\u0000\u0000"+
		"\u0000\u07ef\u07f1\u0001\u0000\u0000\u0000\u07f0\u07f2\u00032\u0019\u0000"+
		"\u07f1\u07f0\u0001\u0000\u0000\u0000\u07f1\u07f2\u0001\u0000\u0000\u0000"+
		"\u07f2o\u0001\u0000\u0000\u0000\u07f3\u0800\u0005\u010c\u0000\u0000\u07f4"+
		"\u07fa\u0005\u0285\u0000\u0000\u07f5\u07f7\u0005\u028b\u0000\u0000\u07f6"+
		"\u07f5\u0001\u0000\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7"+
		"\u07f8\u0001\u0000\u0000\u0000\u07f8\u07f9\u0005\u0176\u0000\u0000\u07f9"+
		"\u07fb\u0003>\u001f\u0000\u07fa\u07f6\u0001\u0000\u0000\u0000\u07fb\u07fc"+
		"\u0001\u0000\u0000\u0000\u07fc\u07fa\u0001\u0000\u0000\u0000\u07fc\u07fd"+
		"\u0001\u0000\u0000\u0000\u07fd\u07fe\u0001\u0000\u0000\u0000\u07fe\u07ff"+
		"\u0005\u0286\u0000\u0000\u07ff\u0801\u0001\u0000\u0000\u0000\u0800\u07f4"+
		"\u0001\u0000\u0000\u0000\u0800\u0801\u0001\u0000\u0000\u0000\u0801q\u0001"+
		"\u0000\u0000\u0000\u0802\u0803\u0003\u0406\u0203\u0000\u0803\u080f\u0005"+
		"\u0285\u0000\u0000\u0804\u0806\u0005\u028b\u0000\u0000\u0805\u0804\u0001"+
		"\u0000\u0000\u0000\u0805\u0806\u0001\u0000\u0000\u0000\u0806\u0809\u0001"+
		"\u0000\u0000\u0000\u0807\u080a\u0003\u0406\u0203\u0000\u0808\u080a\u0003"+
		"\u03be\u01df\u0000\u0809\u0807\u0001\u0000\u0000\u0000\u0809\u0808\u0001"+
		"\u0000\u0000\u0000\u0809\u080a\u0001\u0000\u0000\u0000\u080a\u080b\u0001"+
		"\u0000\u0000\u0000\u080b\u080d\u0003\u0402\u0201\u0000\u080c\u080e\u0007"+
		"\u000e\u0000\u0000\u080d\u080c\u0001\u0000\u0000\u0000\u080d\u080e\u0001"+
		"\u0000\u0000\u0000\u080e\u0810\u0001\u0000\u0000\u0000\u080f\u0805\u0001"+
		"\u0000\u0000\u0000\u0810\u0811\u0001\u0000\u0000\u0000\u0811\u080f\u0001"+
		"\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812\u0813\u0001"+
		"\u0000\u0000\u0000\u0813\u0814\u0005\u0286\u0000\u0000\u0814\u081b\u0005"+
		"\u00c4\u0000\u0000\u0815\u0817\u0005\u028b\u0000\u0000\u0816\u0815\u0001"+
		"\u0000\u0000\u0000\u0816\u0817\u0001\u0000\u0000\u0000\u0817\u0818\u0001"+
		"\u0000\u0000\u0000\u0818\u0819\u0003\u0406\u0203\u0000\u0819\u081a\u0003"+
		"\u03be\u01df\u0000\u081a\u081c\u0001\u0000\u0000\u0000\u081b\u0816\u0001"+
		"\u0000\u0000\u0000\u081c\u081d\u0001\u0000\u0000\u0000\u081d\u081b\u0001"+
		"\u0000\u0000\u0000\u081d\u081e\u0001\u0000\u0000\u0000\u081e\u081f\u0001"+
		"\u0000\u0000\u0000\u081f\u0821\u0003\u03c2\u01e1\u0000\u0820\u0822\u0003"+
		"X,\u0000\u0821\u0820\u0001\u0000\u0000\u0000\u0821\u0822\u0001\u0000\u0000"+
		"\u0000\u0822\u0824\u0001\u0000\u0000\u0000\u0823\u0825\u0003(\u0014\u0000"+
		"\u0824\u0823\u0001\u0000\u0000\u0000\u0824\u0825\u0001\u0000\u0000\u0000"+
		"\u0825s\u0001\u0000\u0000\u0000\u0826\u082b\u0005c\u0000\u0000\u0827\u0829"+
		"\u0005\u00c8\u0000\u0000\u0828\u0827\u0001\u0000\u0000\u0000\u0828\u0829"+
		"\u0001\u0000\u0000\u0000\u0829\u082a\u0001\u0000\u0000\u0000\u082a\u082c"+
		"\u0005\u0201\u0000\u0000\u082b\u0828\u0001\u0000\u0000\u0000\u082b\u082c"+
		"\u0001\u0000\u0000\u0000\u082c\u082d\u0001\u0000\u0000\u0000\u082d\u082e"+
		"\u0005\u01fd\u0000\u0000\u082e\u0832\u0003\u0406\u0203\u0000\u082f\u0833"+
		"\u0003v;\u0000\u0830\u0833\u0003\u010a\u0085\u0000\u0831\u0833\u0003\u0112"+
		"\u0089\u0000\u0832\u082f\u0001\u0000\u0000\u0000\u0832\u0830\u0001\u0000"+
		"\u0000\u0000\u0832\u0831\u0001\u0000\u0000\u0000\u0833\u0836\u0001\u0000"+
		"\u0000\u0000\u0834\u0835\u0005\u0014\u0000\u0000\u0835\u0837\u0003\u028a"+
		"\u0145\u0000\u0836\u0834\u0001\u0000\u0000\u0000\u0836\u0837\u0001\u0000"+
		"\u0000\u0000\u0837\u084c\u0001\u0000\u0000\u0000\u0838\u0839\u0005\u0176"+
		"\u0000\u0000\u0839\u083a\u0005\u015c\u0000\u0000\u083a\u084a\u0003\u0406"+
		"\u0203\u0000\u083b\u083c\u0005\u00bd\u0000\u0000\u083c\u083d\u0005\u022d"+
		"\u0000\u0000\u083d\u083e\u0005\u00d9\u0000\u0000\u083e\u083f\u0005\u0285"+
		"\u0000\u0000\u083f\u0844\u0003\u0344\u01a2\u0000\u0840\u0841\u0005\u028b"+
		"\u0000\u0000\u0841\u0843\u0003\u0344\u01a2\u0000\u0842\u0840\u0001\u0000"+
		"\u0000\u0000\u0843\u0846\u0001\u0000\u0000\u0000\u0844\u0842\u0001\u0000"+
		"\u0000\u0000\u0844\u0845\u0001\u0000\u0000\u0000\u0845\u0847\u0001\u0000"+
		"\u0000\u0000\u0846\u0844\u0001\u0000\u0000\u0000\u0847\u0848\u0005\u0286"+
		"\u0000\u0000\u0848\u084b\u0001\u0000\u0000\u0000\u0849\u084b\u0005\u0080"+
		"\u0000\u0000\u084a\u083b\u0001\u0000\u0000\u0000\u084a\u0849\u0001\u0000"+
		"\u0000\u0000\u084b\u084d\u0001\u0000\u0000\u0000\u084c\u0838\u0001\u0000"+
		"\u0000\u0000\u084c\u084d\u0001\u0000\u0000\u0000\u084du\u0001\u0000\u0000"+
		"\u0000\u084e\u084f\u0005\u0285\u0000\u0000\u084f\u0850\u0003x<\u0000\u0850"+
		"\u0851\u0005\u0286\u0000\u0000\u0851\u0853\u0001\u0000\u0000\u0000\u0852"+
		"\u084e\u0001\u0000\u0000\u0000\u0852\u0853\u0001\u0000\u0000\u0000\u0853"+
		"\u0858\u0001\u0000\u0000\u0000\u0854\u0855\u0005\u0162\u0000\u0000\u0855"+
		"\u0856\u0005L\u0000\u0000\u0856\u0857\u0007\u0013\u0000\u0000\u0857\u0859"+
		"\u0005\u01bd\u0000\u0000\u0858\u0854\u0001\u0000\u0000\u0000\u0858\u0859"+
		"\u0001\u0000\u0000\u0000\u0859\u085b\u0001\u0000\u0000\u0000\u085a\u085c"+
		"\u0003\u0090H\u0000\u085b\u085a\u0001\u0000\u0000\u0000\u085b\u085c\u0001"+
		"\u0000\u0000\u0000\u085c\u085e\u0001\u0000\u0000\u0000\u085d\u085f\u0003"+
		"\u009eO\u0000\u085e\u085d\u0001\u0000\u0000\u0000\u085e\u085f\u0001\u0000"+
		"\u0000\u0000\u085f\u0861\u0001\u0000\u0000\u0000\u0860\u0862\u0003\u00d2"+
		"i\u0000\u0861\u0860\u0001\u0000\u0000\u0000\u0861\u0862\u0001\u0000\u0000"+
		"\u0000\u0862\u0864\u0001\u0000\u0000\u0000\u0863\u0865\u0007\u0003\u0000"+
		"\u0000\u0864\u0863\u0001\u0000\u0000\u0000\u0864\u0865\u0001\u0000\u0000"+
		"\u0000\u0865\u086b\u0001\u0000\u0000\u0000\u0866\u0867\u0005\u01ae\u0000"+
		"\u0000\u0867\u0868\u0005\u0285\u0000\u0000\u0868\u0869\u0005\u012b\u0000"+
		"\u0000\u0869\u086a\u0007\u0014\u0000\u0000\u086a\u086c\u0005\u0286\u0000"+
		"\u0000\u086b\u0866\u0001\u0000\u0000\u0000\u086b\u086c\u0001\u0000\u0000"+
		"\u0000\u086c\u086e\u0001\u0000\u0000\u0000\u086d\u086f\u00032\u0019\u0000"+
		"\u086e\u086d\u0001\u0000\u0000\u0000\u086e\u086f\u0001\u0000\u0000\u0000"+
		"\u086f\u0871\u0001\u0000\u0000\u0000\u0870\u0872\u0007\u0015\u0000\u0000"+
		"\u0871\u0870\u0001\u0000\u0000\u0000\u0871\u0872\u0001\u0000\u0000\u0000"+
		"\u0872\u0878\u0001\u0000\u0000\u0000\u0873\u0875\u0003\u0102\u0081\u0000"+
		"\u0874\u0873\u0001\u0000\u0000\u0000\u0875\u0876\u0001\u0000\u0000\u0000"+
		"\u0876\u0874\u0001\u0000\u0000\u0000\u0876\u0877\u0001\u0000\u0000\u0000"+
		"\u0877\u0879\u0001\u0000\u0000\u0000\u0878\u0874\u0001\u0000\u0000\u0000"+
		"\u0878\u0879\u0001\u0000\u0000\u0000\u0879\u087b\u0001\u0000\u0000\u0000"+
		"\u087a\u087c\u0003\u0106\u0083\u0000\u087b\u087a\u0001\u0000\u0000\u0000"+
		"\u087b\u087c\u0001\u0000\u0000\u0000\u087c\u087e\u0001\u0000\u0000\u0000"+
		"\u087d\u087f\u0003\u0108\u0084\u0000\u087e\u087d\u0001\u0000\u0000\u0000"+
		"\u087e\u087f\u0001\u0000\u0000\u0000\u087fw\u0001\u0000\u0000\u0000\u0880"+
		"\u0882\u0005\u028b\u0000\u0000\u0881\u0880\u0001\u0000\u0000\u0000\u0881"+
		"\u0882\u0001\u0000\u0000\u0000\u0882\u0888\u0001\u0000\u0000\u0000\u0883"+
		"\u0889\u0003z=\u0000\u0884\u0889\u0003~?\u0000\u0885\u0889\u0003\u0080"+
		"@\u0000\u0886\u0889\u0003\u0086C\u0000\u0887\u0889\u0003\u0088D\u0000"+
		"\u0888\u0883\u0001\u0000\u0000\u0000\u0888\u0884\u0001\u0000\u0000\u0000"+
		"\u0888\u0885\u0001\u0000\u0000\u0000\u0888\u0886\u0001\u0000\u0000\u0000"+
		"\u0888\u0887\u0001\u0000\u0000\u0000\u0889\u088b\u0001\u0000\u0000\u0000"+
		"\u088a\u0881\u0001\u0000\u0000\u0000\u088b\u088c\u0001\u0000\u0000\u0000"+
		"\u088c\u088a\u0001\u0000\u0000\u0000\u088c\u088d\u0001\u0000\u0000\u0000"+
		"\u088dy\u0001\u0000\u0000\u0000\u088e\u0891\u0003\u0402\u0201\u0000\u088f"+
		"\u0892\u0003\u041a\u020d\u0000\u0890\u0892\u0003\u03ea\u01f5\u0000\u0891"+
		"\u088f\u0001\u0000\u0000\u0000\u0891\u0890\u0001\u0000\u0000\u0000\u0892"+
		"\u0894\u0001\u0000\u0000\u0000\u0893\u0895\u0005\u01e4\u0000\u0000\u0894"+
		"\u0893\u0001\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000\u0000\u0895"+
		"\u0898\u0001\u0000\u0000\u0000\u0896\u0897\u0005\u0080\u0000\u0000\u0897"+
		"\u0899\u0003\u0344\u01a2\u0000\u0898\u0896\u0001\u0000\u0000\u0000\u0898"+
		"\u0899\u0001\u0000\u0000\u0000\u0899\u08ad\u0001\u0000\u0000\u0000\u089a"+
		"\u089d\u0005\u009b\u0000\u0000\u089b\u089c\u0005\u022a\u0000\u0000\u089c"+
		"\u089e\u0005\u0281\u0000\u0000\u089d\u089b\u0001\u0000\u0000\u0000\u089d"+
		"\u089e\u0001\u0000\u0000\u0000\u089e\u08a2\u0001\u0000\u0000\u0000\u089f"+
		"\u08a0\u0005\u00d3\u0000\u0000\u08a0\u08a1\u00053\u0000\u0000\u08a1\u08a3"+
		"\u0003\u043c\u021e\u0000\u08a2\u089f\u0001\u0000\u0000\u0000\u08a2\u08a3"+
		"\u0001\u0000\u0000\u0000\u08a3\u08a5\u0001\u0000\u0000\u0000\u08a4\u08a6"+
		"\u0005\u0281\u0000\u0000\u08a5\u08a4\u0001\u0000\u0000\u0000\u08a5\u08a6"+
		"\u0001\u0000\u0000\u0000\u08a6\u08ab\u0001\u0000\u0000\u0000\u08a7\u08a9"+
		"\u0005\u013d\u0000\u0000\u08a8\u08a7\u0001\u0000\u0000\u0000\u08a8\u08a9"+
		"\u0001\u0000\u0000\u0000\u08a9\u08aa\u0001\u0000\u0000\u0000\u08aa\u08ac"+
		"\u0005\u01bf\u0000\u0000\u08ab\u08a8\u0001\u0000\u0000\u0000\u08ab\u08ac"+
		"\u0001\u0000\u0000\u0000\u08ac\u08ae\u0001\u0000\u0000\u0000\u08ad\u089a"+
		"\u0001\u0000\u0000\u0000\u08ad\u08ae\u0001\u0000\u0000\u0000\u08ae\u08b6"+
		"\u0001\u0000\u0000\u0000\u08af\u08b1\u0003\u00aaU\u0000\u08b0\u08af\u0001"+
		"\u0000\u0000\u0000\u08b1\u08b4\u0001\u0000\u0000\u0000\u08b2\u08b0\u0001"+
		"\u0000\u0000\u0000\u08b2\u08b3\u0001\u0000\u0000\u0000\u08b3\u08b7\u0001"+
		"\u0000\u0000\u0000\u08b4\u08b2\u0001\u0000\u0000\u0000\u08b5\u08b7\u0003"+
		"|>\u0000\u08b6\u08b2\u0001\u0000\u0000\u0000\u08b6\u08b5\u0001\u0000\u0000"+
		"\u0000\u08b7\u08ba\u0001\u0000\u0000\u0000\u08b8\u08b9\u0005\u0080\u0000"+
		"\u0000\u08b9\u08bb\u0003\u0344\u01a2\u0000\u08ba\u08b8\u0001\u0000\u0000"+
		"\u0000\u08ba\u08bb\u0001\u0000\u0000\u0000\u08bb{\u0001\u0000\u0000\u0000"+
		"\u08bc\u08bd\u0005\u01c6\u0000\u0000\u08bd\u08be\u0005\u00f5\u0000\u0000"+
		"\u08be\u08ca\u0003\u0406\u0203\u0000\u08bf\u08c0\u0005\u0241\u0000\u0000"+
		"\u08c0\u08ca\u0005\u01bc\u0000\u0000\u08c1\u08c2\u0005X\u0000\u0000\u08c2"+
		"\u08c4\u0003\u03e6\u01f3\u0000\u08c3\u08c1\u0001\u0000\u0000\u0000\u08c3"+
		"\u08c4\u0001\u0000\u0000\u0000\u08c4\u08c5\u0001\u0000\u0000\u0000\u08c5"+
		"\u08c7\u0003\u00acV\u0000\u08c6\u08c8\u0003\u00b4Z\u0000\u08c7\u08c6\u0001"+
		"\u0000\u0000\u0000\u08c7\u08c8\u0001\u0000\u0000\u0000\u08c8\u08ca\u0001"+
		"\u0000\u0000\u0000\u08c9\u08bc\u0001\u0000\u0000\u0000\u08c9\u08bf\u0001"+
		"\u0000\u0000\u0000\u08c9\u08c3\u0001\u0000\u0000\u0000\u08ca}\u0001\u0000"+
		"\u0000\u0000\u08cb\u08cd\u0003\u0402\u0201\u0000\u08cc\u08ce\u0003\u041a"+
		"\u020d\u0000\u08cd\u08cc\u0001\u0000\u0000\u0000\u08cd\u08ce\u0001\u0000"+
		"\u0000\u0000\u08ce\u08d1\u0001\u0000\u0000\u0000\u08cf\u08d0\u0005\u00c7"+
		"\u0000\u0000\u08d0\u08d2\u0005\r\u0000\u0000\u08d1\u08cf\u0001\u0000\u0000"+
		"\u0000\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2\u08d3\u0001\u0000\u0000"+
		"\u0000\u08d3\u08d4\u0005\u0014\u0000\u0000\u08d4\u08d5\u0005\u0285\u0000"+
		"\u0000\u08d5\u08d6\u0003\u0344\u01a2\u0000\u08d6\u08d8\u0005\u0286\u0000"+
		"\u0000\u08d7\u08d9\u0005\u0238\u0000\u0000\u08d8\u08d7\u0001\u0000\u0000"+
		"\u0000\u08d8\u08d9\u0001\u0000\u0000\u0000\u08d9\u08dd\u0001\u0000\u0000"+
		"\u0000\u08da\u08dc\u0003\u00aaU\u0000\u08db\u08da\u0001\u0000\u0000\u0000"+
		"\u08dc\u08df\u0001\u0000\u0000\u0000\u08dd\u08db\u0001\u0000\u0000\u0000"+
		"\u08dd\u08de\u0001\u0000\u0000\u0000\u08de\u007f\u0001\u0000\u0000\u0000"+
		"\u08df\u08dd\u0001\u0000\u0000\u0000\u08e0\u08e1\u0005X\u0000\u0000\u08e1"+
		"\u08e3\u0003\u03e6\u01f3\u0000\u08e2\u08e0\u0001\u0000\u0000\u0000\u08e2"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e3\u08ef\u0001\u0000\u0000\u0000\u08e4"+
		"\u08e5\u0005\u021e\u0000\u0000\u08e5\u08f0\u0003\u00aeW\u0000\u08e6\u08e7"+
		"\u0005\u018e\u0000\u0000\u08e7\u08e8\u0005\u00fc\u0000\u0000\u08e8\u08f0"+
		"\u0003\u00aeW\u0000\u08e9\u08f0\u0003\u0082A\u0000\u08ea\u08eb\u0005?"+
		"\u0000\u0000\u08eb\u08ec\u0005\u0285\u0000\u0000\u08ec\u08ed\u0003\u0344"+
		"\u01a2\u0000\u08ed\u08ee\u0005\u0286\u0000\u0000\u08ee\u08f0\u0001\u0000"+
		"\u0000\u0000\u08ef\u08e4\u0001\u0000\u0000\u0000\u08ef\u08e6\u0001\u0000"+
		"\u0000\u0000\u08ef\u08e9\u0001\u0000\u0000\u0000\u08ef\u08ea\u0001\u0000"+
		"\u0000\u0000\u08f0\u08f2\u0001\u0000\u0000\u0000\u08f1\u08f3\u0003\u00b4"+
		"Z\u0000\u08f2\u08f1\u0001\u0000\u0000\u0000\u08f2\u08f3\u0001\u0000\u0000"+
		"\u0000\u08f3\u0081\u0001\u0000\u0000\u0000\u08f4\u08f5\u0005\u00c0\u0000"+
		"\u0000\u08f5\u08f6\u0005\u00fc\u0000\u0000\u08f6\u08f7\u0003\u00aeW\u0000"+
		"\u08f7\u08f9\u0003\u00acV\u0000\u08f8\u08fa\u0003\u0084B\u0000\u08f9\u08f8"+
		"\u0001\u0000\u0000\u0000\u08f9\u08fa\u0001\u0000\u0000\u0000\u08fa\u0083"+
		"\u0001\u0000\u0000\u0000\u08fb\u08fc\u0005\u0162\u0000\u0000\u08fc\u0900"+
		"\u0005\u0085\u0000\u0000\u08fd\u0901\u00059\u0000\u0000\u08fe\u08ff\u0005"+
		"\u01d4\u0000\u0000\u08ff\u0901\u0005\u0155\u0000\u0000\u0900\u08fd\u0001"+
		"\u0000\u0000\u0000\u0900\u08fe\u0001\u0000\u0000\u0000\u0901\u0085\u0001"+
		"\u0000\u0000\u0000\u0902\u0903\u0005\u01c6\u0000\u0000\u0903\u0904\u0005"+
		"\u00bd\u0000\u0000\u0904\u0905\u0005\u0285\u0000\u0000\u0905\u0906\u0003"+
		"\u043c\u021e\u0000\u0906\u0907\u0005\u0286\u0000\u0000\u0907\u0908\u0005"+
		"\u00f5\u0000\u0000\u0908\u0909\u0003\u0406\u0203\u0000\u0909\u0926\u0001"+
		"\u0000\u0000\u0000\u090a\u090b\u0005\u019f\u0000\u0000\u090b\u090c\u0005"+
		"\u0285\u0000\u0000\u090c\u090d\u0003\u043c\u021e\u0000\u090d\u090e\u0005"+
		"\u0286\u0000\u0000\u090e\u090f\u0005\u0241\u0000\u0000\u090f\u0910\u0005"+
		"\u01bc\u0000\u0000\u0910\u0926\u0001\u0000\u0000\u0000\u0911\u0912\u0005"+
		"X\u0000\u0000\u0912\u0914\u0003\u03e6\u01f3\u0000\u0913\u0911\u0001\u0000"+
		"\u0000\u0000\u0913\u0914\u0001\u0000\u0000\u0000\u0914\u0915\u0001\u0000"+
		"\u0000\u0000\u0915\u0916\u0005\u00c0\u0000\u0000\u0916\u0917\u0005\u00fc"+
		"\u0000\u0000\u0917\u091c\u0005\u0285\u0000\u0000\u0918\u091a\u0005\u028b"+
		"\u0000\u0000\u0919\u0918\u0001\u0000\u0000\u0000\u0919\u091a\u0001\u0000"+
		"\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000\u091b\u091d\u0003\u043c"+
		"\u021e\u0000\u091c\u0919\u0001\u0000\u0000\u0000\u091d\u091e\u0001\u0000"+
		"\u0000\u0000\u091e\u091c\u0001\u0000\u0000\u0000\u091e\u091f\u0001\u0000"+
		"\u0000\u0000\u091f\u0920\u0001\u0000\u0000\u0000\u0920\u0921\u0005\u0286"+
		"\u0000\u0000\u0921\u0923\u0003\u00acV\u0000\u0922\u0924\u0003\u00b4Z\u0000"+
		"\u0923\u0922\u0001\u0000\u0000\u0000\u0923\u0924\u0001\u0000\u0000\u0000"+
		"\u0924\u0926\u0001\u0000\u0000\u0000\u0925\u0902\u0001\u0000\u0000\u0000"+
		"\u0925\u090a\u0001\u0000\u0000\u0000\u0925\u0913\u0001\u0000\u0000\u0000"+
		"\u0926\u0087\u0001\u0000\u0000\u0000\u0927\u0928\u0005\u01fa\u0000\u0000"+
		"\u0928\u092b\u0005\u0112\u0000\u0000\u0929\u092c\u0003\u008aE\u0000\u092a"+
		"\u092c\u0003\u008eG\u0000\u092b\u0929\u0001\u0000\u0000\u0000\u092b\u092a"+
		"\u0001\u0000\u0000\u0000\u092c\u0089\u0001\u0000\u0000\u0000\u092d\u092e"+
		"\u0005\u00cb\u0000\u0000\u092e\u092f\u0003\u008cF\u0000\u092f\u0938\u0005"+
		"\u0285\u0000\u0000\u0930\u0932\u0005\u028b\u0000\u0000\u0931\u0930\u0001"+
		"\u0000\u0000\u0000\u0931\u0932\u0001\u0000\u0000\u0000\u0932\u0933\u0001"+
		"\u0000\u0000\u0000\u0933\u0936\u0003\u043c\u021e\u0000\u0934\u0935\u0005"+
		"\u013d\u0000\u0000\u0935\u0937\u0005\u0112\u0000\u0000\u0936\u0934\u0001"+
		"\u0000\u0000\u0000\u0936\u0937\u0001\u0000\u0000\u0000\u0937\u0939\u0001"+
		"\u0000\u0000\u0000\u0938\u0931\u0001\u0000\u0000\u0000\u0939\u093a\u0001"+
		"\u0000\u0000\u0000\u093a\u0938\u0001\u0000\u0000\u0000\u093a\u093b\u0001"+
		"\u0000\u0000\u0000\u093b\u093c\u0001\u0000\u0000\u0000\u093c\u093e\u0005"+
		"\u0286\u0000\u0000\u093d\u093f\u0005\r\u0000\u0000\u093e\u093d\u0001\u0000"+
		"\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000\u093f\u008b\u0001\u0000"+
		"\u0000\u0000\u0940\u0941\u0005\u027f\u0000\u0000\u0941\u008d\u0001\u0000"+
		"\u0000\u0000\u0942\u0943\u0005n\u0000\u0000\u0943\u094f\u0005\u0285\u0000"+
		"\u0000\u0944\u0946\u0005\u028b\u0000\u0000\u0945\u0944\u0001\u0000\u0000"+
		"\u0000\u0945\u0946\u0001\u0000\u0000\u0000\u0946\u094d\u0001\u0000\u0000"+
		"\u0000\u0947\u094e\u0005\t\u0000\u0000\u0948\u0949\u0005\u018e\u0000\u0000"+
		"\u0949\u094e\u0005\u00fc\u0000\u0000\u094a\u094e\u0005\u021e\u0000\u0000"+
		"\u094b\u094c\u0005\u00c0\u0000\u0000\u094c\u094e\u0005\u00fc\u0000\u0000"+
		"\u094d\u0947\u0001\u0000\u0000\u0000\u094d\u0948\u0001\u0000\u0000\u0000"+
		"\u094d\u094a\u0001\u0000\u0000\u0000\u094d\u094b\u0001\u0000\u0000\u0000"+
		"\u094e\u0950\u0001\u0000\u0000\u0000\u094f\u0945\u0001\u0000\u0000\u0000"+
		"\u0950\u0951\u0001\u0000\u0000\u0000\u0951\u094f\u0001\u0000\u0000\u0000"+
		"\u0951\u0952\u0001\u0000\u0000\u0000\u0952\u0953\u0001\u0000\u0000\u0000"+
		"\u0953\u0954\u0005\u0286\u0000\u0000\u0954\u0955\u0005I\u0000\u0000\u0955"+
		"\u008f\u0001\u0000\u0000\u0000\u0956\u0958\u0003\u0092I\u0000\u0957\u0956"+
		"\u0001\u0000\u0000\u0000\u0957\u0958\u0001\u0000\u0000\u0000\u0958\u0959"+
		"\u0001\u0000\u0000\u0000\u0959\u095b\u0003\u0094J\u0000\u095a\u095c\u0003"+
		"J%\u0000\u095b\u095a\u0001\u0000\u0000\u0000\u095b\u095c\u0001\u0000\u0000"+
		"\u0000\u095c\u0091\u0001\u0000\u0000\u0000\u095d\u095e\u0005\u01cb\u0000"+
		"\u0000\u095e\u095f\u0005f\u0000\u0000\u095f\u0960\u0007\t\u0000\u0000"+
		"\u0960\u0093\u0001\u0000\u0000\u0000\u0961\u0966\u0003\u0096K\u0000\u0962"+
		"\u0963\u0005\u01ff\u0000\u0000\u0963\u0966\u0003\u0430\u0218\u0000\u0964"+
		"\u0966\u0003\u009cN\u0000\u0965\u0961\u0001\u0000\u0000\u0000\u0965\u0962"+
		"\u0001\u0000\u0000\u0000\u0965\u0964\u0001\u0000\u0000\u0000\u0966\u0967"+
		"\u0001\u0000\u0000\u0000\u0967\u0965\u0001\u0000\u0000\u0000\u0967\u0968"+
		"\u0001\u0000\u0000\u0000\u0968\u0095\u0001\u0000\u0000\u0000\u0969\u096a"+
		"\u0005\u0179\u0000\u0000\u096a\u0971\u0005\u027f\u0000\u0000\u096b\u096c"+
		"\u0005\u017c\u0000\u0000\u096c\u0971\u0005\u027f\u0000\u0000\u096d\u096e"+
		"\u0005\u00e6\u0000\u0000\u096e\u0971\u0005\u027f\u0000\u0000\u096f\u0971"+
		"\u0003\u0098L\u0000\u0970\u0969\u0001\u0000\u0000\u0000\u0970\u096b\u0001"+
		"\u0000\u0000\u0000\u0970\u096d\u0001\u0000\u0000\u0000\u0970\u096f\u0001"+
		"\u0000\u0000\u0000\u0971\u0972\u0001\u0000\u0000\u0000\u0972\u0970\u0001"+
		"\u0000\u0000\u0000\u0972\u0973\u0001\u0000\u0000\u0000\u0973\u0097\u0001"+
		"\u0000\u0000\u0000\u0974\u0975\u0005\u01f0\u0000\u0000\u0975\u098f\u0005"+
		"\u0285\u0000\u0000\u0976\u0977\u0005\u00e4\u0000\u0000\u0977\u0990\u0003"+
		"\u009aM\u0000\u0978\u0979\u0005\u013c\u0000\u0000\u0979\u0990\u0003\u009a"+
		"M\u0000\u097a\u097b\u0005\u0125\u0000\u0000\u097b\u0990\u0007\u0016\u0000"+
		"\u0000\u097c\u097d\u0005\u011f\u0000\u0000\u097d\u0990\u0007\u0016\u0000"+
		"\u0000\u097e\u097f\u0005\u017a\u0000\u0000\u097f\u0990\u0005\u027f\u0000"+
		"\u0000\u0980\u0981\u0005\u00c2\u0000\u0000\u0981\u0990\u0005\u027f\u0000"+
		"\u0000\u0982\u0983\u0005\u00c1\u0000\u0000\u0983\u0984\u0005\u00cc\u0000"+
		"\u0000\u0984\u0990\u0005\u027f\u0000\u0000\u0985\u0988\u0005\u0165\u0000"+
		"\u0000\u0986\u0989\u0003\u009aM\u0000\u0987\u0989\u0005\u0155\u0000\u0000"+
		"\u0988\u0986\u0001\u0000\u0000\u0000\u0988\u0987\u0001\u0000\u0000\u0000"+
		"\u0989\u0990\u0001\u0000\u0000\u0000\u098a\u098b\u0005*\u0000\u0000\u098b"+
		"\u0990\u0007\u0017\u0000\u0000\u098c\u098d\u0005\u00b9\u0000\u0000\u098d"+
		"\u0990\u0007\u0018\u0000\u0000\u098e\u0990\u0005\u009b\u0000\u0000\u098f"+
		"\u0976\u0001\u0000\u0000\u0000\u098f\u0978\u0001\u0000\u0000\u0000\u098f"+
		"\u097a\u0001\u0000\u0000\u0000\u098f\u097c\u0001\u0000\u0000\u0000\u098f"+
		"\u097e\u0001\u0000\u0000\u0000\u098f\u0980\u0001\u0000\u0000\u0000\u098f"+
		"\u0982\u0001\u0000\u0000\u0000\u098f\u0985\u0001\u0000\u0000\u0000\u098f"+
		"\u098a\u0001\u0000\u0000\u0000\u098f\u098c\u0001\u0000\u0000\u0000\u098f"+
		"\u098e\u0001\u0000\u0000\u0000\u0990\u0991\u0001\u0000\u0000\u0000\u0991"+
		"\u098f\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992"+
		"\u0993\u0001\u0000\u0000\u0000\u0993\u0994\u0005\u0286\u0000\u0000\u0994"+
		"\u0099\u0001\u0000\u0000\u0000\u0995\u0997\u0005\u027f\u0000\u0000\u0996"+
		"\u0998\u0005\u02a4\u0000\u0000\u0997\u0996\u0001\u0000\u0000\u0000\u0997"+
		"\u0998\u0001\u0000\u0000\u0000\u0998\u009b\u0001\u0000\u0000\u0000\u0999"+
		"\u099a\u0007\u0019\u0000\u0000\u099a\u009d\u0001\u0000\u0000\u0000\u099b"+
		"\u09a3\u0003\u00a0P\u0000\u099c\u09a3\u0003\u00a4R\u0000\u099d\u09a0\u0003"+
		"\u00b8\\\u0000\u099e\u09a0\u0003\u00c8d\u0000\u099f\u099d\u0001\u0000"+
		"\u0000\u0000\u099f\u099e\u0001\u0000\u0000\u0000\u09a0\u09a3\u0001\u0000"+
		"\u0000\u0000\u09a1\u09a3\u0003\u00cae\u0000\u09a2\u099b\u0001\u0000\u0000"+
		"\u0000\u09a2\u099c\u0001\u0000\u0000\u0000\u09a2\u099f\u0001\u0000\u0000"+
		"\u0000\u09a2\u09a1\u0001\u0000\u0000\u0000\u09a3\u009f\u0001\u0000\u0000"+
		"\u0000\u09a4\u09a5\u0005H\u0000\u0000\u09a5\u09a6\u0003\u043c\u021e\u0000"+
		"\u09a6\u09a7\u0003\u00a2Q\u0000\u09a7\u00a1\u0001\u0000\u0000\u0000\u09a8"+
		"\u09aa\u0005\u0095\u0000\u0000\u09a9\u09a8\u0001\u0000\u0000\u0000\u09a9"+
		"\u09aa\u0001\u0000\u0000\u0000\u09aa\u09ab\u0001\u0000\u0000\u0000\u09ab"+
		"\u09ac\u0005\u00f5\u0000\u0000\u09ac\u09ae\u0005\u015c\u0000\u0000\u09ad"+
		"\u09af\u0005\u021a\u0000\u0000\u09ae\u09ad\u0001\u0000\u0000\u0000\u09ae"+
		"\u09af\u0001\u0000\u0000\u0000\u09af\u09b0\u0001\u0000\u0000\u0000\u09b0"+
		"\u09b1\u0005\u0285\u0000\u0000\u09b1\u09b2\u0003\u03ea\u01f5\u0000\u09b2"+
		"\u09b3\u0005\u0286\u0000\u0000\u09b3\u09bc\u0001\u0000\u0000\u0000\u09b4"+
		"\u09b6\u0005\u0151\u0000\u0000\u09b5\u09b4\u0001\u0000\u0000\u0000\u09b5"+
		"\u09b6\u0001\u0000\u0000\u0000\u09b6\u09b7\u0001\u0000\u0000\u0000\u09b7"+
		"\u09b8\u0005\u01f6\u0000\u0000\u09b8\u09b9\u0005\u0017\u0000\u0000\u09b9"+
		"\u09ba\u0005\t\u0000\u0000\u09ba\u09bc\u0005\u0104\u0000\u0000\u09bb\u09a9"+
		"\u0001\u0000\u0000\u0000\u09bb\u09b5\u0001\u0000\u0000\u0000\u09bc\u00a3"+
		"\u0001\u0000\u0000\u0000\u09bd\u09be\u0005\u0139\u0000\u0000\u09be\u09c1"+
		"\u0005\u01fd\u0000\u0000\u09bf\u09c2\u0003\u00a6S\u0000\u09c0\u09c2\u0005"+
		"J\u0000\u0000\u09c1\u09bf\u0001\u0000\u0000\u0000\u09c1\u09c0\u0001\u0000"+
		"\u0000\u0000\u09c2\u09c4\u0001\u0000\u0000\u0000\u09c3\u09c5\u0003\u00a2"+
		"Q\u0000\u09c4\u09c3\u0001\u0000\u0000\u0000\u09c4\u09c5\u0001\u0000\u0000"+
		"\u0000\u09c5\u09c7\u0001\u0000\u0000\u0000\u09c6\u09c8\u0007\u001a\u0000"+
		"\u0000\u09c7\u09c6\u0001\u0000\u0000\u0000\u09c7\u09c8\u0001\u0000\u0000"+
		"\u0000\u09c8\u09c9\u0001\u0000\u0000\u0000\u09c9\u09ca\u0005\u01f1\u0000"+
		"\u0000\u09ca\u09cb\u0005\u0014\u0000\u0000\u09cb\u09d9\u0003\u0406\u0203"+
		"\u0000\u09cc\u09d3\u0005\u0285\u0000\u0000\u09cd\u09ce\u0005\u0285\u0000"+
		"\u0000\u09ce\u09cf\u0003\u00a8T\u0000\u09cf\u09d0\u0005\u0286\u0000\u0000"+
		"\u09d0\u09d4\u0001\u0000\u0000\u0000\u09d1\u09d4\u0003\u0090H\u0000\u09d2"+
		"\u09d4\u0003\u009eO\u0000\u09d3\u09cd\u0001\u0000\u0000\u0000\u09d3\u09d1"+
		"\u0001\u0000\u0000\u0000\u09d3\u09d2\u0001\u0000\u0000\u0000\u09d4\u09d5"+
		"\u0001\u0000\u0000\u0000\u09d5\u09d3\u0001\u0000\u0000\u0000\u09d5\u09d6"+
		"\u0001\u0000\u0000\u0000\u09d6\u09d7\u0001\u0000\u0000\u0000\u09d7\u09d8"+
		"\u0005\u0286\u0000\u0000\u09d8\u09da\u0001\u0000\u0000\u0000\u09d9\u09cc"+
		"\u0001\u0000\u0000\u0000\u09d9\u09da\u0001\u0000\u0000\u0000\u09da\u09e0"+
		"\u0001\u0000\u0000\u0000\u09db\u09dd\u0005\u01b0\u0000\u0000\u09dc\u09de"+
		"\u0005\u0014\u0000\u0000\u09dd\u09dc\u0001\u0000\u0000\u0000\u09dd\u09de"+
		"\u0001\u0000\u0000\u0000\u09de\u09df\u0001\u0000\u0000\u0000\u09df\u09e1"+
		"\u0007\u001b\u0000\u0000\u09e0\u09db\u0001\u0000\u0000\u0000\u09e0\u09e1"+
		"\u0001\u0000\u0000\u0000\u09e1\u00a5\u0001\u0000\u0000\u0000\u09e2\u09e3"+
		"\u0003\u043c\u021e\u0000\u09e3\u00a7\u0001\u0000\u0000\u0000\u09e4\u09e7"+
		"\u0003\u0402\u0201\u0000\u09e5\u09e7\u0003\u03cc\u01e6\u0000\u09e6\u09e4"+
		"\u0001\u0000\u0000\u0000\u09e6\u09e5\u0001\u0000\u0000\u0000\u09e7\u09ea"+
		"\u0001\u0000\u0000\u0000\u09e8\u09e9\u0005\u0080\u0000\u0000\u09e9\u09eb"+
		"\u0003\u0344\u01a2\u0000\u09ea\u09e8\u0001\u0000\u0000\u0000\u09ea\u09eb"+
		"\u0001\u0000\u0000\u0000\u09eb\u09f5\u0001\u0000\u0000\u0000\u09ec\u09ee"+
		"\u0005\u028b\u0000\u0000\u09ed\u09ec\u0001\u0000\u0000\u0000\u09ed\u09ee"+
		"\u0001\u0000\u0000\u0000\u09ee\u09ef\u0001\u0000\u0000\u0000\u09ef\u09f1"+
		"\u0003\u00aaU\u0000\u09f0\u09ed\u0001\u0000\u0000\u0000\u09f1\u09f2\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f0\u0001\u0000\u0000\u0000\u09f2\u09f3\u0001"+
		"\u0000\u0000\u0000\u09f3\u09f6\u0001\u0000\u0000\u0000\u09f4\u09f6\u0003"+
		"|>\u0000\u09f5\u09f0\u0001\u0000\u0000\u0000\u09f5\u09f4\u0001\u0000\u0000"+
		"\u0000\u09f5\u09f6\u0001\u0000\u0000\u0000\u09f6\u09fb\u0001\u0000\u0000"+
		"\u0000\u09f7\u09fb\u0003\u0080@\u0000\u09f8\u09fb\u0003\u0086C\u0000\u09f9"+
		"\u09fb\u0003\u0088D\u0000\u09fa\u09e6\u0001\u0000\u0000\u0000\u09fa\u09f7"+
		"\u0001\u0000\u0000\u0000\u09fa\u09f8\u0001\u0000\u0000\u0000\u09fa\u09f9"+
		"\u0001\u0000\u0000\u0000\u09fb\u00a9\u0001\u0000\u0000\u0000\u09fc\u09fd"+
		"\u0005X\u0000\u0000\u09fd\u09ff\u0003\u03e6\u01f3\u0000\u09fe\u09fc\u0001"+
		"\u0000\u0000\u0000\u09fe\u09ff\u0001\u0000\u0000\u0000\u09ff\u0a09\u0001"+
		"\u0000\u0000\u0000\u0a00\u0a02\u0005\u0151\u0000\u0000\u0a01\u0a00\u0001"+
		"\u0000\u0000\u0000\u0a01\u0a02\u0001\u0000\u0000\u0000\u0a02\u0a03\u0001"+
		"\u0000\u0000\u0000\u0a03\u0a0a\u0005\u0155\u0000\u0000\u0a04\u0a0a\u0005"+
		"\u021e\u0000\u0000\u0a05\u0a06\u0005\u018e\u0000\u0000\u0a06\u0a0a\u0005"+
		"\u00fc\u0000\u0000\u0a07\u0a0a\u0003\u00acV\u0000\u0a08\u0a0a\u0003\u00b2"+
		"Y\u0000\u0a09\u0a01\u0001\u0000\u0000\u0000\u0a09\u0a04\u0001\u0000\u0000"+
		"\u0000\u0a09\u0a05\u0001\u0000\u0000\u0000\u0a09\u0a07\u0001\u0000\u0000"+
		"\u0000\u0a09\u0a08\u0001\u0000\u0000\u0000\u0a0a\u0a0c\u0001\u0000\u0000"+
		"\u0000\u0a0b\u0a0d\u0003\u00b4Z\u0000\u0a0c\u0a0b\u0001\u0000\u0000\u0000"+
		"\u0a0c\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u00ab\u0001\u0000\u0000\u0000"+
		"\u0a0e\u0a0f\u0005\u01a1\u0000\u0000\u0a0f\u0a10\u0003\u0406\u0203\u0000"+
		"\u0a10\u0a11\u0003\u00aeW\u0000\u0a11\u00ad\u0001\u0000\u0000\u0000\u0a12"+
		"\u0a13\u0005\u0285\u0000\u0000\u0a13\u0a14\u0003\u00b0X\u0000\u0a14\u0a15"+
		"\u0005\u0286\u0000\u0000\u0a15\u00af\u0001\u0000\u0000\u0000\u0a16\u0a18"+
		"\u0005\u028b\u0000\u0000\u0a17\u0a16\u0001\u0000\u0000\u0000\u0a17\u0a18"+
		"\u0001\u0000\u0000\u0000\u0a18\u0a19\u0001\u0000\u0000\u0000\u0a19\u0a1b"+
		"\u0003\u0402\u0201\u0000\u0a1a\u0a17\u0001\u0000\u0000\u0000\u0a1b\u0a1c"+
		"\u0001\u0000\u0000\u0000\u0a1c\u0a1a\u0001\u0000\u0000\u0000\u0a1c\u0a1d"+
		"\u0001\u0000\u0000\u0000\u0a1d\u00b1\u0001\u0000\u0000\u0000\u0a1e\u0a1f"+
		"\u0005?\u0000\u0000\u0a1f\u0a20\u0005\u0285\u0000\u0000\u0a20\u0a21\u0003"+
		"\u0342\u01a1\u0000\u0a21\u0a23\u0005\u0286\u0000\u0000\u0a22\u0a24\u0005"+
		"\u008b\u0000\u0000\u0a23\u0a22\u0001\u0000\u0000\u0000\u0a23\u0a24\u0001"+
		"\u0000\u0000\u0000\u0a24\u00b3\u0001\u0000\u0000\u0000\u0a25\u0a27\u0005"+
		"\u0151\u0000\u0000\u0a26\u0a25\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001"+
		"\u0000\u0000\u0000\u0a27\u0a28\u0001\u0000\u0000\u0000\u0a28\u0a30\u0005"+
		"\u0082\u0000\u0000\u0a29\u0a2a\u0005\u00e5\u0000\u0000\u0a2a\u0a30\u0007"+
		"\t\u0000\u0000\u0a2b\u0a30\u0007\u001c\u0000\u0000\u0a2c\u0a30\u0007\u0004"+
		"\u0000\u0000\u0a2d\u0a30\u0007\u001d\u0000\u0000\u0a2e\u0a30\u0003\u00b6"+
		"[\u0000\u0a2f\u0a26\u0001\u0000\u0000\u0000\u0a2f\u0a29\u0001\u0000\u0000"+
		"\u0000\u0a2f\u0a2b\u0001\u0000\u0000\u0000\u0a2f\u0a2c\u0001\u0000\u0000"+
		"\u0000\u0a2f\u0a2d\u0001\u0000\u0000\u0000\u0a2f\u0a2e\u0001\u0000\u0000"+
		"\u0000\u0a30\u0a31\u0001\u0000\u0000\u0000\u0a31\u0a2f\u0001\u0000\u0000"+
		"\u0000\u0a31\u0a32\u0001\u0000\u0000\u0000\u0a32\u00b5\u0001\u0000\u0000"+
		"\u0000\u0a33\u0a34\u0005\u022a\u0000\u0000\u0a34\u0a3b\u0005\u00de\u0000"+
		"\u0000\u0a35\u0a3c\u0003\u03f8\u01fc\u0000\u0a36\u0a37\u0005\u0285\u0000"+
		"\u0000\u0a37\u0a38\u0003\"\u0011\u0000\u0a38\u0a39\u0005\u0286\u0000\u0000"+
		"\u0a39\u0a3c\u0001\u0000\u0000\u0000\u0a3a\u0a3c\u0003(\u0014\u0000\u0a3b"+
		"\u0a35\u0001\u0000\u0000\u0000\u0a3b\u0a36\u0001\u0000\u0000\u0000\u0a3b"+
		"\u0a3a\u0001\u0000\u0000\u0000\u0a3b\u0a3c\u0001\u0000\u0000\u0000\u0a3c"+
		"\u00b7\u0001\u0000\u0000\u0000\u0a3d\u0a3e\u0005\u0231\u0000\u0000\u0a3e"+
		"\u0a44\u0003R)\u0000\u0a3f\u0a41\u0003\u00a2Q\u0000\u0a40\u0a3f\u0001"+
		"\u0000\u0000\u0000\u0a40\u0a41\u0001\u0000\u0000\u0000\u0a41\u0a42\u0001"+
		"\u0000\u0000\u0000\u0a42\u0a45\u0003\u00ba]\u0000\u0a43\u0a45\u0003\u00a2"+
		"Q\u0000\u0a44\u0a40\u0001\u0000\u0000\u0000\u0a44\u0a43\u0001\u0000\u0000"+
		"\u0000\u0a45\u00b9\u0001\u0000\u0000\u0000\u0a46\u0a47\u0005\u01f1\u0000"+
		"\u0000\u0a47\u0a49\u0005\u0014\u0000\u0000\u0a48\u0a4a\u0007\u0010\u0000"+
		"\u0000\u0a49\u0a48\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000"+
		"\u0000\u0a4a\u0a4b\u0001\u0000\u0000\u0000\u0a4b\u0a54\u0005\u010d\u0000"+
		"\u0000\u0a4c\u0a4e\u0003P(\u0000\u0a4d\u0a4c\u0001\u0000\u0000\u0000\u0a4d"+
		"\u0a4e\u0001\u0000\u0000\u0000\u0a4e\u0a4f\u0001\u0000\u0000\u0000\u0a4f"+
		"\u0a50\u0005\u0285\u0000\u0000\u0a50\u0a51\u0003\u00bc^\u0000\u0a51\u0a52"+
		"\u0005\u0286\u0000\u0000\u0a52\u0a55\u0001\u0000\u0000\u0000\u0a53\u0a55"+
		"\u0003P(\u0000\u0a54\u0a4d\u0001\u0000\u0000\u0000\u0a54\u0a53\u0001\u0000"+
		"\u0000\u0000\u0a55\u00bb\u0001\u0000\u0000\u0000\u0a56\u0a57\u0005\u01ff"+
		"\u0000\u0000\u0a57\u0a5e\u0003*\u0015\u0000\u0a58\u0a5a\u0003\u00be_\u0000"+
		"\u0a59\u0a5b\u0003\u0098L\u0000\u0a5a\u0a59\u0001\u0000\u0000\u0000\u0a5a"+
		"\u0a5b\u0001\u0000\u0000\u0000\u0a5b\u0a5e\u0001\u0000\u0000\u0000\u0a5c"+
		"\u0a5e\u0003\u0098L\u0000\u0a5d\u0a56\u0001\u0000\u0000\u0000\u0a5d\u0a58"+
		"\u0001\u0000\u0000\u0000\u0a5d\u0a5c\u0001\u0000\u0000\u0000\u0a5e\u00bd"+
		"\u0001\u0000\u0000\u0000\u0a5f\u0a60\u0007\u0004\u0000\u0000\u0a60\u0a61"+
		"\u0005\u01f0\u0000\u0000\u0a61\u0a62\u0005\u00d9\u0000\u0000\u0a62\u0a79"+
		"\u0005\u01ba\u0000\u0000\u0a63\u0a64\u0005B\u0000\u0000\u0a64\u0a79\u0005"+
		"\u027f\u0000\u0000\u0a65\u0a66\u0005\u017d\u0000\u0000\u0a66\u0a79\u0005"+
		"\u027f\u0000\u0000\u0a67\u0a68\u0005\u00c3\u0000\u0000\u0a68\u0a79\u0005"+
		"\u027f\u0000\u0000\u0a69\u0a79\u0003\u00c0`\u0000\u0a6a\u0a79\u0003\u00c2"+
		"a\u0000\u0a6b\u0a79\u0003\u00c4b\u0000\u0a6c\u0a6d\u0005\u009b\u0000\u0000"+
		"\u0a6d\u0a79\u0003\u00c6c\u0000\u0a6e\u0a79\u0005~\u0000\u0000\u0a6f\u0a74"+
		"\u00056\u0000\u0000\u0a70\u0a74\u0005\u013f\u0000\u0000\u0a71\u0a72\u0005"+
		"6\u0000\u0000\u0a72\u0a74\u0005\u0198\u0000\u0000\u0a73\u0a6f\u0001\u0000"+
		"\u0000\u0000\u0a73\u0a70\u0001\u0000\u0000\u0000\u0a73\u0a71\u0001\u0000"+
		"\u0000\u0000\u0a74\u0a76\u0001\u0000\u0000\u0000\u0a75\u0a77\u0003\u009c"+
		"N\u0000\u0a76\u0a75\u0001\u0000\u0000\u0000\u0a76\u0a77\u0001\u0000\u0000"+
		"\u0000\u0a77\u0a79\u0001\u0000\u0000\u0000\u0a78\u0a5f\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a63\u0001\u0000\u0000\u0000\u0a78\u0a65\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a67\u0001\u0000\u0000\u0000\u0a78\u0a69\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a6a\u0001\u0000\u0000\u0000\u0a78\u0a6b\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a6c\u0001\u0000\u0000\u0000\u0a78\u0a6e\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a73\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0001\u0000\u0000"+
		"\u0000\u0a7a\u0a78\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000"+
		"\u0000\u0a7b\u00bf\u0001\u0000\u0000\u0000\u0a7c\u0a82\u0005\u01af\u0000"+
		"\u0000\u0a7d\u0a83\u0005\u026e\u0000\u0000\u0a7e\u0a7f\u0005\u0270\u0000"+
		"\u0000\u0a7f\u0a83\u0005\u027f\u0000\u0000\u0a80\u0a83\u0005\u001b\u0000"+
		"\u0000\u0a81\u0a83\u0005\u0149\u0000\u0000\u0a82\u0a7d\u0001\u0000\u0000"+
		"\u0000\u0a82\u0a7e\u0001\u0000\u0000\u0000\u0a82\u0a80\u0001\u0000\u0000"+
		"\u0000\u0a82\u0a81\u0001\u0000\u0000\u0000\u0a82\u0a83\u0001\u0000\u0000"+
		"\u0000\u0a83\u00c1\u0001\u0000\u0000\u0000\u0a84\u0a85\u0007\u001e\u0000"+
		"\u0000\u0a85\u00c3\u0001\u0000\u0000\u0000\u0a86\u0a8c\u0005\u0140\u0000"+
		"\u0000\u0a87\u0a89\u0005S\u0000\u0000\u0a88\u0a8a\u0007\u001f\u0000\u0000"+
		"\u0a89\u0a88\u0001\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000"+
		"\u0a8a\u0a8c\u0001\u0000\u0000\u0000\u0a8b\u0a86\u0001\u0000\u0000\u0000"+
		"\u0a8b\u0a87\u0001\u0000\u0000\u0000\u0a8c\u00c5\u0001\u0000\u0000\u0000"+
		"\u0a8d\u0a8e\u0005\u022a\u0000\u0000\u0a8e\u0a90\u0005\u0281\u0000\u0000"+
		"\u0a8f\u0a8d\u0001\u0000\u0000\u0000\u0a8f\u0a90\u0001\u0000\u0000\u0000"+
		"\u0a90\u0a94\u0001\u0000\u0000\u0000\u0a91\u0a92\u0005\u00d3\u0000\u0000"+
		"\u0a92\u0a93\u00053\u0000\u0000\u0a93\u0a95\u0005\u02a4\u0000\u0000\u0a94"+
		"\u0a91\u0001\u0000\u0000\u0000\u0a94\u0a95\u0001\u0000\u0000\u0000\u0a95"+
		"\u0a97\u0001\u0000\u0000\u0000\u0a96\u0a98\u0005\u0281\u0000\u0000\u0a97"+
		"\u0a96\u0001\u0000\u0000\u0000\u0a97\u0a98\u0001\u0000\u0000\u0000\u0a98"+
		"\u0a9d\u0001\u0000\u0000\u0000\u0a99\u0a9b\u0005\u013d\u0000\u0000\u0a9a"+
		"\u0a99\u0001\u0000\u0000\u0000\u0a9a\u0a9b\u0001\u0000\u0000\u0000\u0a9b"+
		"\u0a9c\u0001\u0000\u0000\u0000\u0a9c\u0a9e\u0005\u01bf\u0000\u0000\u0a9d"+
		"\u0a9a\u0001\u0000\u0000\u0000\u0a9d\u0a9e\u0001\u0000\u0000\u0000\u0a9e"+
		"\u00c7\u0001\u0000\u0000\u0000\u0a9f\u0ac4\u0005\u010d\u0000\u0000\u0aa0"+
		"\u0aa5\u0005\u0285\u0000\u0000\u0aa1\u0aa3\u0005\u028b\u0000\u0000\u0aa2"+
		"\u0aa1\u0001\u0000\u0000\u0000\u0aa2\u0aa3\u0001\u0000\u0000\u0000\u0aa3"+
		"\u0aa4\u0001\u0000\u0000\u0000\u0aa4\u0aa6\u0003N\'\u0000\u0aa5\u0aa2"+
		"\u0001\u0000\u0000\u0000\u0aa6\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa5"+
		"\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0001\u0000\u0000\u0000\u0aa8\u0aa9"+
		"\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0005\u0286\u0000\u0000\u0aaa\u0aab"+
		"\u0005\u01f1\u0000\u0000\u0aab\u0ab1\u0005\u0014\u0000\u0000\u0aac\u0ab2"+
		"\u0007\u0010\u0000\u0000\u0aad\u0aae\u0005\u0285\u0000\u0000\u0aae\u0aaf"+
		"\u0003\u00bc^\u0000\u0aaf\u0ab0\u0005\u0286\u0000\u0000\u0ab0\u0ab2\u0001"+
		"\u0000\u0000\u0000\u0ab1\u0aac\u0001\u0000\u0000\u0000\u0ab1\u0aad\u0001"+
		"\u0000\u0000\u0000\u0ab2\u0ab3\u0001\u0000\u0000\u0000\u0ab3\u0ab1\u0001"+
		"\u0000\u0000\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0ac5\u0001"+
		"\u0000\u0000\u0000\u0ab5\u0ab6\u0005\u0285\u0000\u0000\u0ab6\u0ab7\u0003"+
		"N\'\u0000\u0ab7\u0ab8\u0005\u0286\u0000\u0000\u0ab8\u0ab9\u0005\u01f1"+
		"\u0000\u0000\u0ab9\u0ac0\u0005\u0014\u0000\u0000\u0aba\u0ac1\u0007\u0010"+
		"\u0000\u0000\u0abb\u0ac1\u0003P(\u0000\u0abc\u0abd\u0005\u0285\u0000\u0000"+
		"\u0abd\u0abe\u0003\u00bc^\u0000\u0abe\u0abf\u0005\u0286\u0000\u0000\u0abf"+
		"\u0ac1\u0001\u0000\u0000\u0000\u0ac0\u0aba\u0001\u0000\u0000\u0000\u0ac0"+
		"\u0abb\u0001\u0000\u0000\u0000\u0ac0\u0abc\u0001\u0000\u0000\u0000\u0ac1"+
		"\u0ac2\u0001\u0000\u0000\u0000\u0ac2\u0ac0\u0001\u0000\u0000\u0000\u0ac2"+
		"\u0ac3\u0001\u0000\u0000\u0000\u0ac3\u0ac5\u0001\u0000\u0000\u0000\u0ac4"+
		"\u0aa0\u0001\u0000\u0000\u0000\u0ac4\u0ab5\u0001\u0000\u0000\u0000\u0ac5"+
		"\u00c9\u0001\u0000\u0000\u0000\u0ac6\u0ac8\u0005\u0258\u0000\u0000\u0ac7"+
		"\u0ac9\u0005H\u0000\u0000\u0ac8\u0ac7\u0001\u0000\u0000\u0000\u0ac8\u0ac9"+
		"\u0001\u0000\u0000\u0000\u0ac9\u0aca\u0001\u0000\u0000\u0000\u0aca\u0acc"+
		"\u0003\u0402\u0201\u0000\u0acb\u0acd\u0003\u00ccf\u0000\u0acc\u0acb\u0001"+
		"\u0000\u0000\u0000\u0acc\u0acd\u0001\u0000\u0000\u0000\u0acd\u0acf\u0001"+
		"\u0000\u0000\u0000\u0ace\u0ad0\u0003\u00ceg\u0000\u0acf\u0ace\u0001\u0000"+
		"\u0000\u0000\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0\u00cb\u0001\u0000"+
		"\u0000\u0000\u0ad1\u0ad2\u0005\u01f1\u0000\u0000\u0ad2\u0aea\u0005\u0014"+
		"\u0000\u0000\u0ad3\u0ad4\u0005\u015b\u0000\u0000\u0ad4\u0aeb\u0005\u01a6"+
		"\u0000\u0000\u0ad5\u0ad7\u0007\u0010\u0000\u0000\u0ad6\u0ad5\u0001\u0000"+
		"\u0000\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u0adb\u0001\u0000"+
		"\u0000\u0000\u0ad8\u0adc\u0005C\u0000\u0000\u0ad9\u0ada\u0005%\u0000\u0000"+
		"\u0ada\u0adc\u0005\u0247\u0000\u0000\u0adb\u0ad8\u0001\u0000\u0000\u0000"+
		"\u0adb\u0ad9\u0001\u0000\u0000\u0000\u0adc\u0ae8\u0001\u0000\u0000\u0000"+
		"\u0add\u0ae2\u0003P(\u0000\u0ade\u0adf\u0005\u0285\u0000\u0000\u0adf\u0ae0"+
		"\u0003\u00be_\u0000\u0ae0\u0ae1\u0005\u0286\u0000\u0000\u0ae1\u0ae3\u0001"+
		"\u0000\u0000\u0000\u0ae2\u0ade\u0001\u0000\u0000\u0000\u0ae2\u0ae3\u0001"+
		"\u0000\u0000\u0000\u0ae3\u0ae9\u0001\u0000\u0000\u0000\u0ae4\u0ae5\u0005"+
		"\u0285\u0000\u0000\u0ae5\u0ae6\u0003\u00be_\u0000\u0ae6\u0ae7\u0005\u0286"+
		"\u0000\u0000\u0ae7\u0ae9\u0001\u0000\u0000\u0000\u0ae8\u0add\u0001\u0000"+
		"\u0000\u0000\u0ae8\u0ae4\u0001\u0000\u0000\u0000\u0ae8\u0ae9\u0001\u0000"+
		"\u0000\u0000\u0ae9\u0aeb\u0001\u0000\u0000\u0000\u0aea\u0ad3\u0001\u0000"+
		"\u0000\u0000\u0aea\u0ad6\u0001\u0000\u0000\u0000\u0aeb\u0af1\u0001\u0000"+
		"\u0000\u0000\u0aec\u0aed\u0005\u01f1\u0000\u0000\u0aed\u0aee\u0005\u0232"+
		"\u0000\u0000\u0aee\u0aef\u0005\u0014\u0000\u0000\u0aef\u0af1\u0007 \u0000"+
		"\u0000\u0af0\u0ad1\u0001\u0000\u0000\u0000\u0af0\u0aec\u0001\u0000\u0000"+
		"\u0000\u0af1\u00cd\u0001\u0000\u0000\u0000\u0af2\u0af3\u0005\u0255\u0000"+
		"\u0000\u0af3\u0af5\u0005\u0282\u0000\u0000\u0af4\u0af2\u0001\u0000\u0000"+
		"\u0000\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000"+
		"\u0000\u0af6\u0af7\u0005\u0095\u0000\u0000\u0af7\u0afb\u0005\u0282\u0000"+
		"\u0000\u0af8\u0af9\u0003\u00d0h\u0000\u0af9\u0afa\u0005\u014a\u0000\u0000"+
		"\u0afa\u0afc\u0001\u0000\u0000\u0000\u0afb\u0af8\u0001\u0000\u0000\u0000"+
		"\u0afb\u0afc\u0001\u0000\u0000\u0000\u0afc\u0b00\u0001\u0000\u0000\u0000"+
		"\u0afd\u0afe\u0003\u00d0h\u0000\u0afe\u0aff\u0005\u0011\u0000\u0000\u0aff"+
		"\u0b01\u0001\u0000\u0000\u0000\u0b00\u0afd\u0001\u0000\u0000\u0000\u0b00"+
		"\u0b01\u0001\u0000\u0000\u0000\u0b01\u00cf\u0001\u0000\u0000\u0000\u0b02"+
		"\u0b03\u0007!\u0000\u0000\u0b03\u00d1\u0001\u0000\u0000\u0000\u0b04\u0b0d"+
		"\u0003\u00d4j\u0000\u0b05\u0b0d\u0003\u00dam\u0000\u0b06\u0b0d\u0003\u00de"+
		"o\u0000\u0b07\u0b0d\u0003\u00e0p\u0000\u0b08\u0b0d\u0003\u00f6{\u0000"+
		"\u0b09\u0b0d\u0003\u00fa}\u0000\u0b0a\u0b0d\u0003\u00fc~\u0000\u0b0b\u0b0d"+
		"\u0003\u0100\u0080\u0000\u0b0c\u0b04\u0001\u0000\u0000\u0000\u0b0c\u0b05"+
		"\u0001\u0000\u0000\u0000\u0b0c\u0b06\u0001\u0000\u0000\u0000\u0b0c\u0b07"+
		"\u0001\u0000\u0000\u0000\u0b0c\u0b08\u0001\u0000\u0000\u0000\u0b0c\u0b09"+
		"\u0001\u0000\u0000\u0000\u0b0c\u0b0a\u0001\u0000\u0000\u0000\u0b0c\u0b0b"+
		"\u0001\u0000\u0000\u0000\u0b0d\u00d3\u0001\u0000\u0000\u0000\u0b0e\u0b0f"+
		"\u0005\u0176\u0000\u0000\u0b0f\u0b10\u00053\u0000\u0000\u0b10\u0b11\u0005"+
		"\u0195\u0000\u0000\u0b11\u0b25\u0003\u00aeW\u0000\u0b12\u0b13\u0005\u00f1"+
		"\u0000\u0000\u0b13\u0b14\u0005\u0285\u0000\u0000\u0b14\u0b15\u0003\u0344"+
		"\u01a2\u0000\u0b15\u0b23\u0005\u0286\u0000\u0000\u0b16\u0b17\u0005\u01f1"+
		"\u0000\u0000\u0b17\u0b18\u0005\u00d9\u0000\u0000\u0b18\u0b1d\u0005\u0285"+
		"\u0000\u0000\u0b19\u0b1b\u0005\u028b\u0000\u0000\u0b1a\u0b19\u0001\u0000"+
		"\u0000\u0000\u0b1a\u0b1b\u0001\u0000\u0000\u0000\u0b1b\u0b1c\u0001\u0000"+
		"\u0000\u0000\u0b1c\u0b1e\u0003*\u0015\u0000\u0b1d\u0b1a\u0001\u0000\u0000"+
		"\u0000\u0b1e\u0b1f\u0001\u0000\u0000\u0000\u0b1f\u0b1d\u0001\u0000\u0000"+
		"\u0000\u0b1f\u0b20\u0001\u0000\u0000\u0000\u0b20\u0b21\u0001\u0000\u0000"+
		"\u0000\u0b21\u0b22\u0005\u0286\u0000\u0000\u0b22\u0b24\u0001\u0000\u0000"+
		"\u0000\u0b23\u0b16\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001\u0000\u0000"+
		"\u0000\u0b24\u0b26\u0001\u0000\u0000\u0000\u0b25\u0b12\u0001\u0000\u0000"+
		"\u0000\u0b25\u0b26\u0001\u0000\u0000\u0000\u0b26\u0b27\u0001\u0000\u0000"+
		"\u0000\u0b27\u0b32\u0005\u0285\u0000\u0000\u0b28\u0b2a\u0005\u028b\u0000"+
		"\u0000\u0b29\u0b28\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001\u0000\u0000"+
		"\u0000\u0b2a\u0b2b\u0001\u0000\u0000\u0000\u0b2b\u0b2d\u0005\u0176\u0000"+
		"\u0000\u0b2c\u0b2e\u0003>\u001f\u0000\u0b2d\u0b2c\u0001\u0000\u0000\u0000"+
		"\u0b2d\u0b2e\u0001\u0000\u0000\u0000\u0b2e\u0b2f\u0001\u0000\u0000\u0000"+
		"\u0b2f\u0b30\u0003\u00d6k\u0000\u0b30\u0b31\u0003\u00d8l\u0000\u0b31\u0b33"+
		"\u0001\u0000\u0000\u0000\u0b32\u0b29\u0001\u0000\u0000\u0000\u0b33\u0b34"+
		"\u0001\u0000\u0000\u0000\u0b34\u0b32\u0001\u0000\u0000\u0000\u0b34\u0b35"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b36\u0001\u0000\u0000\u0000\u0b36\u0b37"+
		"\u0005\u0286\u0000\u0000\u0b37\u00d5\u0001\u0000\u0000\u0000\u0b38\u0b39"+
		"\u0005\u022d\u0000\u0000\u0b39\u0b3a\u0005\u0102\u0000\u0000\u0b3a\u0b3b"+
		"\u0005\u0202\u0000\u0000\u0b3b\u0b40\u0005\u0285\u0000\u0000\u0b3c\u0b3e"+
		"\u0005\u028b\u0000\u0000\u0b3d\u0b3c\u0001\u0000\u0000\u0000\u0b3d\u0b3e"+
		"\u0001\u0000\u0000\u0000\u0b3e\u0b3f\u0001\u0000\u0000\u0000\u0b3f\u0b41"+
		"\u0003@ \u0000\u0b40\u0b3d\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000"+
		"\u0000\u0000\u0b42\u0b40\u0001\u0000\u0000\u0000\u0b42\u0b43\u0001\u0000"+
		"\u0000\u0000\u0b43\u0b44\u0001\u0000\u0000\u0000\u0b44\u0b45\u0005\u0286"+
		"\u0000\u0000\u0b45\u00d7\u0001\u0000\u0000\u0000\u0b46\u0b48\u0003\u0092"+
		"I\u0000\u0b47\u0b46\u0001\u0000\u0000\u0000\u0b47\u0b48\u0001\u0000\u0000"+
		"\u0000\u0b48\u0b4a\u0001\u0000\u0000\u0000\u0b49\u0b4b\u0003\u0094J\u0000"+
		"\u0b4a\u0b49\u0001\u0000\u0000\u0000\u0b4a\u0b4b\u0001\u0000\u0000\u0000"+
		"\u0b4b\u0b4e\u0001\u0000\u0000\u0000\u0b4c\u0b4f\u0003J%\u0000\u0b4d\u0b4f"+
		"\u0003,\u0016\u0000\u0b4e\u0b4c\u0001\u0000\u0000\u0000\u0b4e\u0b4d\u0001"+
		"\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f\u0b54\u0001"+
		"\u0000\u0000\u0000\u0b50\u0b52\u0005\u016f\u0000\u0000\u0b51\u0b53\u0003"+
		"\u0094J\u0000\u0b52\u0b51\u0001\u0000\u0000\u0000\u0b52\u0b53\u0001\u0000"+
		"\u0000\u0000\u0b53\u0b55\u0001\u0000\u0000\u0000\u0b54\u0b50\u0001\u0000"+
		"\u0000\u0000\u0b54\u0b55\u0001\u0000\u0000\u0000\u0b55\u0b59\u0001\u0000"+
		"\u0000\u0000\u0b56\u0b5a\u0003\u00c8d\u0000\u0b57\u0b5a\u0003\u00b8\\"+
		"\u0000\u0b58\u0b5a\u0003\u00a4R\u0000\u0b59\u0b56\u0001\u0000\u0000\u0000"+
		"\u0b59\u0b57\u0001\u0000\u0000\u0000\u0b59\u0b58\u0001\u0000\u0000\u0000"+
		"\u0b59\u0b5a\u0001\u0000\u0000\u0000\u0b5a\u00d9\u0001\u0000\u0000\u0000"+
		"\u0b5b\u0b5c\u0005\u0176\u0000\u0000\u0b5c\u0b5d\u00053\u0000\u0000\u0b5d"+
		"\u0b5e\u0005\u010b\u0000\u0000\u0b5e\u0b5f\u0005\u0285\u0000\u0000\u0b5f"+
		"\u0b60\u0003\u0402\u0201\u0000\u0b60\u0b72\u0005\u0286\u0000\u0000\u0b61"+
		"\u0b6c\u0005\u0285\u0000\u0000\u0b62\u0b64\u0005\u028b\u0000\u0000\u0b63"+
		"\u0b62\u0001\u0000\u0000\u0000\u0b63\u0b64\u0001\u0000\u0000\u0000\u0b64"+
		"\u0b65\u0001\u0000\u0000\u0000\u0b65\u0b67\u0005\u0176\u0000\u0000\u0b66"+
		"\u0b68\u0003>\u001f\u0000\u0b67\u0b66\u0001\u0000\u0000\u0000\u0b67\u0b68"+
		"\u0001\u0000\u0000\u0000\u0b68\u0b69\u0001\u0000\u0000\u0000\u0b69\u0b6a"+
		"\u0003\u00dcn\u0000\u0b6a\u0b6b\u0003\u00d8l\u0000\u0b6b\u0b6d\u0001\u0000"+
		"\u0000\u0000\u0b6c\u0b63\u0001\u0000\u0000\u0000\u0b6d\u0b6e\u0001\u0000"+
		"\u0000\u0000\u0b6e\u0b6c\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000"+
		"\u0000\u0000\u0b6f\u0b70\u0001\u0000\u0000\u0000\u0b70\u0b71\u0005\u0286"+
		"\u0000\u0000\u0b71\u0b73\u0001\u0000\u0000\u0000\u0b72\u0b61\u0001\u0000"+
		"\u0000\u0000\u0b72\u0b73\u0001\u0000\u0000\u0000\u0b73\u00db\u0001\u0000"+
		"\u0000\u0000\u0b74\u0b75\u0005\u022d\u0000\u0000\u0b75\u0b7f\u0005\u0285"+
		"\u0000\u0000\u0b76\u0b78\u0005\u028b\u0000\u0000\u0b77\u0b76\u0001\u0000"+
		"\u0000\u0000\u0b77\u0b78\u0001\u0000\u0000\u0000\u0b78\u0b79\u0001\u0000"+
		"\u0000\u0000\u0b79\u0b7b\u0003@ \u0000\u0b7a\u0b77\u0001\u0000\u0000\u0000"+
		"\u0b7b\u0b7c\u0001\u0000\u0000\u0000\u0b7c\u0b7a\u0001\u0000\u0000\u0000"+
		"\u0b7c\u0b7d\u0001\u0000\u0000\u0000\u0b7d\u0b80\u0001\u0000\u0000\u0000"+
		"\u0b7e\u0b80\u0005\u0080\u0000\u0000\u0b7f\u0b7a\u0001\u0000\u0000\u0000"+
		"\u0b7f\u0b7e\u0001\u0000\u0000\u0000\u0b80\u0b81\u0001\u0000\u0000\u0000"+
		"\u0b81\u0b82\u0005\u0286\u0000\u0000\u0b82\u00dd\u0001\u0000\u0000\u0000"+
		"\u0b83\u0b84\u0005\u0176\u0000\u0000\u0b84\u0b85\u00053\u0000\u0000\u0b85"+
		"\u0b86\u0005\u00ce\u0000\u0000\u0b86\u0b89\u0003\u00aeW\u0000\u0b87\u0b8a"+
		"\u0003F#\u0000\u0b88\u0b8a\u0003T*\u0000\u0b89\u0b87\u0001\u0000\u0000"+
		"\u0000\u0b89\u0b88\u0001\u0000\u0000\u0000\u0b8a\u00df\u0001\u0000\u0000"+
		"\u0000\u0b8b\u0b8c\u0005\u0176\u0000\u0000\u0b8c\u0b8d\u00053\u0000\u0000"+
		"\u0b8d\u0b8e\u0005\u0195\u0000\u0000\u0b8e\u0ba2\u0003\u00aeW\u0000\u0b8f"+
		"\u0b90\u0005\u00f1\u0000\u0000\u0b90\u0b91\u0005\u0285\u0000\u0000\u0b91"+
		"\u0b92\u0003\u0344\u01a2\u0000\u0b92\u0ba0\u0005\u0286\u0000\u0000\u0b93"+
		"\u0b94\u0005\u01f1\u0000\u0000\u0b94\u0b95\u0005\u00d9\u0000\u0000\u0b95"+
		"\u0b9a\u0005\u0285\u0000\u0000\u0b96\u0b98\u0005\u028b\u0000\u0000\u0b97"+
		"\u0b96\u0001\u0000\u0000\u0000\u0b97\u0b98\u0001\u0000\u0000\u0000\u0b98"+
		"\u0b99\u0001\u0000\u0000\u0000\u0b99\u0b9b\u0003*\u0015\u0000\u0b9a\u0b97"+
		"\u0001\u0000\u0000\u0000\u0b9b\u0b9c\u0001\u0000\u0000\u0000\u0b9c\u0b9a"+
		"\u0001\u0000\u0000\u0000\u0b9c\u0b9d\u0001\u0000\u0000\u0000\u0b9d\u0b9e"+
		"\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0005\u0286\u0000\u0000\u0b9f\u0ba1"+
		"\u0001\u0000\u0000\u0000\u0ba0\u0b93\u0001\u0000\u0000\u0000\u0ba0\u0ba1"+
		"\u0001\u0000\u0000\u0000\u0ba1\u0ba3\u0001\u0000\u0000\u0000\u0ba2\u0b8f"+
		"\u0001\u0000\u0000\u0000\u0ba2\u0ba3\u0001\u0000\u0000\u0000\u0ba3\u0ba7"+
		"\u0001\u0000\u0000\u0000\u0ba4\u0ba8\u0003\u00e2q\u0000\u0ba5\u0ba8\u0003"+
		"\u00e4r\u0000\u0ba6\u0ba8\u0003\u00f0x\u0000\u0ba7\u0ba4\u0001\u0000\u0000"+
		"\u0000\u0ba7\u0ba5\u0001\u0000\u0000\u0000\u0ba7\u0ba6\u0001\u0000\u0000"+
		"\u0000\u0ba8\u0ba9\u0001\u0000\u0000\u0000\u0ba9\u0bae\u0005\u0285\u0000"+
		"\u0000\u0baa\u0bac\u0005\u028b\u0000\u0000\u0bab\u0baa\u0001\u0000\u0000"+
		"\u0000\u0bab\u0bac\u0001\u0000\u0000\u0000\u0bac\u0bad\u0001\u0000\u0000"+
		"\u0000\u0bad\u0baf\u0003\u00f2y\u0000\u0bae\u0bab\u0001\u0000\u0000\u0000"+
		"\u0baf\u0bb0\u0001\u0000\u0000\u0000\u0bb0\u0bae\u0001\u0000\u0000\u0000"+
		"\u0bb0\u0bb1\u0001\u0000\u0000\u0000\u0bb1\u0bb2\u0001\u0000\u0000\u0000"+
		"\u0bb2\u0bb3\u0005\u0286\u0000\u0000\u0bb3\u00e1\u0001\u0000\u0000\u0000"+
		"\u0bb4\u0bb5\u0005\u01f4\u0000\u0000\u0bb5\u0bb6\u00053\u0000\u0000\u0bb6"+
		"\u0bb7\u0005\u0195\u0000\u0000\u0bb7\u0bb9\u0003\u00aeW\u0000\u0bb8\u0bba"+
		"\u0003\u00e6s\u0000\u0bb9\u0bb8\u0001\u0000\u0000\u0000\u0bb9\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bba\u00e3\u0001\u0000\u0000\u0000\u0bbb\u0bbc\u0005"+
		"\u01f4\u0000\u0000\u0bbc\u0bbd\u00053\u0000\u0000\u0bbd\u0bbe\u0005\u010b"+
		"\u0000\u0000\u0bbe\u0bbf\u0005\u0285\u0000\u0000\u0bbf\u0bc0\u0003\u0402"+
		"\u0201\u0000\u0bc0\u0bc2\u0005\u0286\u0000\u0000\u0bc1\u0bc3\u0003\u00e6"+
		"s\u0000\u0bc2\u0bc1\u0001\u0000\u0000\u0000\u0bc2\u0bc3\u0001\u0000\u0000"+
		"\u0000\u0bc3\u00e5\u0001\u0000\u0000\u0000\u0bc4\u0bc5\u0005\u01f4\u0000"+
		"\u0000\u0bc5\u0be4\u0005\u0200\u0000\u0000\u0bc6\u0bdf\u0005\u0285\u0000"+
		"\u0000\u0bc7\u0bc9\u0005\u028b\u0000\u0000\u0bc8\u0bc7\u0001\u0000\u0000"+
		"\u0000\u0bc8\u0bc9\u0001\u0000\u0000\u0000\u0bc9\u0bca\u0001\u0000\u0000"+
		"\u0000\u0bca\u0bcc\u0003\u00e8t\u0000\u0bcb\u0bc8\u0001\u0000\u0000\u0000"+
		"\u0bcc\u0bcd\u0001\u0000\u0000\u0000\u0bcd\u0bcb\u0001\u0000\u0000\u0000"+
		"\u0bcd\u0bce\u0001\u0000\u0000\u0000\u0bce\u0be0\u0001\u0000\u0000\u0000"+
		"\u0bcf\u0bd1\u0005\u028b\u0000\u0000\u0bd0\u0bcf\u0001\u0000\u0000\u0000"+
		"\u0bd0\u0bd1\u0001\u0000\u0000\u0000\u0bd1\u0bd2\u0001\u0000\u0000\u0000"+
		"\u0bd2\u0bd4\u0003\u00eau\u0000\u0bd3\u0bd0\u0001\u0000\u0000\u0000\u0bd4"+
		"\u0bd5\u0001\u0000\u0000\u0000\u0bd5\u0bd3\u0001\u0000\u0000\u0000\u0bd5"+
		"\u0bd6\u0001\u0000\u0000\u0000\u0bd6\u0be0\u0001\u0000\u0000\u0000\u0bd7"+
		"\u0bd9\u0005\u028b\u0000\u0000\u0bd8\u0bd7\u0001\u0000\u0000\u0000\u0bd8"+
		"\u0bd9\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda"+
		"\u0bdc\u0003\u00ecv\u0000\u0bdb\u0bd8\u0001\u0000\u0000\u0000\u0bdc\u0bdd"+
		"\u0001\u0000\u0000\u0000\u0bdd\u0bdb\u0001\u0000\u0000\u0000\u0bdd\u0bde"+
		"\u0001\u0000\u0000\u0000\u0bde\u0be0\u0001\u0000\u0000\u0000\u0bdf\u0bcb"+
		"\u0001\u0000\u0000\u0000\u0bdf\u0bd3\u0001\u0000\u0000\u0000\u0bdf\u0bdb"+
		"\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2"+
		"\u0005\u0286\u0000\u0000\u0be2\u0be5\u0001\u0000\u0000\u0000\u0be3\u0be5"+
		"\u0003\u00eew\u0000\u0be4\u0bc6\u0001\u0000\u0000\u0000\u0be4\u0be3\u0001"+
		"\u0000\u0000\u0000\u0be5\u00e7\u0001\u0000\u0000\u0000\u0be6\u0be8\u0005"+
		"\u01f4\u0000\u0000\u0be7\u0be9\u0003d2\u0000\u0be8\u0be7\u0001\u0000\u0000"+
		"\u0000\u0be8\u0be9\u0001\u0000\u0000\u0000\u0be9\u0bea\u0001\u0000\u0000"+
		"\u0000\u0bea\u0bec\u0003\u00d6k\u0000\u0beb\u0bed\u0003H$\u0000\u0bec"+
		"\u0beb\u0001\u0000\u0000\u0000\u0bec\u0bed\u0001\u0000\u0000\u0000\u0bed"+
		"\u00e9\u0001\u0000\u0000\u0000\u0bee\u0bf0\u0005\u01f4\u0000\u0000\u0bef"+
		"\u0bf1\u0003d2\u0000\u0bf0\u0bef\u0001\u0000\u0000\u0000\u0bf0\u0bf1\u0001"+
		"\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000\u0000\u0000\u0bf2\u0bf4\u0003"+
		"\u00dcn\u0000\u0bf3\u0bf5\u0003H$\u0000\u0bf4\u0bf3\u0001\u0000\u0000"+
		"\u0000\u0bf4\u0bf5\u0001\u0000\u0000\u0000\u0bf5\u00eb\u0001\u0000\u0000"+
		"\u0000\u0bf6\u0bf8\u0005\u01f4\u0000\u0000\u0bf7\u0bf9\u0003d2\u0000\u0bf8"+
		"\u0bf7\u0001\u0000\u0000\u0000\u0bf8\u0bf9\u0001\u0000\u0000\u0000\u0bf9"+
		"\u0bfb\u0001\u0000\u0000\u0000\u0bfa\u0bfc\u0003H$\u0000\u0bfb\u0bfa\u0001"+
		"\u0000\u0000\u0000\u0bfb\u0bfc\u0001\u0000\u0000\u0000\u0bfc\u00ed\u0001"+
		"\u0000\u0000\u0000\u0bfd\u0bfe\u0005\u027f\u0000\u0000\u0bfe\u00ef\u0001"+
		"\u0000\u0000\u0000\u0bff\u0c00\u0005\u01f4\u0000\u0000\u0c00\u0c01\u0005"+
		"3\u0000\u0000\u0c01\u0c02\u0005\u00ce\u0000\u0000\u0c02\u0c15\u0003\u00ae"+
		"W\u0000\u0c03\u0c04\u0005\u01f5\u0000\u0000\u0c04\u0c12\u0005\u027f\u0000"+
		"\u0000\u0c05\u0c06\u0005\u01f1\u0000\u0000\u0c06\u0c07\u0005\u00d9\u0000"+
		"\u0000\u0c07\u0c0c\u0005\u0285\u0000\u0000\u0c08\u0c0a\u0005\u028b\u0000"+
		"\u0000\u0c09\u0c08\u0001\u0000\u0000\u0000\u0c09\u0c0a\u0001\u0000\u0000"+
		"\u0000\u0c0a\u0c0b\u0001\u0000\u0000\u0000\u0c0b\u0c0d\u0003*\u0015\u0000"+
		"\u0c0c\u0c09\u0001\u0000\u0000\u0000\u0c0d\u0c0e\u0001\u0000\u0000\u0000"+
		"\u0c0e\u0c0c\u0001\u0000\u0000\u0000\u0c0e\u0c0f\u0001\u0000\u0000\u0000"+
		"\u0c0f\u0c10\u0001\u0000\u0000\u0000\u0c10\u0c11\u0005\u0286\u0000\u0000"+
		"\u0c11\u0c13\u0001\u0000\u0000\u0000\u0c12\u0c05\u0001\u0000\u0000\u0000"+
		"\u0c12\u0c13\u0001\u0000\u0000\u0000\u0c13\u0c16\u0001\u0000\u0000\u0000"+
		"\u0c14\u0c16\u0003\u00e6s\u0000\u0c15\u0c03\u0001\u0000\u0000\u0000\u0c15"+
		"\u0c14\u0001\u0000\u0000\u0000\u0c15\u0c16\u0001\u0000\u0000\u0000\u0c16"+
		"\u00f1\u0001\u0000\u0000\u0000\u0c17\u0c19\u0005\u0176\u0000\u0000\u0c18"+
		"\u0c1a\u0003>\u001f\u0000\u0c19\u0c18\u0001\u0000\u0000\u0000\u0c19\u0c1a"+
		"\u0001\u0000\u0000\u0000\u0c1a\u0c1b\u0001\u0000\u0000\u0000\u0c1b\u0c1c"+
		"\u0003\u00d6k\u0000\u0c1c\u0c3d\u0003\u00d8l\u0000\u0c1d\u0c36\u0005\u0285"+
		"\u0000\u0000\u0c1e\u0c20\u0005\u028b\u0000\u0000\u0c1f\u0c1e\u0001\u0000"+
		"\u0000\u0000\u0c1f\u0c20\u0001\u0000\u0000\u0000\u0c20\u0c21\u0001\u0000"+
		"\u0000\u0000\u0c21\u0c23\u0003\u00e8t\u0000\u0c22\u0c1f\u0001\u0000\u0000"+
		"\u0000\u0c23\u0c24\u0001\u0000\u0000\u0000\u0c24\u0c22\u0001\u0000\u0000"+
		"\u0000\u0c24\u0c25\u0001\u0000\u0000\u0000\u0c25\u0c37\u0001\u0000\u0000"+
		"\u0000\u0c26\u0c28\u0005\u028b\u0000\u0000\u0c27\u0c26\u0001\u0000\u0000"+
		"\u0000\u0c27\u0c28\u0001\u0000\u0000\u0000\u0c28\u0c29\u0001\u0000\u0000"+
		"\u0000\u0c29\u0c2b\u0003\u00eau\u0000\u0c2a\u0c27\u0001\u0000\u0000\u0000"+
		"\u0c2b\u0c2c\u0001\u0000\u0000\u0000\u0c2c\u0c2a\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c2d\u0001\u0000\u0000\u0000\u0c2d\u0c37\u0001\u0000\u0000\u0000"+
		"\u0c2e\u0c30\u0005\u028b\u0000\u0000\u0c2f\u0c2e\u0001\u0000\u0000\u0000"+
		"\u0c2f\u0c30\u0001\u0000\u0000\u0000\u0c30\u0c31\u0001\u0000\u0000\u0000"+
		"\u0c31\u0c33\u0003\u00ecv\u0000\u0c32\u0c2f\u0001\u0000\u0000\u0000\u0c33"+
		"\u0c34\u0001\u0000\u0000\u0000\u0c34\u0c32\u0001\u0000\u0000\u0000\u0c34"+
		"\u0c35\u0001\u0000\u0000\u0000\u0c35\u0c37\u0001\u0000\u0000\u0000\u0c36"+
		"\u0c22\u0001\u0000\u0000\u0000\u0c36\u0c2a\u0001\u0000\u0000\u0000\u0c36"+
		"\u0c32\u0001\u0000\u0000\u0000\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38"+
		"\u0c39\u0005\u0286\u0000\u0000\u0c39\u0c3c\u0001\u0000\u0000\u0000\u0c3a"+
		"\u0c3c\u0003\u00f4z\u0000\u0c3b\u0c1d\u0001\u0000\u0000\u0000\u0c3b\u0c3a"+
		"\u0001\u0000\u0000\u0000\u0c3c\u0c3e\u0001\u0000\u0000\u0000\u0c3d\u0c3b"+
		"\u0001\u0000\u0000\u0000\u0c3d\u0c3e\u0001\u0000\u0000\u0000\u0c3e\u00f3"+
		"\u0001\u0000\u0000\u0000\u0c3f\u0c40\u0005\u01f5\u0000\u0000\u0c40\u0c4e"+
		"\u0005\u027f\u0000\u0000\u0c41\u0c42\u0005\u01f1\u0000\u0000\u0c42\u0c43"+
		"\u0005\u00d9\u0000\u0000\u0c43\u0c48\u0005\u0285\u0000\u0000\u0c44\u0c46"+
		"\u0005\u028b\u0000\u0000\u0c45\u0c44\u0001\u0000\u0000\u0000\u0c45\u0c46"+
		"\u0001\u0000\u0000\u0000\u0c46\u0c47\u0001\u0000\u0000\u0000\u0c47\u0c49"+
		"\u0003*\u0015\u0000\u0c48\u0c45\u0001\u0000\u0000\u0000\u0c49\u0c4a\u0001"+
		"\u0000\u0000\u0000\u0c4a\u0c48\u0001\u0000\u0000\u0000\u0c4a\u0c4b\u0001"+
		"\u0000\u0000\u0000\u0c4b\u0c4c\u0001\u0000\u0000\u0000\u0c4c\u0c4d\u0005"+
		"\u0286\u0000\u0000\u0c4d\u0c4f\u0001\u0000\u0000\u0000\u0c4e\u0c41\u0001"+
		"\u0000\u0000\u0000\u0c4e\u0c4f\u0001\u0000\u0000\u0000\u0c4f\u00f5\u0001"+
		"\u0000\u0000\u0000\u0c50\u0c51\u0005\u0176\u0000\u0000\u0c51\u0c52\u0005"+
		"3\u0000\u0000\u0c52\u0c53\u0005\u010b\u0000\u0000\u0c53\u0c54\u0005\u0285"+
		"\u0000\u0000\u0c54\u0c55\u0003\u0402\u0201\u0000\u0c55\u0c59\u0005\u0286"+
		"\u0000\u0000\u0c56\u0c5a\u0003\u00e2q\u0000\u0c57\u0c5a\u0003\u00e4r\u0000"+
		"\u0c58\u0c5a\u0003\u00f0x\u0000\u0c59\u0c56\u0001\u0000\u0000\u0000\u0c59"+
		"\u0c57\u0001\u0000\u0000\u0000\u0c59\u0c58\u0001\u0000\u0000\u0000\u0c5a"+
		"\u0c5b\u0001\u0000\u0000\u0000\u0c5b\u0c60\u0005\u0285\u0000\u0000\u0c5c"+
		"\u0c5e\u0005\u028b\u0000\u0000\u0c5d\u0c5c\u0001\u0000\u0000\u0000\u0c5d"+
		"\u0c5e\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f"+
		"\u0c61\u0003\u00f8|\u0000\u0c60\u0c5d\u0001\u0000\u0000\u0000\u0c61\u0c62"+
		"\u0001\u0000\u0000\u0000\u0c62\u0c60\u0001\u0000\u0000\u0000\u0c62\u0c63"+
		"\u0001\u0000\u0000\u0000\u0c63\u0c64\u0001\u0000\u0000\u0000\u0c64\u0c65"+
		"\u0005\u0286\u0000\u0000\u0c65\u00f7\u0001\u0000\u0000\u0000\u0c66\u0c68"+
		"\u0005\u0176\u0000\u0000\u0c67\u0c69\u0003>\u001f\u0000\u0c68\u0c67\u0001"+
		"\u0000\u0000\u0000\u0c68\u0c69\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0001"+
		"\u0000\u0000\u0000\u0c6a\u0c6b\u0003\u00dcn\u0000\u0c6b\u0c8c\u0003\u00d8"+
		"l\u0000\u0c6c\u0c85\u0005\u0285\u0000\u0000\u0c6d\u0c6f\u0005\u028b\u0000"+
		"\u0000\u0c6e\u0c6d\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0001\u0000\u0000"+
		"\u0000\u0c6f\u0c70\u0001\u0000\u0000\u0000\u0c70\u0c72\u0003\u00e8t\u0000"+
		"\u0c71\u0c6e\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000"+
		"\u0c73\u0c71\u0001\u0000\u0000\u0000\u0c73\u0c74\u0001\u0000\u0000\u0000"+
		"\u0c74\u0c86\u0001\u0000\u0000\u0000\u0c75\u0c77\u0005\u028b\u0000\u0000"+
		"\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76\u0c77\u0001\u0000\u0000\u0000"+
		"\u0c77\u0c78\u0001\u0000\u0000\u0000\u0c78\u0c7a\u0003\u00eau\u0000\u0c79"+
		"\u0c76\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0001\u0000\u0000\u0000\u0c7b"+
		"\u0c79\u0001\u0000\u0000\u0000\u0c7b\u0c7c\u0001\u0000\u0000\u0000\u0c7c"+
		"\u0c86\u0001\u0000\u0000\u0000\u0c7d\u0c7f\u0005\u028b\u0000\u0000\u0c7e"+
		"\u0c7d\u0001\u0000\u0000\u0000\u0c7e\u0c7f\u0001\u0000\u0000\u0000\u0c7f"+
		"\u0c80\u0001\u0000\u0000\u0000\u0c80\u0c82\u0003\u00ecv\u0000\u0c81\u0c7e"+
		"\u0001\u0000\u0000\u0000\u0c82\u0c83\u0001\u0000\u0000\u0000\u0c83\u0c81"+
		"\u0001\u0000\u0000\u0000\u0c83\u0c84\u0001\u0000\u0000\u0000\u0c84\u0c86"+
		"\u0001\u0000\u0000\u0000\u0c85\u0c71\u0001\u0000\u0000\u0000\u0c85\u0c79"+
		"\u0001\u0000\u0000\u0000\u0c85\u0c81\u0001\u0000\u0000\u0000\u0c86\u0c87"+
		"\u0001\u0000\u0000\u0000\u0c87\u0c88\u0005\u0286\u0000\u0000\u0c88\u0c8b"+
		"\u0001\u0000\u0000\u0000\u0c89\u0c8b\u0003\u00f4z\u0000\u0c8a\u0c6c\u0001"+
		"\u0000\u0000\u0000\u0c8a\u0c89\u0001\u0000\u0000\u0000\u0c8b\u0c8d\u0001"+
		"\u0000\u0000\u0000\u0c8c\u0c8a\u0001\u0000\u0000\u0000\u0c8c\u0c8d\u0001"+
		"\u0000\u0000\u0000\u0c8d\u00f9\u0001\u0000\u0000\u0000\u0c8e\u0c8f\u0005"+
		"\u0176\u0000\u0000\u0c8f\u0c90\u00053\u0000\u0000\u0c90\u0c91\u0005\u00ce"+
		"\u0000\u0000\u0c91\u0c94\u0005\u0285\u0000\u0000\u0c92\u0c93\u0005\u028b"+
		"\u0000\u0000\u0c93\u0c95\u0003\u0402\u0201\u0000\u0c94\u0c92\u0001\u0000"+
		"\u0000\u0000\u0c95\u0c96\u0001\u0000\u0000\u0000\u0c96\u0c94\u0001\u0000"+
		"\u0000\u0000\u0c96\u0c97\u0001\u0000\u0000\u0000\u0c97\u0c98\u0001\u0000"+
		"\u0000\u0000\u0c98\u0c9c\u0005\u0286\u0000\u0000\u0c99\u0c9d\u0003\u00e2"+
		"q\u0000\u0c9a\u0c9d\u0003\u00e4r\u0000\u0c9b\u0c9d\u0003\u00f0x\u0000"+
		"\u0c9c\u0c99\u0001\u0000\u0000\u0000\u0c9c\u0c9a\u0001\u0000\u0000\u0000"+
		"\u0c9c\u0c9b\u0001\u0000\u0000\u0000\u0c9d\u0ca0\u0001\u0000\u0000\u0000"+
		"\u0c9e\u0ca1\u0003F#\u0000\u0c9f\u0ca1\u0003T*\u0000\u0ca0\u0c9e\u0001"+
		"\u0000\u0000\u0000\u0ca0\u0c9f\u0001\u0000\u0000\u0000\u0ca1\u00fb\u0001"+
		"\u0000\u0000\u0000\u0ca2\u0ca3\u0005\u0176\u0000\u0000\u0ca3\u0ca4\u0005"+
		"3\u0000\u0000\u0ca4\u0ca5\u0005\u01a0\u0000\u0000\u0ca5\u0ca6\u0005\u0285"+
		"\u0000\u0000\u0ca6\u0ca7\u0003\u043c\u021e\u0000\u0ca7\u0cb3\u0005\u0286"+
		"\u0000\u0000\u0ca8\u0cad\u0005\u0285\u0000\u0000\u0ca9\u0cab\u0005\u028b"+
		"\u0000\u0000\u0caa\u0ca9\u0001\u0000\u0000\u0000\u0caa\u0cab\u0001\u0000"+
		"\u0000\u0000\u0cab\u0cac\u0001\u0000\u0000\u0000\u0cac\u0cae\u0003\u00fe"+
		"\u007f\u0000\u0cad\u0caa\u0001\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000"+
		"\u0000\u0000\u0caf\u0cad\u0001\u0000\u0000\u0000\u0caf\u0cb0\u0001\u0000"+
		"\u0000\u0000\u0cb0\u0cb1\u0001\u0000\u0000\u0000\u0cb1\u0cb2\u0005\u0286"+
		"\u0000\u0000\u0cb2\u0cb4\u0001\u0000\u0000\u0000\u0cb3\u0ca8\u0001\u0000"+
		"\u0000\u0000\u0cb3\u0cb4\u0001\u0000\u0000\u0000\u0cb4\u00fd\u0001\u0000"+
		"\u0000\u0000\u0cb5\u0cb7\u0005\u0176\u0000\u0000\u0cb6\u0cb8\u0003>\u001f"+
		"\u0000\u0cb7\u0cb6\u0001\u0000\u0000\u0000\u0cb7\u0cb8\u0001\u0000\u0000"+
		"\u0000\u0cb8\u0cb9\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0003\u00d8l\u0000"+
		"\u0cba\u00ff\u0001\u0000\u0000\u0000\u0cbb\u0cbc\u0005\u0176\u0000\u0000"+
		"\u0cbc\u0cbd\u00053\u0000\u0000\u0cbd\u0cc8\u0005\u01fc\u0000\u0000\u0cbe"+
		"\u0cbf\u0005\u0184\u0000\u0000\u0cbf\u0cc9\u0005\u027f\u0000\u0000\u0cc0"+
		"\u0cc2\u0005\u028b\u0000\u0000\u0cc1\u0cc0\u0001\u0000\u0000\u0000\u0cc1"+
		"\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0cc3\u0001\u0000\u0000\u0000\u0cc3"+
		"\u0cc5\u0003\u00fe\u007f\u0000\u0cc4\u0cc1\u0001\u0000\u0000\u0000\u0cc5"+
		"\u0cc6\u0001\u0000\u0000\u0000\u0cc6\u0cc4\u0001\u0000\u0000\u0000\u0cc6"+
		"\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cc9\u0001\u0000\u0000\u0000\u0cc8"+
		"\u0cbe\u0001\u0000\u0000\u0000\u0cc8\u0cc4\u0001\u0000\u0000\u0000\u0cc8"+
		"\u0cc9\u0001\u0000\u0000\u0000\u0cc9\u0101\u0001\u0000\u0000\u0000\u0cca"+
		"\u0ccc\u0007\u0004\u0000\u0000\u0ccb\u0ccd\u0007\u001d\u0000\u0000\u0ccc"+
		"\u0ccb\u0001\u0000\u0000\u0000\u0ccc\u0ccd\u0001\u0000\u0000\u0000\u0ccd"+
		"\u0cd4\u0001\u0000\u0000\u0000\u0cce\u0ccf\u0005\u021e\u0000\u0000\u0ccf"+
		"\u0cd5\u0003\u00aeW\u0000\u0cd0\u0cd1\u0005\u018e\u0000\u0000\u0cd1\u0cd5"+
		"\u0005\u00fc\u0000\u0000\u0cd2\u0cd3\u0005X\u0000\u0000\u0cd3\u0cd5\u0003"+
		"\u03e6\u01f3\u0000\u0cd4\u0cce\u0001\u0000\u0000\u0000\u0cd4\u0cd0\u0001"+
		"\u0000\u0000\u0000\u0cd4\u0cd2\u0001\u0000\u0000\u0000\u0cd5\u0cd7\u0001"+
		"\u0000\u0000\u0000\u0cd6\u0cd8\u0003\u00b6[\u0000\u0cd7\u0cd6\u0001\u0000"+
		"\u0000\u0000\u0cd7\u0cd8\u0001\u0000\u0000\u0000\u0cd8\u0cda\u0001\u0000"+
		"\u0000\u0000\u0cd9\u0cdb\u0003\u0104\u0082\u0000\u0cda\u0cd9\u0001\u0000"+
		"\u0000\u0000\u0cda\u0cdb\u0001\u0000\u0000\u0000\u0cdb\u0cdd\u0001\u0000"+
		"\u0000\u0000\u0cdc\u0cde\u00059\u0000\u0000\u0cdd\u0cdc\u0001\u0000\u0000"+
		"\u0000\u0cdd\u0cde\u0001\u0000\u0000\u0000\u0cde\u0ce1\u0001\u0000\u0000"+
		"\u0000\u0cdf\u0ce0\u0007\"\u0000\u0000\u0ce0\u0ce2\u0005\u00de\u0000\u0000"+
		"\u0ce1\u0cdf\u0001\u0000\u0000\u0000\u0ce1\u0ce2\u0001\u0000\u0000\u0000"+
		"\u0ce2\u0103\u0001\u0000\u0000\u0000\u0ce3\u0ce4\u0005\u00a6\u0000\u0000"+
		"\u0ce4\u0ce5\u0005\u00f2\u0000\u0000\u0ce5\u0ce6\u0003\u0406\u0203\u0000"+
		"\u0ce6\u0105\u0001\u0000\u0000\u0000\u0ce7\u0ce9\u0007\u0004\u0000\u0000"+
		"\u0ce8\u0ce7\u0001\u0000\u0000\u0000\u0ce8\u0ce9\u0001\u0000\u0000\u0000"+
		"\u0ce9\u0cea\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0005\u01ba\u0000\u0000"+
		"\u0ceb\u0cec\u0005\u012f\u0000\u0000\u0cec\u0107\u0001\u0000\u0000\u0000"+
		"\u0ced\u0cee\u0005\u00b8\u0000\u0000\u0cee\u0cef\u0005\u0012\u0000\u0000"+
		"\u0cef\u0cf4\u0005\u02a4\u0000\u0000\u0cf0\u0cf1\u0005\u013d\u0000\u0000"+
		"\u0cf1\u0cf2\u0005\u00b8\u0000\u0000\u0cf2\u0cf4\u0005\u0012\u0000\u0000"+
		"\u0cf3\u0ced\u0001\u0000\u0000\u0000\u0cf3\u0cf0\u0001\u0000\u0000\u0000"+
		"\u0cf4\u0109\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0005\u015c\u0000\u0000"+
		"\u0cf6\u0cf8\u0003\u03ea\u01f5\u0000\u0cf7\u0cf9\u0003\u010c\u0086\u0000"+
		"\u0cf8\u0cf7\u0001\u0000\u0000\u0000\u0cf8\u0cf9\u0001\u0000\u0000\u0000"+
		"\u0cf9\u0d05\u0001\u0000\u0000\u0000\u0cfa\u0cff\u0005\u0285\u0000\u0000"+
		"\u0cfb\u0cfd\u0005\u028b\u0000\u0000\u0cfc\u0cfb\u0001\u0000\u0000\u0000"+
		"\u0cfc\u0cfd\u0001\u0000\u0000\u0000\u0cfd\u0cfe\u0001\u0000\u0000\u0000"+
		"\u0cfe\u0d00\u0003\u00a8T\u0000\u0cff\u0cfc\u0001\u0000\u0000\u0000\u0d00"+
		"\u0d01\u0001\u0000\u0000\u0000\u0d01\u0cff\u0001\u0000\u0000\u0000\u0d01"+
		"\u0d02\u0001\u0000\u0000\u0000\u0d02\u0d03\u0001\u0000\u0000\u0000\u0d03"+
		"\u0d04\u0005\u0286\u0000\u0000\u0d04\u0d06\u0001\u0000\u0000\u0000\u0d05"+
		"\u0cfa\u0001\u0000\u0000\u0000\u0d05\u0d06\u0001\u0000\u0000\u0000\u0d06"+
		"\u0d0b\u0001\u0000\u0000\u0000\u0d07\u0d08\u0005\u0162\u0000\u0000\u0d08"+
		"\u0d09\u0005L\u0000\u0000\u0d09\u0d0a\u0007\u0013\u0000\u0000\u0d0a\u0d0c"+
		"\u0005\u01bd\u0000\u0000\u0d0b\u0d07\u0001\u0000\u0000\u0000\u0d0b\u0d0c"+
		"\u0001\u0000\u0000\u0000\u0d0c\u0d0e\u0001\u0000\u0000\u0000\u0d0d\u0d0f"+
		"\u0003\u010e\u0087\u0000\u0d0e\u0d0d\u0001\u0000\u0000\u0000\u0d0e\u0d0f"+
		"\u0001\u0000\u0000\u0000\u0d0f\u0d11\u0001\u0000\u0000\u0000\u0d10\u0d12"+
		"\u0003\u0110\u0088\u0000\u0d11\u0d10\u0001\u0000\u0000\u0000\u0d11\u0d12"+
		"\u0001\u0000\u0000\u0000\u0d12\u0d14\u0001\u0000\u0000\u0000\u0d13\u0d15"+
		"\u0003\u0090H\u0000\u0d14\u0d13\u0001\u0000\u0000\u0000\u0d14\u0d15\u0001"+
		"\u0000\u0000\u0000\u0d15\u0d17\u0001\u0000\u0000\u0000\u0d16\u0d18\u0003"+
		"\u009eO\u0000\u0d17\u0d16\u0001\u0000\u0000\u0000\u0d17\u0d18\u0001\u0000"+
		"\u0000\u0000\u0d18\u0d1a\u0001\u0000\u0000\u0000\u0d19\u0d1b\u0003\u00d2"+
		"i\u0000\u0d1a\u0d19\u0001\u0000\u0000\u0000\u0d1a\u0d1b\u0001\u0000\u0000"+
		"\u0000\u0d1b\u0d1d\u0001\u0000\u0000\u0000\u0d1c\u0d1e\u0007\u0003\u0000"+
		"\u0000\u0d1d\u0d1c\u0001\u0000\u0000\u0000\u0d1d\u0d1e\u0001\u0000\u0000"+
		"\u0000\u0d1e\u0d24\u0001\u0000\u0000\u0000\u0d1f\u0d20\u0005\u01ae\u0000"+
		"\u0000\u0d20\u0d21\u0005\u0285\u0000\u0000\u0d21\u0d22\u0005\u012b\u0000"+
		"\u0000\u0d22\u0d23\u0007\u0014\u0000\u0000\u0d23\u0d25\u0005\u0286\u0000"+
		"\u0000\u0d24\u0d1f\u0001\u0000\u0000\u0000\u0d24\u0d25\u0001\u0000\u0000"+
		"\u0000\u0d25\u0d27\u0001\u0000\u0000\u0000\u0d26\u0d28\u00032\u0019\u0000"+
		"\u0d27\u0d26\u0001\u0000\u0000\u0000\u0d27\u0d28\u0001\u0000\u0000\u0000"+
		"\u0d28\u0d2a\u0001\u0000\u0000\u0000\u0d29\u0d2b\u0007\u0015\u0000\u0000"+
		"\u0d2a\u0d29\u0001\u0000\u0000\u0000\u0d2a\u0d2b\u0001\u0000\u0000\u0000"+
		"\u0d2b\u0d31\u0001\u0000\u0000\u0000\u0d2c\u0d2e\u0003\u0102\u0081\u0000"+
		"\u0d2d\u0d2c\u0001\u0000\u0000\u0000\u0d2e\u0d2f\u0001\u0000\u0000\u0000"+
		"\u0d2f\u0d2d\u0001\u0000\u0000\u0000\u0d2f\u0d30\u0001\u0000\u0000\u0000"+
		"\u0d30\u0d32\u0001\u0000\u0000\u0000\u0d31\u0d2d\u0001\u0000\u0000\u0000"+
		"\u0d31\u0d32\u0001\u0000\u0000\u0000\u0d32\u0d34\u0001\u0000\u0000\u0000"+
		"\u0d33\u0d35\u0003\u0106\u0083\u0000\u0d34\u0d33\u0001\u0000\u0000\u0000"+
		"\u0d34\u0d35\u0001\u0000\u0000\u0000\u0d35\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d36\u0d38\u0003\u0108\u0084\u0000\u0d37\u0d36\u0001\u0000\u0000\u0000"+
		"\u0d37\u0d38\u0001\u0000\u0000\u0000\u0d38\u010b\u0001\u0000\u0000\u0000"+
		"\u0d39\u0d3b\u0005\u0151\u0000\u0000\u0d3a\u0d39\u0001\u0000\u0000\u0000"+
		"\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b\u0d3c\u0001\u0000\u0000\u0000"+
		"\u0d3c\u0d3d\u0005\u01f6\u0000\u0000\u0d3d\u0d3e\u0005\u0017\u0000\u0000"+
		"\u0d3e\u0d3f\u0005\t\u0000\u0000\u0d3f\u0d40\u0005\u0104\u0000\u0000\u0d40"+
		"\u010d\u0001\u0000\u0000\u0000\u0d41\u0d42\u0005\u015b\u0000\u0000\u0d42"+
		"\u0d43\u0005\u00d4\u0000\u0000\u0d43\u0d48\u0005\u00f5\u0000\u0000\u0d44"+
		"\u0d45\u0005\u01fc\u0000\u0000\u0d45\u0d49\u0005\u00c7\u0000\u0000\u0d46"+
		"\u0d47\u0005\u018e\u0000\u0000\u0d47\u0d49\u0005\u00fc\u0000\u0000\u0d48"+
		"\u0d44\u0001\u0000\u0000\u0000\u0d48\u0d46\u0001\u0000\u0000\u0000\u0d49"+
		"\u010f\u0001\u0000\u0000\u0000\u0d4a\u0d4c\u0005\u015f\u0000\u0000\u0d4b"+
		"\u0d4d\u0003\u03f8\u01fc\u0000\u0d4c\u0d4b\u0001\u0000\u0000\u0000\u0d4c"+
		"\u0d4d\u0001\u0000\u0000\u0000\u0d4d\u0d4e\u0001\u0000\u0000\u0000\u0d4e"+
		"\u0d52\u0005\u0285\u0000\u0000\u0d4f\u0d53\u0003\u0096K\u0000\u0d50\u0d51"+
		"\u0005\u01ff\u0000\u0000\u0d51\u0d53\u0003*\u0015\u0000\u0d52\u0d4f\u0001"+
		"\u0000\u0000\u0000\u0d52\u0d50\u0001\u0000\u0000\u0000\u0d53\u0d54\u0001"+
		"\u0000\u0000\u0000\u0d54\u0d52\u0001\u0000\u0000\u0000\u0d54\u0d55\u0001"+
		"\u0000\u0000\u0000\u0d55\u0d56\u0001\u0000\u0000\u0000\u0d56\u0d57\u0005"+
		"\u0286\u0000\u0000\u0d57\u0111\u0001\u0000\u0000\u0000\u0d58\u0d59\u0005"+
		"\u015c\u0000\u0000\u0d59\u0d5e\u0005\u0258\u0000\u0000\u0d5a\u0d5b\u0005"+
		"\u0285\u0000\u0000\u0d5b\u0d5c\u0003\u00a8T\u0000\u0d5c\u0d5d\u0005\u0286"+
		"\u0000\u0000\u0d5d\u0d5f\u0001\u0000\u0000\u0000\u0d5e\u0d5a\u0001\u0000"+
		"\u0000\u0000\u0d5e\u0d5f\u0001\u0000\u0000\u0000\u0d5f\u0d62\u0001\u0000"+
		"\u0000\u0000\u0d60\u0d61\u0005\u0258\u0000\u0000\u0d61\u0d63\u0003\u00cc"+
		"f\u0000\u0d62\u0d60\u0001\u0000\u0000\u0000\u0d62\u0d63\u0001\u0000\u0000"+
		"\u0000\u0d63\u0d65\u0001\u0000\u0000\u0000\u0d64\u0d66\u0003\u00ceg\u0000"+
		"\u0d65\u0d64\u0001\u0000\u0000\u0000\u0d65\u0d66\u0001\u0000\u0000\u0000"+
		"\u0d66\u0d68\u0001\u0000\u0000\u0000\u0d67\u0d69\u0003\u0114\u008a\u0000"+
		"\u0d68\u0d67\u0001\u0000\u0000\u0000\u0d68\u0d69\u0001\u0000\u0000\u0000"+
		"\u0d69\u0d6e\u0001\u0000\u0000\u0000\u0d6a\u0d6b\u0005\u0162\u0000\u0000"+
		"\u0d6b\u0d6c\u0005L\u0000\u0000\u0d6c\u0d6d\u0007\u0013\u0000\u0000\u0d6d"+
		"\u0d6f\u0005\u01bd\u0000\u0000\u0d6e\u0d6a\u0001\u0000\u0000\u0000\u0d6e"+
		"\u0d6f\u0001\u0000\u0000\u0000\u0d6f\u0d71\u0001\u0000\u0000\u0000\u0d70"+
		"\u0d72\u0003\u010e\u0087\u0000\u0d71\u0d70\u0001\u0000\u0000\u0000\u0d71"+
		"\u0d72\u0001\u0000\u0000\u0000\u0d72\u0d74\u0001\u0000\u0000\u0000\u0d73"+
		"\u0d75\u0003\u0110\u0088\u0000\u0d74\u0d73\u0001\u0000\u0000\u0000\u0d74"+
		"\u0d75\u0001\u0000\u0000\u0000\u0d75\u0d77\u0001\u0000\u0000\u0000\u0d76"+
		"\u0d78\u0003\u0090H\u0000\u0d77\u0d76\u0001\u0000\u0000\u0000\u0d77\u0d78"+
		"\u0001\u0000\u0000\u0000\u0d78\u0d7a\u0001\u0000\u0000\u0000\u0d79\u0d7b"+
		"\u0003\u009eO\u0000\u0d7a\u0d79\u0001\u0000\u0000\u0000\u0d7a\u0d7b\u0001"+
		"\u0000\u0000\u0000\u0d7b\u0d7d\u0001\u0000\u0000\u0000\u0d7c\u0d7e\u0003"+
		"\u00d2i\u0000\u0d7d\u0d7c\u0001\u0000\u0000\u0000\u0d7d\u0d7e\u0001\u0000"+
		"\u0000\u0000\u0d7e\u0d80\u0001\u0000\u0000\u0000\u0d7f\u0d81\u0007\u0003"+
		"\u0000\u0000\u0d80\u0d7f\u0001\u0000\u0000\u0000\u0d80\u0d81\u0001\u0000"+
		"\u0000\u0000\u0d81\u0d87\u0001\u0000\u0000\u0000\u0d82\u0d83\u0005\u01ae"+
		"\u0000\u0000\u0d83\u0d84\u0005\u0285\u0000\u0000\u0d84\u0d85\u0005\u012b"+
		"\u0000\u0000\u0d85\u0d86\u0007\u0014\u0000\u0000\u0d86\u0d88\u0005\u0286"+
		"\u0000\u0000\u0d87\u0d82\u0001\u0000\u0000\u0000\u0d87\u0d88\u0001\u0000"+
		"\u0000\u0000\u0d88\u0d8a\u0001\u0000\u0000\u0000\u0d89\u0d8b\u00032\u0019"+
		"\u0000\u0d8a\u0d89\u0001\u0000\u0000\u0000\u0d8a\u0d8b\u0001\u0000\u0000"+
		"\u0000\u0d8b\u0d8d\u0001\u0000\u0000\u0000\u0d8c\u0d8e\u0007\u0015\u0000"+
		"\u0000\u0d8d\u0d8c\u0001\u0000\u0000\u0000\u0d8d\u0d8e\u0001\u0000\u0000"+
		"\u0000\u0d8e\u0d94\u0001\u0000\u0000\u0000\u0d8f\u0d91\u0003\u0102\u0081"+
		"\u0000\u0d90\u0d8f\u0001\u0000\u0000\u0000\u0d91\u0d92\u0001\u0000\u0000"+
		"\u0000\u0d92\u0d90\u0001\u0000\u0000\u0000\u0d92\u0d93\u0001\u0000\u0000"+
		"\u0000\u0d93\u0d95\u0001\u0000\u0000\u0000\u0d94\u0d90\u0001\u0000\u0000"+
		"\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000\u0d95\u0d97\u0001\u0000\u0000"+
		"\u0000\u0d96\u0d98\u0003\u0106\u0083\u0000\u0d97\u0d96\u0001\u0000\u0000"+
		"\u0000\u0d97\u0d98\u0001\u0000\u0000\u0000\u0d98\u0d9a\u0001\u0000\u0000"+
		"\u0000\u0d99\u0d9b\u0003\u0108\u0084\u0000\u0d9a\u0d99\u0001\u0000\u0000"+
		"\u0000\u0d9a\u0d9b\u0001\u0000\u0000\u0000\u0d9b\u0113\u0001\u0000\u0000"+
		"\u0000\u0d9c\u0d9d\u0005\u0238\u0000\u0000\u0d9d\u0d9e\u0005I\u0000\u0000"+
		"\u0d9e\u0da8\u0005\u0285\u0000\u0000\u0d9f\u0da1\u0005\u028b\u0000\u0000"+
		"\u0da0\u0d9f\u0001\u0000\u0000\u0000\u0da0\u0da1\u0001\u0000\u0000\u0000"+
		"\u0da1\u0da2\u0001\u0000\u0000\u0000\u0da2\u0da3\u0003\u0402\u0201\u0000"+
		"\u0da3\u0da4\u0005\u0014\u0000\u0000\u0da4\u0da5\u0005\u0285\u0000\u0000"+
		"\u0da5\u0da6\u0003\u0344\u01a2\u0000\u0da6\u0da7\u0005\u0286\u0000\u0000"+
		"\u0da7\u0da9\u0001\u0000\u0000\u0000\u0da8\u0da0\u0001\u0000\u0000\u0000"+
		"\u0da9\u0daa\u0001\u0000\u0000\u0000\u0daa\u0da8\u0001\u0000\u0000\u0000"+
		"\u0daa\u0dab\u0001\u0000\u0000\u0000\u0dab\u0dac\u0001\u0000\u0000\u0000"+
		"\u0dac\u0dad\u0005\u0286\u0000\u0000\u0dad\u0115\u0001\u0000\u0000\u0000"+
		"\u0dae\u0daf\u0005\u0091\u0000\u0000\u0daf\u0db2\u0005\u01fd\u0000\u0000"+
		"\u0db0\u0db1\u0005\u00d5\u0000\u0000\u0db1\u0db3\u0005\u00aa\u0000\u0000"+
		"\u0db2\u0db0\u0001\u0000\u0000\u0000\u0db2\u0db3\u0001\u0000\u0000\u0000"+
		"\u0db3\u0db4\u0001\u0000\u0000\u0000\u0db4\u0db6\u0003\u0406\u0203\u0000"+
		"\u0db5\u0db7\u0005\u0192\u0000\u0000\u0db6\u0db5\u0001\u0000\u0000\u0000"+
		"\u0db6\u0db7\u0001\u0000\u0000\u0000\u0db7\u0117\u0001\u0000\u0000\u0000"+
		"\u0db8\u0db9\u0005\f\u0000\u0000\u0db9\u0dba\u0005\u01fd\u0000\u0000\u0dba"+
		"\u0dbf\u0003\u0406\u0203\u0000\u0dbb\u0dc0\u0001\u0000\u0000\u0000\u0dbc"+
		"\u0dc0\u0003\u011a\u008d\u0000\u0dbd\u0dc0\u0003\u0138\u009c\u0000\u0dbe"+
		"\u0dc0\u0003\u0142\u00a1\u0000\u0dbf\u0dbb\u0001\u0000\u0000\u0000\u0dbf"+
		"\u0dbc\u0001\u0000\u0000\u0000\u0dbf\u0dbd\u0001\u0000\u0000\u0000\u0dbf"+
		"\u0dbe\u0001\u0000\u0000\u0000\u0dc0\u0119\u0001\u0000\u0000\u0000\u0dc1"+
		"\u0dcd\u0003\u011c\u008e\u0000\u0dc2\u0dc3\u0005\u01a9\u0000\u0000\u0dc3"+
		"\u0dc4\u0005\u020e\u0000\u0000\u0dc4\u0dcd\u0003\u0406\u0203\u0000\u0dc5"+
		"\u0dcd\u0003\u0134\u009a\u0000\u0dc6\u0dc7\u0005\u0197\u0000\u0000\u0dc7"+
		"\u0dcd\u0005\u0163\u0000\u0000\u0dc8\u0dc9\u0005\u0197\u0000\u0000\u0dc9"+
		"\u0dcd\u0005\u0245\u0000\u0000\u0dca\u0dcb\u0005\u01a5\u0000\u0000\u0dcb"+
		"\u0dcd\u0005\u0281\u0000\u0000\u0dcc\u0dc1\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dc2\u0001\u0000\u0000\u0000\u0dcc\u0dc5\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dcc\u0dc8\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dca\u0001\u0000\u0000\u0000\u0dcd\u011b\u0001\u0000\u0000\u0000\u0dce"+
		"\u0de0\u0003\u0096K\u0000\u0dcf\u0de0\u0003\u009cN\u0000\u0dd0\u0de0\u0003"+
		"J%\u0000\u0dd1\u0de0\u0003\u011e\u008f\u0000\u0dd2\u0de0\u0003\u0120\u0090"+
		"\u0000\u0dd3\u0de0\u0003\u0122\u0091\u0000\u0dd4\u0de0\u0007\u0003\u0000"+
		"\u0000\u0dd5\u0dd6\u0005\u01ae\u0000\u0000\u0dd6\u0dd7\u0005\u0285\u0000"+
		"\u0000\u0dd7\u0dd8\u0005\u012b\u0000\u0000\u0dd8\u0dd9\u0007\u0014\u0000"+
		"\u0000\u0dd9\u0de0\u0005\u0286\u0000\u0000\u0dda\u0de0\u0003\u0124\u0092"+
		"\u0000\u0ddb\u0de0\u0003\u0126\u0093\u0000\u0ddc\u0de0\u00032\u0019\u0000"+
		"\u0ddd\u0de0\u0003\u0106\u0083\u0000\u0dde\u0de0\u0003\u0108\u0084\u0000"+
		"\u0ddf\u0dce\u0001\u0000\u0000\u0000\u0ddf\u0dcf\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0dd0\u0001\u0000\u0000\u0000\u0ddf\u0dd1\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0dd2\u0001\u0000\u0000\u0000\u0ddf\u0dd3\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0dd4\u0001\u0000\u0000\u0000\u0ddf\u0dd5\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0dda\u0001\u0000\u0000\u0000\u0ddf\u0ddb\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0ddc\u0001\u0000\u0000\u0000\u0ddf\u0ddd\u0001\u0000\u0000\u0000"+
		"\u0ddf\u0dde\u0001\u0000\u0000\u0000\u0de0\u0de1\u0001\u0000\u0000\u0000"+
		"\u0de1\u0ddf\u0001\u0000\u0000\u0000\u0de1\u0de2\u0001\u0000\u0000\u0000"+
		"\u0de2\u0de4\u0001\u0000\u0000\u0000\u0de3\u0de5\u0003\u0128\u0094\u0000"+
		"\u0de4\u0de3\u0001\u0000\u0000\u0000\u0de4\u0de5\u0001\u0000\u0000\u0000"+
		"\u0de5\u011d\u0001\u0000\u0000\u0000\u0de6\u0df2\u0005\u0005\u0000\u0000"+
		"\u0de7\u0de9\u0005\u028b\u0000\u0000\u0de8\u0de7\u0001\u0000\u0000\u0000"+
		"\u0de8\u0de9\u0001\u0000\u0000\u0000\u0de9\u0dea\u0001\u0000\u0000\u0000"+
		"\u0dea\u0deb\u0005\u01fa\u0000\u0000\u0deb\u0dee\u0005\u0112\u0000\u0000"+
		"\u0dec\u0def\u0003\u008aE\u0000\u0ded\u0def\u0003\u008eG\u0000\u0dee\u0dec"+
		"\u0001\u0000\u0000\u0000\u0dee\u0ded\u0001\u0000\u0000\u0000\u0def\u0df1"+
		"\u0001\u0000\u0000\u0000\u0df0\u0de8\u0001\u0000\u0000\u0000\u0df1\u0df4"+
		"\u0001\u0000\u0000\u0000\u0df2\u0df0\u0001\u0000\u0000\u0000\u0df2\u0df3"+
		"\u0001\u0000\u0000\u0000\u0df3\u0e06\u0001\u0000\u0000\u0000\u0df4\u0df2"+
		"\u0001\u0000\u0000\u0000\u0df5\u0e02\u0005\u0091\u0000\u0000\u0df6\u0df8"+
		"\u0005\u028b\u0000\u0000\u0df7\u0df6\u0001\u0000\u0000\u0000\u0df7\u0df8"+
		"\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000\u0000\u0df9\u0dfa"+
		"\u0005\u01fa\u0000\u0000\u0dfa\u0dfe\u0005\u0112\u0000\u0000\u0dfb\u0dff"+
		"\u0003\u008eG\u0000\u0dfc\u0dfd\u0005\u00cb\u0000\u0000\u0dfd\u0dff\u0003"+
		"\u008cF\u0000\u0dfe\u0dfb\u0001\u0000\u0000\u0000\u0dfe\u0dfc\u0001\u0000"+
		"\u0000\u0000\u0dff\u0e01\u0001\u0000\u0000\u0000\u0e00\u0df7\u0001\u0000"+
		"\u0000\u0000\u0e01\u0e04\u0001\u0000\u0000\u0000\u0e02\u0e00\u0001\u0000"+
		"\u0000\u0000\u0e02\u0e03\u0001\u0000\u0000\u0000\u0e03\u0e06\u0001\u0000"+
		"\u0000\u0000\u0e04\u0e02\u0001\u0000\u0000\u0000\u0e05\u0de6\u0001\u0000"+
		"\u0000\u0000\u0e05\u0df5\u0001\u0000\u0000\u0000\u0e06\u011f\u0001\u0000"+
		"\u0000\u0000\u0e07\u0e08\u0005\n\u0000\u0000\u0e08\u0e15\u0005\u00ad\u0000"+
		"\u0000\u0e09\u0e10\u0005\u0285\u0000\u0000\u0e0a\u0e0b\u0005\u01df\u0000"+
		"\u0000\u0e0b\u0e11\u0003\u009aM\u0000\u0e0c\u0e0d\u0005p\u0000\u0000\u0e0d"+
		"\u0e11\u0005\u0281\u0000\u0000\u0e0e\u0e0f\u0005\u00eb\u0000\u0000\u0e0f"+
		"\u0e11\u0005\u027f\u0000\u0000\u0e10\u0e0a\u0001\u0000\u0000\u0000\u0e10"+
		"\u0e0c\u0001\u0000\u0000\u0000\u0e10\u0e0e\u0001\u0000\u0000\u0000\u0e11"+
		"\u0e12\u0001\u0000\u0000\u0000\u0e12\u0e10\u0001\u0000\u0000\u0000\u0e12"+
		"\u0e13\u0001\u0000\u0000\u0000\u0e13\u0e14\u0001\u0000\u0000\u0000\u0e14"+
		"\u0e16\u0005\u0286\u0000\u0000\u0e15\u0e09\u0001\u0000\u0000\u0000\u0e15"+
		"\u0e16\u0001\u0000\u0000\u0000\u0e16\u0121\u0001\u0000\u0000\u0000\u0e17"+
		"\u0e18\u0005w\u0000\u0000\u0e18\u0e1b\u0005\u0223\u0000\u0000\u0e19\u0e1a"+
		"\u0005\u00fa\u0000\u0000\u0e1a\u0e1c\u0003\u009aM\u0000\u0e1b\u0e19\u0001"+
		"\u0000\u0000\u0000\u0e1b\u0e1c\u0001\u0000\u0000\u0000\u0e1c\u0123\u0001"+
		"\u0000\u0000\u0000\u0e1d\u0e1f\u0005\u0226\u0000\u0000\u0e1e\u0e20\u0005"+
		"\u0151\u0000\u0000\u0e1f\u0e1e\u0001\u0000\u0000\u0000\u0e1f\u0e20\u0001"+
		"\u0000\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u0e22\u0005"+
		"\u00db\u0000\u0000\u0e22\u0e23\u0005n\u0000\u0000\u0e23\u0e24\u0001\u0000"+
		"\u0000\u0000\u0e24\u0e25\u0003\u009eO\u0000\u0e25\u0125\u0001\u0000\u0000"+
		"\u0000\u0e26\u0e28\u0007#\u0000\u0000\u0e27\u0e26\u0001\u0000\u0000\u0000"+
		"\u0e27\u0e28\u0001\u0000\u0000\u0000\u0e28\u0e29\u0001\u0000\u0000\u0000"+
		"\u0e29\u0e2a\u0005\u019c\u0000\u0000\u0e2a\u0127\u0001\u0000\u0000\u0000"+
		"\u0e2b\u0e30\u0003\u012a\u0095\u0000\u0e2c\u0e30\u0003\u0130\u0098\u0000"+
		"\u0e2d\u0e30\u0003\u0136\u009b\u0000\u0e2e\u0e30\u0005F\u0000\u0000\u0e2f"+
		"\u0e2b\u0001\u0000\u0000\u0000\u0e2f\u0e2c\u0001\u0000\u0000\u0000\u0e2f"+
		"\u0e2d\u0001\u0000\u0000\u0000\u0e2f\u0e2e\u0001\u0000\u0000\u0000\u0e30"+
		"\u0129\u0001\u0000\u0000\u0000\u0e31\u0e36\u0003\u012c\u0096\u0000\u0e32"+
		"\u0e33\u0005\u017b\u0000\u0000\u0e33\u0e36\u0005\u027f\u0000\u0000\u0e34"+
		"\u0e36\u0003,\u0016\u0000\u0e35\u0e31\u0001\u0000\u0000\u0000\u0e35\u0e32"+
		"\u0001\u0000\u0000\u0000\u0e35\u0e34\u0001\u0000\u0000\u0000\u0e36\u0e38"+
		"\u0001\u0000\u0000\u0000\u0e37\u0e39\u0003\u012e\u0097\u0000\u0e38\u0e37"+
		"\u0001\u0000\u0000\u0000\u0e38\u0e39\u0001\u0000\u0000\u0000\u0e39\u012b"+
		"\u0001\u0000\u0000\u0000\u0e3a\u0e3b\u0005\u011c\u0000\u0000\u0e3b\u0e3e"+
		"\u0005\u01fd\u0000\u0000\u0e3c\u0e3e\u0005\u0145\u0000\u0000\u0e3d\u0e3a"+
		"\u0001\u0000\u0000\u0000\u0e3d\u0e3c\u0001\u0000\u0000\u0000\u0e3e\u012d"+
		"\u0001\u0000\u0000\u0000\u0e3f\u0e40\u0005\u00db\u0000\u0000\u0e40\u0e42"+
		"\u0003\u0402\u0201\u0000\u0e41\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0e42"+
		"\u0001\u0000\u0000\u0000\u0e42\u0e43\u0001\u0000\u0000\u0000\u0e43\u0e45"+
		"\u0005\u016f\u0000\u0000\u0e44\u0e46\u0003\u0094J\u0000\u0e45\u0e44\u0001"+
		"\u0000\u0000\u0000\u0e45\u0e46\u0001\u0000\u0000\u0000\u0e46\u012f\u0001"+
		"\u0000\u0000\u0000\u0e47\u0e52\u0003\u0132\u0099\u0000\u0e48\u0e4d\u0005"+
		"\u016f\u0000\u0000\u0e49\u0e4e\u0003\u0094J\u0000\u0e4a\u0e4e\u0003\u0120"+
		"\u0090\u0000\u0e4b\u0e4e\u0003\u0134\u009a\u0000\u0e4c\u0e4e\u0003\u0122"+
		"\u0091\u0000\u0e4d\u0e49\u0001\u0000\u0000\u0000\u0e4d\u0e4a\u0001\u0000"+
		"\u0000\u0000\u0e4d\u0e4b\u0001\u0000\u0000\u0000\u0e4d\u0e4c\u0001\u0000"+
		"\u0000\u0000\u0e4e\u0e4f\u0001\u0000\u0000\u0000\u0e4f\u0e4d\u0001\u0000"+
		"\u0000\u0000\u0e4f\u0e50\u0001\u0000\u0000\u0000\u0e50\u0e52\u0001\u0000"+
		"\u0000\u0000\u0e51\u0e47\u0001\u0000\u0000\u0000\u0e51\u0e48\u0001\u0000"+
		"\u0000\u0000\u0e52\u0131\u0001\u0000\u0000\u0000\u0e53\u0e54\u0005\u0005"+
		"\u0000\u0000\u0e54\u0e56\u0005\u016f\u0000\u0000\u0e55\u0e57\u0003\u0094"+
		"J\u0000\u0e56\u0e55\u0001\u0000\u0000\u0000\u0e56\u0e57\u0001\u0000\u0000"+
		"\u0000\u0e57\u0e65\u0001\u0000\u0000\u0000\u0e58\u0e60\u0005\u0285\u0000"+
		"\u0000\u0e59\u0e5b\u0005\u028b\u0000\u0000\u0e5a\u0e59\u0001\u0000\u0000"+
		"\u0000\u0e5a\u0e5b\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0001\u0000\u0000"+
		"\u0000\u0e5c\u0e5e\u0005\u0176\u0000\u0000\u0e5d\u0e5f\u0003\u0094J\u0000"+
		"\u0e5e\u0e5d\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0001\u0000\u0000\u0000"+
		"\u0e5f\u0e61\u0001\u0000\u0000\u0000\u0e60\u0e5a\u0001\u0000\u0000\u0000"+
		"\u0e61\u0e62\u0001\u0000\u0000\u0000\u0e62\u0e60\u0001\u0000\u0000\u0000"+
		"\u0e62\u0e63\u0001\u0000\u0000\u0000\u0e63\u0e64\u0001\u0000\u0000\u0000"+
		"\u0e64\u0e66\u0005\u0286\u0000\u0000\u0e65\u0e58\u0001\u0000\u0000\u0000"+
		"\u0e65\u0e66\u0001\u0000\u0000\u0000\u0e66\u0133\u0001\u0000\u0000\u0000"+
		"\u0e67\u0e68\u0005\u01d9\u0000\u0000\u0e68\u0e6a\u0005\u01e5\u0000\u0000"+
		"\u0e69\u0e6b\u0005N\u0000\u0000\u0e6a\u0e69\u0001\u0000\u0000\u0000\u0e6a"+
		"\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0e6d\u0001\u0000\u0000\u0000\u0e6c"+
		"\u0e6e\u00059\u0000\u0000\u0e6d\u0e6c\u0001\u0000\u0000\u0000\u0e6d\u0e6e"+
		"\u0001\u0000\u0000\u0000\u0e6e\u0135\u0001\u0000\u0000\u0000\u0e6f\u0e70"+
		"\u0005\u011c\u0000\u0000\u0e70\u0e73\u0005\u01fd\u0000\u0000\u0e71\u0e74"+
		"\u0003\u0120\u0090\u0000\u0e72\u0e74\u0003\u0122\u0091\u0000\u0e73\u0e71"+
		"\u0001\u0000\u0000\u0000\u0e73\u0e72\u0001\u0000\u0000\u0000\u0e74\u0137"+
		"\u0001\u0000\u0000\u0000\u0e75\u0e76\u0005\u0005\u0000\u0000\u0e76\u0e7e"+
		"\u0005\u0285\u0000\u0000\u0e77\u0e79\u0003\u0080@\u0000\u0e78\u0e77\u0001"+
		"\u0000\u0000\u0000\u0e79\u0e7c\u0001\u0000\u0000\u0000\u0e7a\u0e78\u0001"+
		"\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000\u0000\u0000\u0e7b\u0e7f\u0001"+
		"\u0000\u0000\u0000\u0e7c\u0e7a\u0001\u0000\u0000\u0000\u0e7d\u0e7f\u0003"+
		"\u0086C\u0000\u0e7e\u0e7a\u0001\u0000\u0000\u0000\u0e7e\u0e7d\u0001\u0000"+
		"\u0000\u0000\u0e7f\u0e80\u0001\u0000\u0000\u0000\u0e80\u0ea4\u0005\u0286"+
		"\u0000\u0000\u0e81\u0e89\u0005\u0005\u0000\u0000\u0e82\u0e84\u0003\u0080"+
		"@\u0000\u0e83\u0e82\u0001\u0000\u0000\u0000\u0e84\u0e87\u0001\u0000\u0000"+
		"\u0000\u0e85\u0e83\u0001\u0000\u0000\u0000\u0e85\u0e86\u0001\u0000\u0000"+
		"\u0000\u0e86\u0e8a\u0001\u0000\u0000\u0000\u0e87\u0e85\u0001\u0000\u0000"+
		"\u0000\u0e88\u0e8a\u0003\u0086C\u0000\u0e89\u0e85\u0001\u0000\u0000\u0000"+
		"\u0e89\u0e88\u0001\u0000\u0000\u0000\u0e8a\u0ea4\u0001\u0000\u0000\u0000"+
		"\u0e8b\u0e92\u0005\u012d\u0000\u0000\u0e8c\u0e8d\u0005X\u0000\u0000\u0e8d"+
		"\u0e93\u0003\u03e6\u01f3\u0000\u0e8e\u0e8f\u0005\u018e\u0000\u0000\u0e8f"+
		"\u0e93\u0005\u00fc\u0000\u0000\u0e90\u0e91\u0005\u021e\u0000\u0000\u0e91"+
		"\u0e93\u0003\u00aeW\u0000\u0e92\u0e8c\u0001\u0000\u0000\u0000\u0e92\u0e8e"+
		"\u0001\u0000\u0000\u0000\u0e92\u0e90\u0001\u0000\u0000\u0000\u0e93\u0e94"+
		"\u0001\u0000\u0000\u0000\u0e94\u0e96\u0003\u00b4Z\u0000\u0e95\u0e97\u0005"+
		"9\u0000\u0000\u0e96\u0e95\u0001\u0000\u0000\u0000\u0e96\u0e97\u0001\u0000"+
		"\u0000\u0000\u0e97\u0ea4\u0001\u0000\u0000\u0000\u0e98\u0e99\u0005\u01a9"+
		"\u0000\u0000\u0e99\u0e9a\u0005X\u0000\u0000\u0e9a\u0e9b\u0003\u013a\u009d"+
		"\u0000\u0e9b\u0e9c\u0005\u020e\u0000\u0000\u0e9c\u0e9d\u0003\u013c\u009e"+
		"\u0000\u0e9d\u0ea4\u0001\u0000\u0000\u0000\u0e9e\u0ea0\u0003\u013e\u009f"+
		"\u0000\u0e9f\u0e9e\u0001\u0000\u0000\u0000\u0ea0\u0ea1\u0001\u0000\u0000"+
		"\u0000\u0ea1\u0e9f\u0001\u0000\u0000\u0000\u0ea1\u0ea2\u0001\u0000\u0000"+
		"\u0000\u0ea2\u0ea4\u0001\u0000\u0000\u0000\u0ea3\u0e75\u0001\u0000\u0000"+
		"\u0000\u0ea3\u0e81\u0001\u0000\u0000\u0000\u0ea3\u0e8b\u0001\u0000\u0000"+
		"\u0000\u0ea3\u0e98\u0001\u0000\u0000\u0000\u0ea3\u0e9f\u0001\u0000\u0000"+
		"\u0000\u0ea4\u0139\u0001\u0000\u0000\u0000\u0ea5\u0ea6\u0003\u03e6\u01f3"+
		"\u0000\u0ea6\u013b\u0001\u0000\u0000\u0000\u0ea7\u0ea8\u0003\u03e6\u01f3"+
		"\u0000\u0ea8\u013d\u0001\u0000\u0000\u0000\u0ea9\u0eaa\u0005\u0091\u0000"+
		"\u0000\u0eaa\u0eab\u0003\u0140\u00a0\u0000\u0eab\u013f\u0001\u0000\u0000"+
		"\u0000\u0eac\u0ead\u0005\u018e\u0000\u0000\u0ead\u0eb1\u0005\u00fc\u0000"+
		"\u0000\u0eae\u0eaf\u0005\u021e\u0000\u0000\u0eaf\u0eb1\u0003\u00aeW\u0000"+
		"\u0eb0\u0eac\u0001\u0000\u0000\u0000\u0eb0\u0eae\u0001\u0000\u0000\u0000"+
		"\u0eb1\u0eb3\u0001\u0000\u0000\u0000\u0eb2\u0eb4\u00059\u0000\u0000\u0eb3"+
		"\u0eb2\u0001\u0000\u0000\u0000\u0eb3\u0eb4\u0001\u0000\u0000\u0000\u0eb4"+
		"\u0eb6\u0001\u0000\u0000\u0000\u0eb5\u0eb7\u0007\"\u0000\u0000\u0eb6\u0eb5"+
		"\u0001\u0000\u0000\u0000\u0eb6\u0eb7\u0001\u0000\u0000\u0000\u0eb7\u0ebe"+
		"\u0001\u0000\u0000\u0000\u0eb8\u0eb9\u0005X\u0000\u0000\u0eb9\u0ebb\u0003"+
		"\u03e6\u01f3\u0000\u0eba\u0ebc\u00059\u0000\u0000\u0ebb\u0eba\u0001\u0000"+
		"\u0000\u0000\u0ebb\u0ebc\u0001\u0000\u0000\u0000\u0ebc\u0ebe\u0001\u0000"+
		"\u0000\u0000\u0ebd\u0eb0\u0001\u0000\u0000\u0000\u0ebd\u0eb8\u0001\u0000"+
		"\u0000\u0000\u0ebe\u0141\u0001\u0000\u0000\u0000\u0ebf\u0ec4\u0003\u0144"+
		"\u00a2\u0000\u0ec0\u0ec4\u0003\u0152\u00a9\u0000\u0ec1\u0ec4\u0003\u0158"+
		"\u00ac\u0000\u0ec2\u0ec4\u0003\u015c\u00ae\u0000\u0ec3\u0ebf\u0001\u0000"+
		"\u0000\u0000\u0ec3\u0ec0\u0001\u0000\u0000\u0000\u0ec3\u0ec1\u0001\u0000"+
		"\u0000\u0000\u0ec3\u0ec2\u0001\u0000\u0000\u0000\u0ec4\u0143\u0001\u0000"+
		"\u0000\u0000\u0ec5\u0ed1\u0003\u0146\u00a3\u0000\u0ec6\u0ed1\u0003\u0148"+
		"\u00a4\u0000\u0ec7\u0ed1\u0003\u014a\u00a5\u0000\u0ec8\u0ecd\u0003\u0150"+
		"\u00a8\u0000\u0ec9\u0eca\u0005\u028b\u0000\u0000\u0eca\u0ecc\u0003\u0150"+
		"\u00a8\u0000\u0ecb\u0ec9\u0001\u0000\u0000\u0000\u0ecc\u0ecf\u0001\u0000"+
		"\u0000\u0000\u0ecd\u0ecb\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000"+
		"\u0000\u0000\u0ece\u0ed1\u0001\u0000\u0000\u0000\u0ecf\u0ecd\u0001\u0000"+
		"\u0000\u0000\u0ed0\u0ec5\u0001\u0000\u0000\u0000\u0ed0\u0ec6\u0001\u0000"+
		"\u0000\u0000\u0ed0\u0ec7\u0001\u0000\u0000\u0000\u0ed0\u0ec8\u0001\u0000"+
		"\u0000\u0000\u0ed1\u0ed2\u0001\u0000\u0000\u0000\u0ed2\u0ed0\u0001\u0000"+
		"\u0000\u0000\u0ed2\u0ed3\u0001\u0000\u0000\u0000\u0ed3\u0145\u0001\u0000"+
		"\u0000\u0000\u0ed4\u0ed6\u0005\u0005\u0000\u0000\u0ed5\u0ed7\u0005H\u0000"+
		"\u0000\u0ed6\u0ed5\u0001\u0000\u0000\u0000\u0ed6\u0ed7\u0001\u0000\u0000"+
		"\u0000\u0ed7\u0eeb\u0001\u0000\u0000\u0000\u0ed8\u0ee1\u0005\u0285\u0000"+
		"\u0000\u0ed9\u0edb\u0005\u028b\u0000\u0000\u0eda\u0ed9\u0001\u0000\u0000"+
		"\u0000\u0eda\u0edb\u0001\u0000\u0000\u0000\u0edb\u0edc\u0001\u0000\u0000"+
		"\u0000\u0edc\u0ee2\u0003z=\u0000\u0edd\u0edf\u0005\u028b\u0000\u0000\u0ede"+
		"\u0edd\u0001\u0000\u0000\u0000\u0ede\u0edf\u0001\u0000\u0000\u0000\u0edf"+
		"\u0ee0\u0001\u0000\u0000\u0000\u0ee0\u0ee2\u0003~?\u0000\u0ee1\u0eda\u0001"+
		"\u0000\u0000\u0000\u0ee1\u0ede\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0001"+
		"\u0000\u0000\u0000\u0ee3\u0ee1\u0001\u0000\u0000\u0000\u0ee3\u0ee4\u0001"+
		"\u0000\u0000\u0000\u0ee4\u0ee5\u0001\u0000\u0000\u0000\u0ee5\u0ee6\u0005"+
		"\u0286\u0000\u0000\u0ee6\u0eec\u0001\u0000\u0000\u0000\u0ee7\u0eea\u0003"+
		"z=\u0000\u0ee8\u0eea\u0003~?\u0000\u0ee9\u0ee7\u0001\u0000\u0000\u0000"+
		"\u0ee9\u0ee8\u0001\u0000\u0000\u0000\u0eea\u0eec\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0ed8\u0001\u0000\u0000\u0000\u0eeb\u0ee9\u0001\u0000\u0000\u0000"+
		"\u0eec\u0eee\u0001\u0000\u0000\u0000\u0eed\u0eef\u0003\u009eO\u0000\u0eee"+
		"\u0eed\u0001\u0000\u0000\u0000\u0eee\u0eef\u0001\u0000\u0000\u0000\u0eef"+
		"\u0147\u0001\u0000\u0000\u0000\u0ef0\u0efe\u0005\u012d\u0000\u0000\u0ef1"+
		"\u0ef6\u0005\u0285\u0000\u0000\u0ef2\u0ef4\u0005\u028b\u0000\u0000\u0ef3"+
		"\u0ef2\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0001\u0000\u0000\u0000\u0ef4"+
		"\u0ef5\u0001\u0000\u0000\u0000\u0ef5\u0ef7\u0003\u014c\u00a6\u0000\u0ef6"+
		"\u0ef3\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0001\u0000\u0000\u0000\u0ef8"+
		"\u0ef6\u0001\u0000\u0000\u0000\u0ef8\u0ef9\u0001\u0000\u0000\u0000\u0ef9"+
		"\u0efa\u0001\u0000\u0000\u0000\u0efa\u0efb\u0005\u0286\u0000\u0000\u0efb"+
		"\u0eff\u0001\u0000\u0000\u0000\u0efc\u0eff\u0003\u014c\u00a6\u0000\u0efd"+
		"\u0eff\u0003\u014e\u00a7";
	private static final String _serializedATNSegment2 =
		"\u0000\u0efe\u0ef1\u0001\u0000\u0000\u0000\u0efe\u0efc\u0001\u0000\u0000"+
		"\u0000\u0efe\u0efd\u0001\u0000\u0000\u0000\u0eff\u0149\u0001\u0000\u0000"+
		"\u0000\u0f00\u0f02\u0005\f\u0000\u0000\u0f01\u0f03\u0005H\u0000\u0000"+
		"\u0f02\u0f01\u0001\u0000\u0000\u0000\u0f02\u0f03\u0001\u0000\u0000\u0000"+
		"\u0f03\u0f04\u0001\u0000\u0000\u0000\u0f04\u0f0e\u0003\u0402\u0201\u0000"+
		"\u0f05\u0f06\u0007$\u0000\u0000\u0f06\u0f07\u0005\u0151\u0000\u0000\u0f07"+
		"\u0f0f\u0005\u0155\u0000\u0000\u0f08\u0f09\u0005\u021a\u0000\u0000\u0f09"+
		"\u0f0c\u0003\u041a\u020d\u0000\u0f0a\u0f0b\u0005\u022a\u0000\u0000\u0f0b"+
		"\u0f0d\u0003\u0344\u01a2\u0000\u0f0c\u0f0a\u0001\u0000\u0000\u0000\u0f0c"+
		"\u0f0d\u0001\u0000\u0000\u0000\u0f0d\u0f0f\u0001\u0000\u0000\u0000\u0f0e"+
		"\u0f05\u0001\u0000\u0000\u0000\u0f0e\u0f08\u0001\u0000\u0000\u0000\u0f0f"+
		"\u014b\u0001\u0000\u0000\u0000\u0f10\u0f12\u0003\u0402\u0201\u0000\u0f11"+
		"\u0f13\u0003\u041a\u020d\u0000\u0f12\u0f11\u0001\u0000\u0000\u0000\u0f12"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f13\u0f16\u0001\u0000\u0000\u0000\u0f14"+
		"\u0f15\u0005\u0080\u0000\u0000\u0f15\u0f17\u0003\u0344\u01a2\u0000\u0f16"+
		"\u0f14\u0001\u0000\u0000\u0000\u0f16\u0f17\u0001\u0000\u0000\u0000\u0f17"+
		"\u0f1b\u0001\u0000\u0000\u0000\u0f18\u0f19\u0005\u009b\u0000\u0000\u0f19"+
		"\u0f1c\u0003\u00c6c\u0000\u0f1a\u0f1c\u0005~\u0000\u0000\u0f1b\u0f18\u0001"+
		"\u0000\u0000\u0000\u0f1b\u0f1a\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0001"+
		"\u0000\u0000\u0000\u0f1c\u0f20\u0001\u0000\u0000\u0000\u0f1d\u0f1f\u0003"+
		"\u00aaU\u0000\u0f1e\u0f1d\u0001\u0000\u0000\u0000\u0f1f\u0f22\u0001\u0000"+
		"\u0000\u0000\u0f20\u0f1e\u0001\u0000\u0000\u0000\u0f20\u0f21\u0001\u0000"+
		"\u0000\u0000\u0f21\u0f24\u0001\u0000\u0000\u0000\u0f22\u0f20\u0001\u0000"+
		"\u0000\u0000\u0f23\u0f25\u0003\u00c8d\u0000\u0f24\u0f23\u0001\u0000\u0000"+
		"\u0000\u0f24\u0f25\u0001\u0000\u0000\u0000\u0f25\u014d\u0001\u0000\u0000"+
		"\u0000\u0f26\u0f27\u0005H\u0000\u0000\u0f27\u0f29\u0003\u0402\u0201\u0000"+
		"\u0f28\u0f2a\u0005\u0151\u0000\u0000\u0f29\u0f28\u0001\u0000\u0000\u0000"+
		"\u0f29\u0f2a\u0001\u0000\u0000\u0000\u0f2a\u0f2b\u0001\u0000\u0000\u0000"+
		"\u0f2b\u0f2c\u0005\u01f6\u0000\u0000\u0f2c\u0f2d\u0005\u0017\u0000\u0000"+
		"\u0f2d\u0f2e\u0005\t\u0000\u0000\u0f2e\u0f30\u0005\u0104\u0000\u0000\u0f2f"+
		"\u0f31\u0005\u00bf\u0000\u0000\u0f30\u0f2f\u0001\u0000\u0000\u0000\u0f30"+
		"\u0f31\u0001\u0000\u0000\u0000\u0f31\u014f\u0001\u0000\u0000\u0000\u0f32"+
		"\u0f33\u0005\u01d4\u0000\u0000\u0f33\u0f41\u0005\u0223\u0000\u0000\u0f34"+
		"\u0f35\u0005H\u0000\u0000\u0f35\u0f42\u0003\u0402\u0201\u0000\u0f36\u0f3b"+
		"\u0005\u0285\u0000\u0000\u0f37\u0f39\u0005\u028b\u0000\u0000\u0f38\u0f37"+
		"\u0001\u0000\u0000\u0000\u0f38\u0f39\u0001\u0000\u0000\u0000\u0f39\u0f3a"+
		"\u0001\u0000\u0000\u0000\u0f3a\u0f3c\u0003\u0402\u0201\u0000\u0f3b\u0f38"+
		"\u0001\u0000\u0000\u0000\u0f3c\u0f3d\u0001\u0000\u0000\u0000\u0f3d\u0f3b"+
		"\u0001\u0000\u0000\u0000\u0f3d\u0f3e\u0001\u0000\u0000\u0000\u0f3e\u0f3f"+
		"\u0001\u0000\u0000\u0000\u0f3f\u0f40\u0005\u0286\u0000\u0000\u0f40\u0f42"+
		"\u0001\u0000\u0000\u0000\u0f41\u0f34\u0001\u0000\u0000\u0000\u0f41\u0f36"+
		"\u0001\u0000\u0000\u0000\u0f42\u0f48\u0001\u0000\u0000\u0000\u0f43\u0f44"+
		"\u00059\u0000\u0000\u0f44\u0f47\u0005Y\u0000\u0000\u0f45\u0f47\u0005\u00f3"+
		"\u0000\u0000\u0f46\u0f43\u0001\u0000\u0000\u0000\u0f46\u0f45\u0001\u0000"+
		"\u0000\u0000\u0f47\u0f4a\u0001\u0000\u0000\u0000\u0f48\u0f46\u0001\u0000"+
		"\u0000\u0000\u0f48\u0f49\u0001\u0000\u0000\u0000\u0f49\u0f71\u0001\u0000"+
		"\u0000\u0000\u0f4a\u0f48\u0001\u0000\u0000\u0000\u0f4b\u0f59\u0005\u0091"+
		"\u0000\u0000\u0f4c\u0f4d\u0005H\u0000\u0000\u0f4d\u0f5a\u0003\u0402\u0201"+
		"\u0000\u0f4e\u0f53\u0005\u0285\u0000\u0000\u0f4f\u0f51\u0005\u028b\u0000"+
		"\u0000\u0f50\u0f4f\u0001\u0000\u0000\u0000\u0f50\u0f51\u0001\u0000\u0000"+
		"\u0000\u0f51\u0f52\u0001\u0000\u0000\u0000\u0f52\u0f54\u0003\u0402\u0201"+
		"\u0000\u0f53\u0f50\u0001\u0000\u0000\u0000\u0f54\u0f55\u0001\u0000\u0000"+
		"\u0000\u0f55\u0f53\u0001\u0000\u0000\u0000\u0f55\u0f56\u0001\u0000\u0000"+
		"\u0000\u0f56\u0f57\u0001\u0000\u0000\u0000\u0f57\u0f58\u0005\u0286\u0000"+
		"\u0000\u0f58\u0f5a\u0001\u0000\u0000\u0000\u0f59\u0f4c\u0001\u0000\u0000"+
		"\u0000\u0f59\u0f4e\u0001\u0000\u0000\u0000\u0f5a\u0f60\u0001\u0000\u0000"+
		"\u0000\u0f5b\u0f5c\u00059\u0000\u0000\u0f5c\u0f5f\u0005Y\u0000\u0000\u0f5d"+
		"\u0f5f\u0005\u00f3\u0000\u0000\u0f5e\u0f5b\u0001\u0000\u0000\u0000\u0f5e"+
		"\u0f5d\u0001\u0000\u0000\u0000\u0f5f\u0f62\u0001\u0000\u0000\u0000\u0f60"+
		"\u0f5e\u0001\u0000\u0000\u0000\u0f60\u0f61\u0001\u0000\u0000\u0000\u0f61"+
		"\u0f65\u0001\u0000\u0000\u0000\u0f62\u0f60\u0001\u0000\u0000\u0000\u0f63"+
		"\u0f64\u0005@\u0000\u0000\u0f64\u0f66\u0005\u027f\u0000\u0000\u0f65\u0f63"+
		"\u0001\u0000\u0000\u0000\u0f65\u0f66\u0001\u0000\u0000\u0000\u0f66\u0f71"+
		"\u0001\u0000\u0000\u0000\u0f67\u0f6c\u0005\u0091\u0000\u0000\u0f68\u0f69"+
		"\u0005\u0223\u0000\u0000\u0f69\u0f6d\u0005I\u0000\u0000\u0f6a\u0f6b\u0005"+
		"I\u0000\u0000\u0f6b\u0f6d\u0005]\u0000\u0000\u0f6c\u0f68\u0001\u0000\u0000"+
		"\u0000\u0f6c\u0f6a\u0001\u0000\u0000\u0000\u0f6d\u0f6e\u0001\u0000\u0000"+
		"\u0000\u0f6e\u0f6f\u0005@\u0000\u0000\u0f6f\u0f71\u0005\u027f\u0000\u0000"+
		"\u0f70\u0f32\u0001\u0000\u0000\u0000\u0f70\u0f4b\u0001\u0000\u0000\u0000"+
		"\u0f70\u0f67\u0001\u0000\u0000\u0000\u0f71\u0151\u0001\u0000\u0000\u0000"+
		"\u0f72\u0f74\u0005\u01a9\u0000\u0000\u0f73\u0f75\u0005H\u0000\u0000\u0f74"+
		"\u0f73\u0001\u0000\u0000\u0000\u0f74\u0f75\u0001\u0000\u0000\u0000\u0f75"+
		"\u0f76\u0001\u0000\u0000\u0000\u0f76\u0f77\u0003\u0154\u00aa\u0000\u0f77"+
		"\u0f78\u0005\u020e\u0000\u0000\u0f78\u0f79\u0003\u0156\u00ab\u0000\u0f79"+
		"\u0153\u0001\u0000\u0000\u0000\u0f7a\u0f7b\u0003\u0402\u0201\u0000\u0f7b"+
		"\u0155\u0001\u0000\u0000\u0000\u0f7c\u0f7d\u0003\u0402\u0201\u0000\u0f7d"+
		"\u0157\u0001\u0000\u0000\u0000\u0f7e\u0f7f\u0005\u012d\u0000\u0000\u0f7f"+
		"\u0f80\u0005\u0139\u0000\u0000\u0f80\u0f81\u0005\u01fd\u0000\u0000\u0f81"+
		"\u0f82\u0003\u015a\u00ad\u0000\u0f82\u0f83\u0005\u01b0\u0000\u0000\u0f83"+
		"\u0f84\u0005\u0014\u0000\u0000\u0f84\u0f85\u0007\u001b\u0000\u0000\u0f85"+
		"\u0159\u0001\u0000\u0000\u0000\u0f86\u0f87\u0003\u0406\u0203\u0000\u0f87"+
		"\u015b\u0001\u0000\u0000\u0000\u0f88\u0f89\u0005\u012d\u0000\u0000\u0f89"+
		"\u0f8a\u0005\u010d\u0000\u0000\u0f8a\u0f8b\u0005\u0285\u0000\u0000\u0f8b"+
		"\u0f8c\u0003N\'\u0000\u0f8c\u0f8d\u0005\u0286\u0000\u0000\u0f8d\u0f8e"+
		"\u0005\u0285\u0000\u0000\u0f8e\u0f8f\u0003\u015e\u00af\u0000\u0f8f\u0f90"+
		"\u0005\u0286\u0000\u0000\u0f90\u015d\u0001\u0000\u0000\u0000\u0f91\u0faa"+
		"\u0003\u0098L\u0000\u0f92\u0f93\u0007%\u0000\u0000\u0f93\u0faa\u0005\u027f"+
		"\u0000\u0000\u0f94\u0f95\u0005\u019a\u0000\u0000\u0f95\u0faa\u0005\u00c3"+
		"\u0000\u0000\u0f96\u0faa\u0003\u00c0`\u0000\u0f97\u0faa\u0003\u00c2a\u0000"+
		"\u0f98\u0faa\u0003\u00c4b\u0000\u0f99\u0f9a\u0005\u009b\u0000\u0000\u0f9a"+
		"\u0faa\u0003\u00c6c\u0000\u0f9b\u0faa\u0005~\u0000\u0000\u0f9c\u0faa\u0005"+
		"6\u0000\u0000\u0f9d\u0fa2\u00056\u0000\u0000\u0f9e\u0fa2\u0005\u013f\u0000"+
		"\u0000\u0f9f\u0fa0\u00056\u0000\u0000\u0fa0\u0fa2\u0005\u0198\u0000\u0000"+
		"\u0fa1\u0f9d\u0001\u0000\u0000\u0000\u0fa1\u0f9e\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f9f\u0001\u0000\u0000\u0000\u0fa2\u0fa4\u0001\u0000\u0000\u0000"+
		"\u0fa3\u0fa5\u0003\u009cN\u0000\u0fa4\u0fa3\u0001\u0000\u0000\u0000\u0fa4"+
		"\u0fa5\u0001\u0000\u0000\u0000\u0fa5\u0faa\u0001\u0000\u0000\u0000\u0fa6"+
		"\u0faa\u0003\u0120\u0090\u0000\u0fa7\u0faa\u0003\u0134\u009a\u0000\u0fa8"+
		"\u0faa\u0003\u0122\u0091\u0000\u0fa9\u0f91\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0f92\u0001\u0000\u0000\u0000\u0fa9\u0f94\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0f96\u0001\u0000\u0000\u0000\u0fa9\u0f97\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0f98\u0001\u0000\u0000\u0000\u0fa9\u0f99\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0f9b\u0001\u0000\u0000\u0000\u0fa9\u0f9c\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0fa1\u0001\u0000\u0000\u0000\u0fa9\u0fa6\u0001\u0000\u0000\u0000\u0fa9"+
		"\u0fa7\u0001\u0000\u0000\u0000\u0fa9\u0fa8\u0001\u0000\u0000\u0000\u0faa"+
		"\u0fab\u0001\u0000\u0000\u0000\u0fab\u0fa9\u0001\u0000\u0000\u0000\u0fab"+
		"\u0fac\u0001\u0000\u0000\u0000\u0fac\u015f\u0001\u0000\u0000\u0000\u0fad"+
		"\u0fae\u0005\u0091\u0000\u0000\u0fae\u0faf\u0005\u00c6\u0000\u0000\u0faf"+
		"\u0fb0\u0003\u03f0\u01f8\u0000\u0fb0\u0161\u0001\u0000\u0000\u0000\u0fb1"+
		"\u0fb2\u0005\f\u0000\u0000\u0fb2\u0fb3\u0005\u00c6\u0000\u0000\u0fb3\u0fb4"+
		"\u0003\u03f0\u01f8\u0000\u0fb4\u0fb6\u0005P\u0000\u0000\u0fb5\u0fb7\u0005"+
		"v\u0000\u0000\u0fb6\u0fb5\u0001\u0000\u0000\u0000\u0fb6\u0fb7\u0001\u0000"+
		"\u0000\u0000\u0fb7\u0fbb\u0001\u0000\u0000\u0000\u0fb8\u0fba\u0003\u0206"+
		"\u0103\u0000\u0fb9\u0fb8\u0001\u0000\u0000\u0000\u0fba\u0fbd\u0001\u0000"+
		"\u0000\u0000\u0fbb\u0fb9\u0001\u0000\u0000\u0000\u0fbb\u0fbc\u0001\u0000"+
		"\u0000\u0000\u0fbc\u0fc0\u0001\u0000\u0000\u0000\u0fbd\u0fbb\u0001\u0000"+
		"\u0000\u0000\u0fbe\u0fbf\u0005\u01b2\u0000\u0000\u0fbf\u0fc1\u0005\u01d6"+
		"\u0000\u0000\u0fc0\u0fbe\u0001\u0000\u0000\u0000\u0fc0\u0fc1\u0001\u0000"+
		"\u0000\u0000\u0fc1\u0163\u0001\u0000\u0000\u0000\u0fc2\u0fc5\u0005c\u0000"+
		"\u0000\u0fc3\u0fc4\u0005\u0167\u0000\u0000\u0fc4\u0fc6\u0005\u01aa\u0000"+
		"\u0000\u0fc5\u0fc3\u0001\u0000\u0000\u0000\u0fc5\u0fc6\u0001\u0000\u0000"+
		"\u0000\u0fc6\u0fc8\u0001\u0000\u0000\u0000\u0fc7\u0fc2\u0001\u0000\u0000"+
		"\u0000\u0fc7\u0fc8\u0001\u0000\u0000\u0000\u0fc8\u0fc9\u0001\u0000\u0000"+
		"\u0000\u0fc9\u0fca\u0005\u00c6\u0000\u0000\u0fca\u0fd6\u0003\u03f0\u01f8"+
		"\u0000\u0fcb\u0fcc\u0005\u0285\u0000\u0000\u0fcc\u0fd1\u0003\u0212\u0109"+
		"\u0000\u0fcd\u0fce\u0005\u028b\u0000\u0000\u0fce\u0fd0\u0003\u0212\u0109"+
		"\u0000\u0fcf\u0fcd\u0001\u0000\u0000\u0000\u0fd0\u0fd3\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fcf\u0001\u0000\u0000\u0000\u0fd1\u0fd2\u0001\u0000\u0000"+
		"\u0000\u0fd2\u0fd4\u0001\u0000\u0000\u0000\u0fd3\u0fd1\u0001\u0000\u0000"+
		"\u0000\u0fd4\u0fd5\u0005\u0286\u0000\u0000\u0fd5\u0fd7\u0001\u0000\u0000"+
		"\u0000\u0fd6\u0fcb\u0001\u0000\u0000\u0000\u0fd6\u0fd7\u0001\u0000\u0000"+
		"\u0000\u0fd7\u0fd8\u0001\u0000\u0000\u0000\u0fd8\u0fd9\u0005\u01b0\u0000"+
		"\u0000\u0fd9\u0fe0\u0003\u0418\u020c\u0000\u0fda\u0fdf\u0003\u0204\u0102"+
		"\u0000\u0fdb\u0fdf\u0003\u0166\u00b3\u0000\u0fdc\u0fdf\u0003\u016a\u00b5"+
		"\u0000\u0fdd\u0fdf\u0005\u0089\u0000\u0000\u0fde\u0fda\u0001\u0000\u0000"+
		"\u0000\u0fde\u0fdb\u0001\u0000\u0000\u0000\u0fde\u0fdc\u0001\u0000\u0000"+
		"\u0000\u0fde\u0fdd\u0001\u0000\u0000\u0000\u0fdf\u0fe2\u0001\u0000\u0000"+
		"\u0000\u0fe0\u0fde\u0001\u0000\u0000\u0000\u0fe0\u0fe1\u0001\u0000\u0000"+
		"\u0000\u0fe1\u0ff7\u0001\u0000\u0000\u0000\u0fe2\u0fe0\u0001\u0000\u0000"+
		"\u0000\u0fe3\u0fe5\u0005\u0180\u0000\u0000\u0fe4\u0fe3\u0001\u0000\u0000"+
		"\u0000\u0fe4\u0fe5\u0001\u0000\u0000\u0000\u0fe5\u0fe6\u0001\u0000\u0000"+
		"\u0000\u0fe6\u0ff2\u0007&\u0000\u0000\u0fe7\u0fe9\u0005z\u0000\u0000\u0fe8"+
		"\u0fe7\u0001\u0000\u0000\u0000\u0fe8\u0fe9\u0001\u0000\u0000\u0000\u0fe9"+
		"\u0fed\u0001\u0000\u0000\u0000\u0fea\u0fec\u0003\u0216\u010b\u0000\u0feb"+
		"\u0fea\u0001\u0000\u0000\u0000\u0fec\u0fef\u0001\u0000\u0000\u0000\u0fed"+
		"\u0feb\u0001\u0000\u0000\u0000\u0fed\u0fee\u0001\u0000\u0000\u0000\u0fee"+
		"\u0ff0\u0001\u0000\u0000\u0000\u0fef\u0fed\u0001\u0000\u0000\u0000\u0ff0"+
		"\u0ff3\u0003\u0260\u0130\u0000\u0ff1\u0ff3\u0003\u0208\u0104\u0000\u0ff2"+
		"\u0fe8\u0001\u0000\u0000\u0000\u0ff2\u0ff1\u0001\u0000\u0000\u0000\u0ff3"+
		"\u0ff8\u0001\u0000\u0000\u0000\u0ff4\u0ff5\u0007\'\u0000\u0000\u0ff5\u0ff6"+
		"\u0005\u022a\u0000\u0000\u0ff6\u0ff8\u0003\u03da\u01ed\u0000\u0ff7\u0fe4"+
		"\u0001\u0000\u0000\u0000\u0ff7\u0ff4\u0001\u0000\u0000\u0000\u0ff8\u0165"+
		"\u0001\u0000\u0000\u0000\u0ff9\u0ffb\u0005\u0173\u0000\u0000\u0ffa\u0ffc"+
		"\u0003\u0168\u00b4\u0000\u0ffb\u0ffa\u0001\u0000\u0000\u0000\u0ffb\u0ffc"+
		"\u0001\u0000\u0000\u0000\u0ffc\u0167\u0001\u0000\u0000\u0000\u0ffd\u0ffe"+
		"\u0005\u0285\u0000\u0000\u0ffe\u0fff\u0005\u0176\u0000\u0000\u0fff\u1000"+
		"\u0003\u0344\u01a2\u0000\u1000\u100e\u00053\u0000\u0000\u1001\u100f\u0005"+
		"\u0010\u0000\u0000\u1002\u1003\u0007(\u0000\u0000\u1003\u1004\u0005\u0285"+
		"\u0000\u0000\u1004\u1009\u0003\u0402\u0201\u0000\u1005\u1006\u0005\u028b"+
		"\u0000\u0000\u1006\u1008\u0003\u0402\u0201\u0000\u1007\u1005\u0001\u0000"+
		"\u0000\u0000\u1008\u100b\u0001\u0000\u0000\u0000\u1009\u1007\u0001\u0000"+
		"\u0000\u0000\u1009\u100a\u0001\u0000\u0000\u0000\u100a\u100c\u0001\u0000"+
		"\u0000\u0000\u100b\u1009\u0001\u0000\u0000\u0000\u100c\u100d\u0005\u0286"+
		"\u0000\u0000\u100d\u100f\u0001\u0000\u0000\u0000\u100e\u1001\u0001\u0000"+
		"\u0000\u0000\u100e\u1002\u0001\u0000\u0000\u0000\u100f\u1011\u0001\u0000"+
		"\u0000\u0000\u1010\u1012\u0003\u016e\u00b7\u0000\u1011\u1010\u0001\u0000"+
		"\u0000\u0000\u1011\u1012\u0001\u0000\u0000\u0000\u1012\u1013\u0001\u0000"+
		"\u0000\u0000\u1013\u1014\u0005\u0286\u0000\u0000\u1014\u0169\u0001\u0000"+
		"\u0000\u0000\u1015\u1017\u0005\u01ae\u0000\u0000\u1016\u1018\u0003\u016c"+
		"\u00b6\u0000\u1017\u1016\u0001\u0000\u0000\u0000\u1017\u1018\u0001\u0000"+
		"\u0000\u0000\u1018\u016b\u0001\u0000\u0000\u0000\u1019\u101a\u0005\u01a7"+
		"\u0000\u0000\u101a\u101b\u0005\u0285\u0000\u0000\u101b\u1020\u0003\u0406"+
		"\u0203\u0000\u101c\u101d\u0005\u028b\u0000\u0000\u101d\u101f\u0003\u0406"+
		"\u0203\u0000\u101e\u101c\u0001\u0000\u0000\u0000\u101f\u1022\u0001\u0000"+
		"\u0000\u0000\u1020\u101e\u0001\u0000\u0000\u0000\u1020\u1021\u0001\u0000"+
		"\u0000\u0000\u1021\u1023\u0001\u0000\u0000\u0000\u1022\u1020\u0001\u0000"+
		"\u0000\u0000\u1023\u1024\u0005\u0286\u0000\u0000\u1024\u016d\u0001\u0000"+
		"\u0000\u0000\u1025\u1026\u0007)\u0000\u0000\u1026\u1027\u0003\u0344\u01a2"+
		"\u0000\u1027\u1028\u00053\u0000\u0000\u1028\u1029\u0005\u0285\u0000\u0000"+
		"\u1029\u102e\u0003\u0402\u0201\u0000\u102a\u102b\u0005\u028b\u0000\u0000"+
		"\u102b\u102d\u0003\u0402\u0201\u0000\u102c\u102a\u0001\u0000\u0000\u0000"+
		"\u102d\u1030\u0001\u0000\u0000\u0000\u102e\u102c\u0001\u0000\u0000\u0000"+
		"\u102e\u102f\u0001\u0000\u0000\u0000\u102f\u1031\u0001\u0000\u0000\u0000"+
		"\u1030\u102e\u0001\u0000\u0000\u0000\u1031\u1032\u0005\u0286\u0000\u0000"+
		"\u1032\u016f\u0001\u0000\u0000\u0000\u1033\u1034\u0005\u0091\u0000\u0000"+
		"\u1034\u1036\u0005\u0171\u0000\u0000\u1035\u1037\u0005.\u0000\u0000\u1036"+
		"\u1035\u0001\u0000\u0000\u0000\u1036\u1037\u0001\u0000\u0000\u0000\u1037"+
		"\u1038\u0001\u0000\u0000\u0000\u1038\u1039\u0003\u03d8\u01ec\u0000\u1039"+
		"\u0171\u0001\u0000\u0000\u0000\u103a\u103b\u0005\f\u0000\u0000\u103b\u103c"+
		"\u0005\u0171\u0000\u0000\u103c\u103d\u0003\u03d8\u01ec\u0000\u103d\u103f"+
		"\u0005P\u0000\u0000\u103e\u1040\u0005v\u0000\u0000\u103f\u103e\u0001\u0000"+
		"\u0000\u0000\u103f\u1040\u0001\u0000\u0000\u0000\u1040\u1042\u0001\u0000"+
		"\u0000\u0000\u1041\u1043\u0007*\u0000\u0000\u1042\u1041\u0001\u0000\u0000"+
		"\u0000\u1042\u1043\u0001\u0000\u0000\u0000\u1043\u1047\u0001\u0000\u0000"+
		"\u0000\u1044\u1046\u0003\u0206\u0103\u0000\u1045\u1044\u0001\u0000\u0000"+
		"\u0000\u1046\u1049\u0001\u0000\u0000\u0000\u1047\u1045\u0001\u0000\u0000"+
		"\u0000\u1047\u1048\u0001\u0000\u0000\u0000\u1048\u104c\u0001\u0000\u0000"+
		"\u0000\u1049\u1047\u0001\u0000\u0000\u0000\u104a\u104b\u0005\u01b2\u0000"+
		"\u0000\u104b\u104d\u0005\u01d6\u0000\u0000\u104c\u104a\u0001\u0000\u0000"+
		"\u0000\u104c\u104d\u0001\u0000\u0000\u0000\u104d\u0173\u0001\u0000\u0000"+
		"\u0000\u104e\u1051\u0005c\u0000\u0000\u104f\u1050\u0005\u0167\u0000\u0000"+
		"\u1050\u1052\u0005\u01aa\u0000\u0000\u1051\u104f\u0001\u0000\u0000\u0000"+
		"\u1051\u1052\u0001\u0000\u0000\u0000\u1052\u1053\u0001\u0000\u0000\u0000"+
		"\u1053\u1056\u0005\u0171\u0000\u0000\u1054\u1057\u0003\u0178\u00bc\u0000"+
		"\u1055\u1057\u0003\u0176\u00bb\u0000\u1056\u1054\u0001\u0000\u0000\u0000"+
		"\u1056\u1055\u0001\u0000\u0000\u0000\u1056\u1057\u0001\u0000\u0000\u0000"+
		"\u1057\u0175\u0001\u0000\u0000\u0000\u1058\u1059\u0005.\u0000\u0000\u1059"+
		"\u105a\u0003\u03d8\u01ec\u0000\u105a\u105e\u0007&\u0000\u0000\u105b\u105d"+
		"\u0003\u0180\u00c0\u0000\u105c\u105b\u0001\u0000\u0000\u0000\u105d\u1060"+
		"\u0001\u0000\u0000\u0000\u105e\u105c\u0001\u0000\u0000\u0000\u105e\u105f"+
		"\u0001\u0000\u0000\u0000\u105f\u1067\u0001\u0000\u0000\u0000\u1060\u105e"+
		"\u0001\u0000\u0000\u0000\u1061\u1062\u0005\"\u0000\u0000\u1062\u1068\u0003"+
		"\u0236\u011b\u0000\u1063\u1065\u0005\u009c\u0000\u0000\u1064\u1066\u0003"+
		"\u03d8\u01ec\u0000\u1065\u1064\u0001\u0000\u0000\u0000\u1065\u1066\u0001"+
		"\u0000\u0000\u0000\u1066\u1068\u0001\u0000\u0000\u0000\u1067\u1061\u0001"+
		"\u0000\u0000\u0000\u1067\u1063\u0001\u0000\u0000\u0000\u1068\u0177\u0001"+
		"\u0000\u0000\u0000\u1069\u106b\u0003\u03d8\u01ec\u0000\u106a\u106c\u0003"+
		"\u0204\u0102\u0000\u106b\u106a\u0001\u0000\u0000\u0000\u106b\u106c\u0001"+
		"\u0000\u0000\u0000\u106c\u106d\u0001\u0000\u0000\u0000\u106d\u1071\u0007"+
		"&\u0000\u0000\u106e\u1070\u0003\u017a\u00bd\u0000\u106f\u106e\u0001\u0000"+
		"\u0000\u0000\u1070\u1073\u0001\u0000\u0000\u0000\u1071\u106f\u0001\u0000"+
		"\u0000\u0000\u1071\u1072\u0001\u0000\u0000\u0000\u1072\u1074\u0001\u0000"+
		"\u0000\u0000\u1073\u1071\u0001\u0000\u0000\u0000\u1074\u1076\u0005\u009c"+
		"\u0000\u0000\u1075\u1077\u0003\u03d8\u01ec\u0000\u1076\u1075\u0001\u0000"+
		"\u0000\u0000\u1076\u1077\u0001\u0000\u0000\u0000\u1077\u0179\u0001\u0000"+
		"\u0000\u0000\u1078\u1082\u0003\u0218\u010c\u0000\u1079\u1082\u0003\u021a"+
		"\u010d\u0000\u107a\u1082\u0003\u021c\u010e\u0000\u107b\u1082\u0003\u0220"+
		"\u0110\u0000\u107c\u1082\u0003\u0222\u0111\u0000\u107d\u1082\u0003\u0224"+
		"\u0112\u0000\u107e\u1082\u0003\u022c\u0116\u0000\u107f\u1082\u0003\u017c"+
		"\u00be\u0000\u1080\u1082\u0003\u017e\u00bf\u0000\u1081\u1078\u0001\u0000"+
		"\u0000\u0000\u1081\u1079\u0001\u0000\u0000\u0000\u1081\u107a\u0001\u0000"+
		"\u0000\u0000\u1081\u107b\u0001\u0000\u0000\u0000\u1081\u107c\u0001\u0000"+
		"\u0000\u0000\u1081\u107d\u0001\u0000\u0000\u0000\u1081\u107e\u0001\u0000"+
		"\u0000\u0000\u1081\u107f\u0001\u0000\u0000\u0000\u1081\u1080\u0001\u0000"+
		"\u0000\u0000\u1082\u017b\u0001\u0000\u0000\u0000\u1083\u1084\u0005\u0190"+
		"\u0000\u0000\u1084\u1090\u0003\u03f2\u01f9\u0000\u1085\u1086\u0005\u0285"+
		"\u0000\u0000\u1086\u108b\u0003\u0212\u0109\u0000\u1087\u1088\u0005\u028b"+
		"\u0000\u0000\u1088\u108a\u0003\u0212\u0109\u0000\u1089\u1087\u0001\u0000"+
		"\u0000\u0000\u108a\u108d\u0001\u0000\u0000\u0000\u108b\u1089\u0001\u0000"+
		"\u0000\u0000\u108b\u108c\u0001\u0000\u0000\u0000\u108c\u108e\u0001\u0000"+
		"\u0000\u0000\u108d\u108b\u0001\u0000\u0000\u0000\u108e\u108f\u0005\u0286"+
		"\u0000\u0000\u108f\u1091\u0001\u0000\u0000\u0000\u1090\u1085\u0001\u0000"+
		"\u0000\u0000\u1090\u1091\u0001\u0000\u0000\u0000\u1091\u1092\u0001\u0000"+
		"\u0000\u0000\u1092\u1093\u0005\u0291\u0000\u0000\u1093\u017d\u0001\u0000"+
		"\u0000\u0000\u1094\u1095\u0005\u00c6\u0000\u0000\u1095\u10a1\u0003\u03f0"+
		"\u01f8\u0000\u1096\u1097\u0005\u0285\u0000\u0000\u1097\u109c\u0003\u0212"+
		"\u0109\u0000\u1098\u1099\u0005\u028b\u0000\u0000\u1099\u109b\u0003\u0212"+
		"\u0109\u0000\u109a\u1098\u0001\u0000\u0000\u0000\u109b\u109e\u0001\u0000"+
		"\u0000\u0000\u109c\u109a\u0001\u0000\u0000\u0000\u109c\u109d\u0001\u0000"+
		"\u0000\u0000\u109d\u109f\u0001\u0000\u0000\u0000\u109e\u109c\u0001\u0000"+
		"\u0000\u0000\u109f\u10a0\u0005\u0286\u0000\u0000\u10a0\u10a2\u0001\u0000"+
		"\u0000\u0000\u10a1\u1096\u0001\u0000\u0000\u0000\u10a1\u10a2\u0001\u0000"+
		"\u0000\u0000\u10a2\u10a3\u0001\u0000\u0000\u0000\u10a3\u10a4\u0005\u01b0"+
		"\u0000\u0000\u10a4\u10a6\u0003\u0418\u020c\u0000\u10a5\u10a7\u0005\u0089"+
		"\u0000\u0000\u10a6\u10a5\u0001\u0000\u0000\u0000\u10a6\u10a7\u0001\u0000"+
		"\u0000\u0000\u10a7\u10a9\u0001\u0000\u0000\u0000\u10a8\u10aa\u0005\u01ae"+
		"\u0000\u0000\u10a9\u10a8\u0001\u0000\u0000\u0000\u10a9\u10aa\u0001\u0000"+
		"\u0000\u0000\u10aa\u10ab\u0001\u0000\u0000\u0000\u10ab\u10ac\u0005\u0291"+
		"\u0000\u0000\u10ac\u017f\u0001\u0000\u0000\u0000\u10ad\u10b8\u0003\u0218"+
		"\u010c\u0000\u10ae\u10b8\u0003\u021a\u010d\u0000\u10af\u10b8\u0003\u021c"+
		"\u010e\u0000\u10b0\u10b8\u0003\u0220\u0110\u0000\u10b1\u10b8\u0003\u0224"+
		"\u0112\u0000\u10b2\u10b8\u0003\u022c\u0116\u0000\u10b3\u10b8\u0003\u0186"+
		"\u00c3\u0000\u10b4\u10b8\u0003\u0164\u00b2\u0000\u10b5\u10b8\u0003\u017c"+
		"\u00be\u0000\u10b6\u10b8\u0003\u017e\u00bf\u0000\u10b7\u10ad\u0001\u0000"+
		"\u0000\u0000\u10b7\u10ae\u0001\u0000\u0000\u0000\u10b7\u10af\u0001\u0000"+
		"\u0000\u0000\u10b7\u10b0\u0001\u0000\u0000\u0000\u10b7\u10b1\u0001\u0000"+
		"\u0000\u0000\u10b7\u10b2\u0001\u0000\u0000\u0000\u10b7\u10b3\u0001\u0000"+
		"\u0000\u0000\u10b7\u10b4\u0001\u0000\u0000\u0000\u10b7\u10b5\u0001\u0000"+
		"\u0000\u0000\u10b7\u10b6\u0001\u0000\u0000\u0000\u10b8\u0181\u0001\u0000"+
		"\u0000\u0000\u10b9\u10ba\u0005\u0091\u0000\u0000\u10ba\u10bb\u0005\u0190"+
		"\u0000\u0000\u10bb\u10bc\u0003\u03f2\u01f9\u0000\u10bc\u0183\u0001\u0000"+
		"\u0000\u0000\u10bd\u10be\u0005\f\u0000\u0000\u10be\u10bf\u0005\u0190\u0000"+
		"\u0000\u10bf\u10c0\u0003\u03f2\u01f9\u0000\u10c0\u10c2\u0005P\u0000\u0000"+
		"\u10c1\u10c3\u0005v\u0000\u0000\u10c2\u10c1\u0001\u0000\u0000\u0000\u10c2"+
		"\u10c3\u0001\u0000\u0000\u0000\u10c3\u10c7\u0001\u0000\u0000\u0000\u10c4"+
		"\u10c6\u0003\u0206\u0103\u0000\u10c5\u10c4\u0001\u0000\u0000\u0000\u10c6"+
		"\u10c9\u0001\u0000\u0000\u0000\u10c7\u10c5\u0001\u0000\u0000\u0000\u10c7"+
		"\u10c8\u0001\u0000\u0000\u0000\u10c8\u10cc\u0001\u0000\u0000\u0000\u10c9"+
		"\u10c7\u0001\u0000\u0000\u0000\u10ca\u10cb\u0005\u01b2\u0000\u0000\u10cb"+
		"\u10cd\u0005\u01d6\u0000\u0000\u10cc\u10ca\u0001\u0000\u0000\u0000\u10cc"+
		"\u10cd\u0001\u0000\u0000\u0000\u10cd\u0185\u0001\u0000\u0000\u0000\u10ce"+
		"\u10d1\u0005c\u0000\u0000\u10cf\u10d0\u0005\u0167\u0000\u0000\u10d0\u10d2"+
		"\u0005\u01aa\u0000\u0000\u10d1\u10cf\u0001\u0000\u0000\u0000\u10d1\u10d2"+
		"\u0001\u0000\u0000\u0000\u10d2\u10d4\u0001\u0000\u0000\u0000\u10d3\u10ce"+
		"\u0001\u0000\u0000\u0000\u10d3\u10d4\u0001\u0000\u0000\u0000\u10d4\u10d5"+
		"\u0001\u0000\u0000\u0000\u10d5\u10d6\u0005\u0190\u0000\u0000\u10d6\u10e2"+
		"\u0003\u03f2\u01f9\u0000\u10d7\u10d8\u0005\u0285\u0000\u0000\u10d8\u10dd"+
		"\u0003\u0212\u0109\u0000\u10d9\u10da\u0005\u028b\u0000\u0000\u10da\u10dc"+
		"\u0003\u0212\u0109\u0000\u10db\u10d9\u0001\u0000\u0000\u0000\u10dc\u10df"+
		"\u0001\u0000\u0000\u0000\u10dd\u10db\u0001\u0000\u0000\u0000\u10dd\u10de"+
		"\u0001\u0000\u0000\u0000\u10de\u10e0\u0001\u0000\u0000\u0000\u10df\u10dd"+
		"\u0001\u0000\u0000\u0000\u10e0\u10e1\u0005\u0286\u0000\u0000\u10e1\u10e3"+
		"\u0001\u0000\u0000\u0000\u10e2\u10d7\u0001\u0000\u0000\u0000\u10e2\u10e3"+
		"\u0001\u0000\u0000\u0000\u10e3\u10e5\u0001\u0000\u0000\u0000\u10e4\u10e6"+
		"\u0003\u0204\u0102\u0000\u10e5\u10e4\u0001\u0000\u0000\u0000\u10e5\u10e6"+
		"\u0001\u0000\u0000\u0000\u10e6\u10e7\u0001\u0000\u0000\u0000\u10e7\u10f4"+
		"\u0007&\u0000\u0000\u10e8\u10ea\u0005z\u0000\u0000\u10e9\u10e8\u0001\u0000"+
		"\u0000\u0000\u10e9\u10ea\u0001\u0000\u0000\u0000\u10ea\u10ee\u0001\u0000"+
		"\u0000\u0000\u10eb\u10ed\u0003\u0216\u010b\u0000\u10ec\u10eb\u0001\u0000"+
		"\u0000\u0000\u10ed\u10f0\u0001\u0000\u0000\u0000\u10ee\u10ec\u0001\u0000"+
		"\u0000\u0000\u10ee\u10ef\u0001\u0000\u0000\u0000\u10ef\u10f1\u0001\u0000"+
		"\u0000\u0000\u10f0\u10ee\u0001\u0000\u0000\u0000\u10f1\u10f5\u0003\u0260"+
		"\u0130\u0000\u10f2\u10f5\u0003\u0208\u0104\u0000\u10f3\u10f5\u0005\u00ae"+
		"\u0000\u0000\u10f4\u10e9\u0001\u0000\u0000\u0000\u10f4\u10f2\u0001\u0000"+
		"\u0000\u0000\u10f4\u10f3\u0001\u0000\u0000\u0000\u10f5\u0187\u0001\u0000"+
		"\u0000\u0000\u10f6\u10f7\u0005\u0091\u0000\u0000\u10f7\u10f8\u0005\u0215"+
		"\u0000\u0000\u10f8\u10f9\u0003\u03f4\u01fa\u0000\u10f9\u0189\u0001\u0000"+
		"\u0000\u0000\u10fa\u10fb\u0005\f\u0000\u0000\u10fb\u10fc\u0005\u0215\u0000"+
		"\u0000\u10fc\u110f\u0003\u03f4\u01fa\u0000\u10fd\u1110\u0007\u0004\u0000"+
		"\u0000\u10fe\u10ff\u0005\u01a9\u0000\u0000\u10ff\u1100\u0005\u020e\u0000"+
		"\u0000\u1100\u1110\u0003\u03f4\u01fa\u0000\u1101\u1103\u0005P\u0000\u0000"+
		"\u1102\u1104\u0005v\u0000\u0000\u1103\u1102\u0001\u0000\u0000\u0000\u1103"+
		"\u1104\u0001\u0000\u0000\u0000\u1104\u1108\u0001\u0000\u0000\u0000\u1105"+
		"\u1107\u0003\u0206\u0103\u0000\u1106\u1105\u0001\u0000\u0000\u0000\u1107"+
		"\u110a\u0001\u0000\u0000\u0000\u1108\u1106\u0001\u0000\u0000\u0000\u1108"+
		"\u1109\u0001\u0000\u0000\u0000\u1109\u110d\u0001\u0000\u0000\u0000\u110a"+
		"\u1108\u0001\u0000\u0000\u0000\u110b\u110c\u0005\u01b2\u0000\u0000\u110c"+
		"\u110e\u0005\u01d6\u0000\u0000\u110d\u110b\u0001\u0000\u0000\u0000\u110d"+
		"\u110e\u0001\u0000\u0000\u0000\u110e\u1110\u0001\u0000\u0000\u0000\u110f"+
		"\u10fd\u0001\u0000\u0000\u0000\u110f\u10fe\u0001\u0000\u0000\u0000\u110f"+
		"\u1101\u0001\u0000\u0000\u0000\u1110\u018b\u0001\u0000\u0000\u0000\u1111"+
		"\u1114\u0005c\u0000\u0000\u1112\u1113\u0005\u0167\u0000\u0000\u1113\u1115"+
		"\u0005\u01aa\u0000\u0000\u1114\u1112\u0001\u0000\u0000\u0000\u1114\u1115"+
		"\u0001\u0000\u0000\u0000\u1115\u1116\u0001\u0000\u0000\u0000\u1116\u1117"+
		"\u0005\u0215\u0000\u0000\u1117\u111b\u0003\u03f4\u01fa\u0000\u1118\u111c"+
		"\u0003\u0192\u00c9\u0000\u1119\u111c\u0003\u0196\u00cb\u0000\u111a\u111c"+
		"\u0003\u0198\u00cc\u0000\u111b\u1118\u0001\u0000\u0000\u0000\u111b\u1119"+
		"\u0001\u0000\u0000\u0000\u111b\u111a\u0001\u0000\u0000\u0000\u111c\u111e"+
		"\u0001\u0000\u0000\u0000\u111d\u111f\u0003\u018e\u00c7\u0000\u111e\u111d"+
		"\u0001\u0000\u0000\u0000\u111e\u111f\u0001\u0000\u0000\u0000\u111f\u1121"+
		"\u0001\u0000\u0000\u0000\u1120\u1122\u0007\u0004\u0000\u0000\u1121\u1120"+
		"\u0001\u0000\u0000\u0000\u1121\u1122\u0001\u0000\u0000\u0000\u1122\u1124"+
		"\u0001\u0000\u0000\u0000\u1123\u1125\u0003\u0190\u00c8\u0000\u1124\u1123"+
		"\u0001\u0000\u0000\u0000\u1124\u1125\u0001\u0000\u0000\u0000\u1125\u1126"+
		"\u0001\u0000\u0000\u0000\u1126\u1127\u0003\u019a\u00cd\u0000\u1127\u018d"+
		"\u0001\u0000\u0000\u0000\u1128\u1129\u0005\u00bc\u0000\u0000\u1129\u112e"+
		"\u0003\u03f4\u01fa\u0000\u112a\u112b\u0005\u028b\u0000\u0000\u112b\u112d"+
		"\u0003\u03f4\u01fa\u0000\u112c\u112a\u0001\u0000\u0000\u0000\u112d\u1130"+
		"\u0001\u0000\u0000\u0000\u112e\u112c\u0001\u0000\u0000\u0000\u112e\u112f"+
		"\u0001\u0000\u0000\u0000\u112f\u018f\u0001\u0000\u0000\u0000\u1130\u112e"+
		"\u0001\u0000\u0000\u0000\u1131\u1132\u0005\u023d\u0000\u0000\u1132\u1133"+
		"\u0005\u0285\u0000\u0000\u1133\u1134\u0003\u0342\u01a1\u0000\u1134\u1135"+
		"\u0005\u0286\u0000\u0000\u1135\u0191\u0001\u0000\u0000\u0000\u1136\u113b"+
		"\u0005!\u0000\u0000\u1137\u113b\u0005\u0006\u0000\u0000\u1138\u1139\u0005"+
		"\u00ed\u0000\u0000\u1139\u113b\u0005\u015c\u0000\u0000\u113a\u1136\u0001"+
		"\u0000\u0000\u0000\u113a\u1137\u0001\u0000\u0000\u0000\u113a\u1138\u0001"+
		"\u0000\u0000\u0000\u113b\u113c\u0001\u0000\u0000\u0000\u113c\u113e\u0003"+
		"\u01a4\u00d2\u0000\u113d\u113f\u0003\u01aa\u00d5\u0000\u113e\u113d\u0001"+
		"\u0000\u0000\u0000\u113e\u113f\u0001\u0000\u0000\u0000\u113f\u1141\u0001"+
		"\u0000\u0000\u0000\u1140\u1142\u0003\u0194\u00ca\u0000\u1141\u1140\u0001"+
		"\u0000\u0000\u0000\u1141\u1142\u0001\u0000\u0000\u0000\u1142\u0193\u0001"+
		"\u0000\u0000\u0000\u1143\u1144\u0005\u00bd\u0000\u0000\u1144\u1145\u0005"+
		"\u0093\u0000\u0000\u1145\u1146\u0005\u01ba\u0000\u0000\u1146\u0195\u0001"+
		"\u0000\u0000\u0000\u1147\u1148\u0005\u00bd\u0000\u0000\u1148\u114a\u0003"+
		"\u01a4\u00d2\u0000\u1149\u114b\u0003\u01aa\u00d5\u0000\u114a\u1149\u0001"+
		"\u0000\u0000\u0000\u114a\u114b\u0001\u0000\u0000\u0000\u114b\u0197\u0001"+
		"\u0000\u0000\u0000\u114c\u114d\u0007+\u0000\u0000\u114d\u1152\u0003\u01a2"+
		"\u00d1\u0000\u114e\u114f\u0005\u0167\u0000\u0000\u114f\u1151\u0003\u01a2"+
		"\u00d1\u0000\u1150\u114e\u0001\u0000\u0000\u0000\u1151\u1154\u0001\u0000"+
		"\u0000\u0000\u1152\u1150\u0001\u0000\u0000\u0000\u1152\u1153\u0001\u0000"+
		"\u0000\u0000\u1153\u1155\u0001\u0000\u0000\u0000\u1154\u1152\u0001\u0000"+
		"\u0000\u0000\u1155\u115d\u0005\u0162\u0000\u0000\u1156\u115e\u0005o\u0000"+
		"\u0000\u1157\u1158\u0003\u03d4\u01ea\u0000\u1158\u1159\u0005\u027e\u0000"+
		"\u0000\u1159\u115b\u0001\u0000\u0000\u0000\u115a\u1157\u0001\u0000\u0000"+
		"\u0000\u115a\u115b\u0001\u0000\u0000\u0000\u115b\u115c\u0001\u0000\u0000"+
		"\u0000\u115c\u115e\u0005\u01c3\u0000\u0000\u115d\u1156\u0001\u0000\u0000"+
		"\u0000\u115d\u115a\u0001\u0000\u0000\u0000\u115e\u0199\u0001\u0000\u0000"+
		"\u0000\u115f\u1160\u0005R\u0000\u0000\u1160\u1165\u0005\u0215\u0000\u0000"+
		"\u1161\u1162\u00057\u0000\u0000\u1162\u1165\u0003\u042e\u0217\u0000\u1163"+
		"\u1165\u0003\u0264\u0132\u0000\u1164\u115f\u0001\u0000\u0000\u0000\u1164"+
		"\u1161\u0001\u0000\u0000\u0000\u1164\u1163\u0001\u0000\u0000\u0000\u1165"+
		"\u019b\u0001\u0000\u0000\u0000\u1166\u1168\u0003\u03d6\u01eb\u0000\u1167"+
		"\u1169\u0003\u040e\u0207\u0000\u1168\u1167\u0001\u0000\u0000\u0000\u1168"+
		"\u1169\u0001\u0000\u0000\u0000\u1169\u019d\u0001\u0000\u0000\u0000\u116a"+
		"\u116b\u0005R\u0000\u0000\u116b\u116f\u0005\u0215\u0000\u0000\u116c\u116e"+
		"\u0003\u0216\u010b\u0000\u116d\u116c\u0001\u0000\u0000\u0000\u116e\u1171"+
		"\u0001\u0000\u0000\u0000\u116f\u116d\u0001\u0000\u0000\u0000\u116f\u1170"+
		"\u0001\u0000\u0000\u0000\u1170\u1173\u0001\u0000\u0000\u0000\u1171\u116f"+
		"\u0001\u0000\u0000\u0000\u1172\u1174\u0003\u01a0\u00d0\u0000\u1173\u1172"+
		"\u0001\u0000\u0000\u0000\u1174\u1175\u0001\u0000\u0000\u0000\u1175\u1173"+
		"\u0001\u0000\u0000\u0000\u1175\u1176\u0001\u0000\u0000\u0000\u1176\u1177"+
		"\u0001\u0000\u0000\u0000\u1177\u1178\u0005\u009c\u0000\u0000\u1178\u1179"+
		"\u0003\u03f4\u01fa\u0000\u1179\u019f\u0001\u0000\u0000\u0000\u117a\u117b"+
		"\u0005!\u0000\u0000\u117b\u117c\u0005\u01ec\u0000\u0000\u117c\u117d\u0005"+
		"\u00f5\u0000\u0000\u117d\u117e\u0003\u0264\u0132\u0000\u117e\u117f\u0005"+
		"!\u0000\u0000\u117f\u1180\u0005\u01ec\u0000\u0000\u1180\u1181\u0005\u0291"+
		"\u0000\u0000\u1181\u119f\u0001\u0000\u0000\u0000\u1182\u1183\u0005!\u0000"+
		"\u0000\u1183\u1184\u0005\u0093\u0000\u0000\u1184\u1185\u0005\u01ba\u0000"+
		"\u0000\u1185\u1186\u0005\u00f5\u0000\u0000\u1186\u1187\u0003\u0264\u0132"+
		"\u0000\u1187\u1188\u0005!\u0000\u0000\u1188\u1189\u0005\u0093\u0000\u0000"+
		"\u1189\u118a\u0005\u01ba\u0000\u0000\u118a\u118b\u0005\u0291\u0000\u0000"+
		"\u118b\u119f\u0001\u0000\u0000\u0000\u118c\u118d\u0005\u0006\u0000\u0000"+
		"\u118d\u118e\u0005\u01ec\u0000\u0000\u118e\u118f\u0005\u00f5\u0000\u0000"+
		"\u118f\u1190\u0003\u0264\u0132\u0000\u1190\u1191\u0005\u0006\u0000\u0000"+
		"\u1191\u1192\u0005\u01ec\u0000\u0000\u1192\u1193\u0005\u0291\u0000\u0000"+
		"\u1193\u119f\u0001\u0000\u0000\u0000\u1194\u1195\u0005\u0006\u0000\u0000"+
		"\u1195\u1196\u0005\u0093\u0000\u0000\u1196\u1197\u0005\u01ba\u0000\u0000"+
		"\u1197\u1198\u0005\u00f5\u0000\u0000\u1198\u1199\u0003\u0264\u0132\u0000"+
		"\u1199\u119a\u0005\u0006\u0000\u0000\u119a\u119b\u0005\u0093\u0000\u0000"+
		"\u119b\u119c\u0005\u01ba\u0000\u0000\u119c\u119d\u0005\u0291\u0000\u0000"+
		"\u119d\u119f\u0001\u0000\u0000\u0000\u119e\u117a\u0001\u0000\u0000\u0000"+
		"\u119e\u1182\u0001\u0000\u0000\u0000\u119e\u118c\u0001\u0000\u0000\u0000"+
		"\u119e\u1194\u0001\u0000\u0000\u0000\u119f\u01a1\u0001\u0000\u0000\u0000"+
		"\u11a0\u11bb\u0005\f\u0000\u0000\u11a1\u11bb\u0005\u000e\u0000\u0000\u11a2"+
		"\u11a3\u0005\u0016\u0000\u0000\u11a3\u11bb\u0005\u01ef\u0000\u0000\u11a4"+
		"\u11bb\u0005\u0019\u0000\u0000\u11a5\u11bb\u0005K\u0000\u0000\u11a6\u11bb"+
		"\u0005c\u0000\u0000\u11a7\u11a8\u0005\u008d\u0000\u0000\u11a8\u11bb\u0005"+
		"\u01ef\u0000\u0000\u11a9\u11bb\u0005\u0091\u0000\u0000\u11aa\u11bb\u0005"+
		"\u00ca\u0000\u0000\u11ab\u11bb\u0005\u013e\u0000\u0000\u11ac\u11bb\u0005"+
		"\u01a9\u0000\u0000\u11ad\u11bb\u0005\u01b4\u0000\u0000\u11ae\u11bb\u0005"+
		"\u0218\u0000\u0000\u11af\u11bb\u0005u\u0000\u0000\u11b0\u11bb\u0005\u01eb"+
		"\u0000\u0000\u11b1\u11bb\u0005\u01da\u0000\u0000\u11b2\u11bb\u0005s\u0000"+
		"\u0000\u11b3\u11bb\u0005\u0116\u0000\u0000\u11b4\u11bb\u0005\u0114\u0000"+
		"\u0000\u11b5\u11bb\u0005\u01d2\u0000\u0000\u11b6\u11bb\u0005\u01fb\u0000"+
		"\u0000\u11b7\u11bb\u0005o\u0000\u0000\u11b8\u11bb\u0005\u01c3\u0000\u0000"+
		"\u11b9\u11bb\u0005\u00bc\u0000\u0000\u11ba\u11a0\u0001\u0000\u0000\u0000"+
		"\u11ba\u11a1\u0001\u0000\u0000\u0000\u11ba\u11a2\u0001\u0000\u0000\u0000"+
		"\u11ba\u11a4\u0001\u0000\u0000\u0000\u11ba\u11a5\u0001\u0000\u0000\u0000"+
		"\u11ba\u11a6\u0001\u0000\u0000\u0000\u11ba\u11a7\u0001\u0000\u0000\u0000"+
		"\u11ba\u11a9\u0001\u0000\u0000\u0000\u11ba\u11aa\u0001\u0000\u0000\u0000"+
		"\u11ba\u11ab\u0001\u0000\u0000\u0000\u11ba\u11ac\u0001\u0000\u0000\u0000"+
		"\u11ba\u11ad\u0001\u0000\u0000\u0000\u11ba\u11ae\u0001\u0000\u0000\u0000"+
		"\u11ba\u11af\u0001\u0000\u0000\u0000\u11ba\u11b0\u0001\u0000\u0000\u0000"+
		"\u11ba\u11b1\u0001\u0000\u0000\u0000\u11ba\u11b2\u0001\u0000\u0000\u0000"+
		"\u11ba\u11b3\u0001\u0000\u0000\u0000\u11ba\u11b4\u0001\u0000\u0000\u0000"+
		"\u11ba\u11b5\u0001\u0000\u0000\u0000\u11ba\u11b6\u0001\u0000\u0000\u0000"+
		"\u11ba\u11b7\u0001\u0000\u0000\u0000\u11ba\u11b8\u0001\u0000\u0000\u0000"+
		"\u11ba\u11b9\u0001\u0000\u0000\u0000\u11bb\u01a3\u0001\u0000\u0000\u0000"+
		"\u11bc\u11c1\u0003\u01a6\u00d3\u0000\u11bd\u11be\u0005\u0167\u0000\u0000"+
		"\u11be\u11c0\u0003\u01a6\u00d3\u0000\u11bf\u11bd\u0001\u0000\u0000\u0000"+
		"\u11c0\u11c3\u0001\u0000\u0000\u0000\u11c1\u11bf\u0001\u0000\u0000\u0000"+
		"\u11c1\u11c2\u0001\u0000\u0000\u0000\u11c2\u11c4\u0001\u0000\u0000\u0000"+
		"\u11c3\u11c1\u0001\u0000\u0000\u0000\u11c4\u11c6\u0005\u0162\u0000\u0000"+
		"\u11c5\u11c7\u0003\u01a8\u00d4\u0000\u11c6\u11c5\u0001\u0000\u0000\u0000"+
		"\u11c6\u11c7\u0001\u0000\u0000\u0000\u11c7\u11c8\u0001\u0000\u0000\u0000"+
		"\u11c8\u11c9\u0003\u0406\u0203\u0000\u11c9\u01a5\u0001\u0000\u0000\u0000"+
		"\u11ca\u11d4\u0007,\u0000\u0000\u11cb\u11cc\u0005\u015c\u0000\u0000\u11cc"+
		"\u11d1\u0003\u0402\u0201\u0000\u11cd\u11ce\u0005\u028b\u0000\u0000\u11ce"+
		"\u11d0\u0003\u0402\u0201\u0000\u11cf\u11cd\u0001\u0000\u0000\u0000\u11d0"+
		"\u11d3\u0001\u0000\u0000\u0000\u11d1\u11cf\u0001\u0000\u0000\u0000\u11d1"+
		"\u11d2\u0001\u0000\u0000\u0000\u11d2\u11d5\u0001\u0000\u0000\u0000\u11d3"+
		"\u11d1\u0001\u0000\u0000\u0000\u11d4\u11cb\u0001\u0000\u0000\u0000\u11d4"+
		"\u11d5\u0001\u0000\u0000\u0000\u11d5\u01a7\u0001\u0000\u0000\u0000\u11d6"+
		"\u11d7\u0005\u0139\u0000\u0000\u11d7\u11d8\u0005\u01fd\u0000\u0000\u11d8"+
		"\u11d9\u0003\u0406\u0203\u0000\u11d9\u11da\u0005\u015c\u0000\u0000\u11da"+
		"\u01a9\u0001\u0000\u0000\u0000\u11db\u11dd\u0005\u01a2\u0000\u0000\u11dc"+
		"\u11de\u0003\u01ac\u00d6\u0000\u11dd\u11dc\u0001\u0000\u0000\u0000\u11de"+
		"\u11df\u0001\u0000\u0000\u0000\u11df\u11dd\u0001\u0000\u0000\u0000\u11df"+
		"\u11e0\u0001\u0000\u0000\u0000\u11e0\u01ab\u0001\u0000\u0000\u0000\u11e1"+
		"\u11e2\u0007-\u0000\u0000\u11e2\u11e3\u0003\u03bc\u01de\u0000\u11e3\u01ad"+
		"\u0001\u0000\u0000\u0000\u11e4\u11e5\u0005\u0091\u0000\u0000\u11e5\u11e7"+
		"\u0005\u021a\u0000\u0000\u11e6\u11e8\u0005.\u0000\u0000\u11e7\u11e6\u0001"+
		"\u0000\u0000\u0000\u11e7\u11e8\u0001\u0000\u0000\u0000\u11e8\u11e9\u0001"+
		"\u0000\u0000\u0000\u11e9\u11eb\u0003\u03ea\u01f5\u0000\u11ea\u11ec\u0007"+
		".\u0000\u0000\u11eb\u11ea\u0001\u0000\u0000\u0000\u11eb\u11ec\u0001\u0000"+
		"\u0000\u0000\u11ec\u01af\u0001\u0000\u0000\u0000\u11ed\u11ee\u0005\f\u0000"+
		"\u0000\u11ee\u11ef\u0005\u021a\u0000\u0000\u11ef\u11f5\u0003\u03ea\u01f5"+
		"\u0000\u11f0\u11f6\u0003\u01b2\u00d9\u0000\u11f1\u11f6\u0003\u01b4\u00da"+
		"\u0000\u11f2\u11f6\u0003\u01b6\u00db\u0000\u11f3\u11f6\u0003\u01be\u00df"+
		"\u0000\u11f4\u11f6\u0003\u01e0\u00f0\u0000\u11f5\u11f0\u0001\u0000\u0000"+
		"\u0000\u11f5\u11f1\u0001\u0000\u0000\u0000\u11f5\u11f2\u0001\u0000\u0000"+
		"\u0000\u11f5\u11f3\u0001\u0000\u0000\u0000\u11f5\u11f4\u0001\u0000\u0000"+
		"\u0000\u11f6\u11f8\u0001\u0000\u0000\u0000\u11f7\u11f9\u0003\u01c0\u00e0"+
		"\u0000\u11f8\u11f7\u0001\u0000\u0000\u0000\u11f8\u11f9\u0001\u0000\u0000"+
		"\u0000\u11f9\u01b1\u0001\u0000\u0000\u0000\u11fa\u11fc\u0005P\u0000\u0000"+
		"\u11fb\u11fd\u0005v\u0000\u0000\u11fc\u11fb\u0001\u0000\u0000\u0000\u11fc"+
		"\u11fd\u0001\u0000\u0000\u0000\u11fd\u11ff\u0001\u0000\u0000\u0000\u11fe"+
		"\u1200\u0007/\u0000\u0000\u11ff\u11fe\u0001\u0000\u0000\u0000\u11ff\u1200"+
		"\u0001\u0000\u0000\u0000\u1200\u1204\u0001\u0000\u0000\u0000\u1201\u1203"+
		"\u0003\u0206\u0103\u0000\u1202\u1201\u0001\u0000\u0000\u0000\u1203\u1206"+
		"\u0001\u0000\u0000\u0000\u1204\u1202\u0001\u0000\u0000\u0000\u1204\u1205"+
		"\u0001\u0000\u0000\u0000\u1205\u1209\u0001\u0000\u0000\u0000\u1206\u1204"+
		"\u0001\u0000\u0000\u0000\u1207\u1208\u0005\u01b2\u0000\u0000\u1208\u120a"+
		"\u0005\u01d6\u0000\u0000\u1209\u1207\u0001\u0000\u0000\u0000\u1209\u120a"+
		"\u0001\u0000\u0000\u0000\u120a\u01b3\u0001\u0000\u0000\u0000\u120b\u120d"+
		"\u0005\u01aa\u0000\u0000\u120c\u120e\u0003\u0204\u0102\u0000\u120d\u120c"+
		"\u0001\u0000\u0000\u0000\u120d\u120e\u0001\u0000\u0000\u0000\u120e\u120f"+
		"\u0001\u0000\u0000\u0000\u120f\u1210\u0005\u0014\u0000\u0000\u1210\u1211"+
		"\u0005\u015b\u0000\u0000\u1211\u1212\u0005\u0285\u0000\u0000\u1212\u1217"+
		"\u0003\u01e2\u00f1\u0000\u1213\u1214\u0005\u028b\u0000\u0000\u1214\u1216"+
		"\u0003\u01e2\u00f1\u0000\u1215\u1213\u0001\u0000\u0000\u0000\u1216\u1219"+
		"\u0001\u0000\u0000\u0000\u1217\u1215\u0001\u0000\u0000\u0000\u1217\u1218"+
		"\u0001\u0000\u0000\u0000\u1218\u121a\u0001\u0000\u0000\u0000\u1219\u1217"+
		"\u0001\u0000\u0000\u0000\u121a\u121b\u0005\u0286\u0000\u0000\u121b\u01b5"+
		"\u0001\u0000\u0000\u0000\u121c\u1221\u0003\u01b8\u00dc\u0000\u121d\u121e"+
		"\u0005\u028b\u0000\u0000\u121e\u1220\u0003\u01b8\u00dc\u0000\u121f\u121d"+
		"\u0001\u0000\u0000\u0000\u1220\u1223\u0001\u0000\u0000\u0000\u1221\u121f"+
		"\u0001\u0000\u0000\u0000\u1221\u1222\u0001\u0000\u0000\u0000\u1222\u01b7"+
		"\u0001\u0000\u0000\u0000\u1223\u1221\u0001\u0000\u0000\u0000\u1224\u1227"+
		"\u00070\u0000\u0000\u1225\u1228\u0003\u01f2\u00f9\u0000\u1226\u1228\u0003"+
		"\u01ea\u00f5\u0000\u1227\u1225\u0001\u0000\u0000\u0000\u1227\u1226\u0001"+
		"\u0000\u0000\u0000\u1228\u01b9\u0001\u0000\u0000\u0000\u1229\u122a\u0007"+
		"1\u0000\u0000\u122a\u1237\u0005\u0018\u0000\u0000\u122b\u1238\u0003\u01bc"+
		"\u00de\u0000\u122c\u122d\u0005\u0285\u0000\u0000\u122d\u1232\u0003\u01bc"+
		"\u00de\u0000\u122e\u122f\u0005\u028b\u0000\u0000\u122f\u1231\u0003\u01bc"+
		"\u00de\u0000\u1230\u122e\u0001\u0000\u0000\u0000\u1231\u1234\u0001\u0000"+
		"\u0000\u0000\u1232\u1230\u0001\u0000\u0000\u0000\u1232\u1233\u0001\u0000"+
		"\u0000\u0000\u1233\u1235\u0001\u0000\u0000\u0000\u1234\u1232\u0001\u0000"+
		"\u0000\u0000\u1235\u1236\u0005\u0286\u0000\u0000\u1236\u1238\u0001\u0000"+
		"\u0000\u0000\u1237\u122b\u0001\u0000\u0000\u0000\u1237\u122c\u0001\u0000"+
		"\u0000\u0000\u1238\u01bb\u0001\u0000\u0000\u0000\u1239\u123b\u0003\u03cc"+
		"\u01e6\u0000\u123a\u123c\u0003\u0418\u020c\u0000\u123b\u123a\u0001\u0000"+
		"\u0000\u0000\u123b\u123c\u0001\u0000\u0000\u0000\u123c\u01bd\u0001\u0000"+
		"\u0000\u0000\u123d\u1243\u0005\u012d\u0000\u0000\u123e\u123f\u0005\u010a"+
		"\u0000\u0000\u123f\u1244\u0003\u0344\u01a2\u0000\u1240\u1241\u0005\u0095"+
		"\u0000\u0000\u1241\u1242\u0005\u021a\u0000\u0000\u1242\u1244\u0003\u0418"+
		"\u020c\u0000\u1243\u123e\u0001\u0000\u0000\u0000\u1243\u1240\u0001\u0000"+
		"\u0000\u0000\u1244\u01bf\u0001\u0000\u0000\u0000\u1245\u1256\u0005\u00f3"+
		"\u0000\u0000\u1246\u1250\u00059\u0000\u0000\u1247\u1248\u0005^\u0000\u0000"+
		"\u1248\u1249\u0005\u020e\u0000\u0000\u1249\u1251\u0005\u01f6\u0000\u0000"+
		"\u124a\u124c\u0005\u0151\u0000\u0000\u124b\u124a\u0001\u0000\u0000\u0000"+
		"\u124b\u124c\u0001\u0000\u0000\u0000\u124c\u124d\u0001\u0000\u0000\u0000"+
		"\u124d\u124e\u0005\u00db\u0000\u0000\u124e\u124f\u0005\u01fd\u0000\u0000"+
		"\u124f\u1251\u0005n\u0000\u0000\u1250\u1247\u0001\u0000\u0000\u0000\u1250"+
		"\u124b\u0001\u0000\u0000\u0000\u1250\u1251\u0001\u0000\u0000\u0000\u1251"+
		"\u1253\u0001\u0000\u0000\u0000\u1252\u1254\u0003\u01c2\u00e1\u0000\u1253"+
		"\u1252\u0001\u0000\u0000\u0000\u1253\u1254\u0001\u0000\u0000\u0000\u1254"+
		"\u1256\u0001\u0000\u0000\u0000\u1255\u1245\u0001\u0000\u0000\u0000\u1255"+
		"\u1246\u0001\u0000\u0000\u0000\u1256\u01c1\u0001\u0000\u0000\u0000\u1257"+
		"\u1259\u0005\u00bf\u0000\u0000\u1258\u1257\u0001\u0000\u0000\u0000\u1258"+
		"\u1259\u0001\u0000\u0000\u0000\u1259\u125a\u0001\u0000\u0000\u0000\u125a"+
		"\u125b\u0005\u00a6\u0000\u0000\u125b\u125c\u0005\u00f2\u0000\u0000\u125c"+
		"\u125d\u0003\u0406\u0203\u0000\u125d\u01c3\u0001\u0000\u0000\u0000\u125e"+
		"\u1261\u0005c\u0000\u0000\u125f\u1260\u0005\u0167\u0000\u0000\u1260\u1262"+
		"\u0005\u01aa\u0000\u0000\u1261\u125f\u0001\u0000\u0000\u0000\u1261\u1262"+
		"\u0001\u0000\u0000\u0000\u1262\u1263\u0001\u0000\u0000\u0000\u1263\u1266"+
		"\u0005\u021a\u0000\u0000\u1264\u1267\u0003\u01c6\u00e3\u0000\u1265\u1267"+
		"\u0003\u01d2\u00e9\u0000\u1266\u1264\u0001\u0000\u0000\u0000\u1266\u1265"+
		"\u0001\u0000\u0000\u0000\u1267\u01c5\u0001\u0000\u0000\u0000\u1268\u126b"+
		"\u0003\u03ea\u01f5\u0000\u1269\u126a\u0005\u015e\u0000\u0000\u126a\u126c"+
		"\u0005\u0281\u0000\u0000\u126b\u1269\u0001\u0000\u0000\u0000\u126b\u126c"+
		"\u0001\u0000\u0000\u0000\u126c\u126e\u0001\u0000\u0000\u0000\u126d\u126f"+
		"\u0003\u01c8\u00e4\u0000\u126e\u126d\u0001\u0000\u0000\u0000\u126e\u126f"+
		"\u0001\u0000\u0000\u0000\u126f\u01c7\u0001\u0000\u0000\u0000\u1270\u1272"+
		"\u0003\u0204\u0102\u0000\u1271\u1270\u0001\u0000\u0000\u0000\u1271\u1272"+
		"\u0001\u0000\u0000\u0000\u1272\u1275\u0001\u0000\u0000\u0000\u1273\u1276"+
		"\u0003\u01ca\u00e5\u0000\u1274\u1276\u0003\u01cc\u00e6\u0000\u1275\u1273"+
		"\u0001\u0000\u0000\u0000\u1275\u1274\u0001\u0000\u0000\u0000\u1276\u1278"+
		"\u0001\u0000\u0000\u0000\u1277\u1279\u0003\u01d0\u00e8\u0000\u1278\u1277"+
		"\u0001\u0000\u0000\u0000\u1278\u1279\u0001\u0000\u0000\u0000\u1279\u1285"+
		"\u0001\u0000\u0000\u0000\u127a\u127b\u0005\u0285\u0000\u0000\u127b\u1280"+
		"\u0003\u01e2\u00f1\u0000\u127c\u127d\u0005\u028b\u0000\u0000\u127d\u127f"+
		"\u0003\u01e2\u00f1\u0000\u127e\u127c\u0001\u0000\u0000\u0000\u127f\u1282"+
		"\u0001\u0000\u0000\u0000\u1280\u127e\u0001\u0000\u0000\u0000\u1280\u1281"+
		"\u0001\u0000\u0000\u0000\u1281\u1283\u0001\u0000\u0000\u0000\u1282\u1280"+
		"\u0001\u0000\u0000\u0000\u1283\u1284\u0005\u0286\u0000\u0000\u1284\u1286"+
		"\u0001\u0000\u0000\u0000\u1285\u127a\u0001\u0000\u0000\u0000\u1285\u1286"+
		"\u0001\u0000\u0000\u0000\u1286\u128a\u0001\u0000\u0000\u0000\u1287\u1289"+
		"\u0003\u01e0\u00f0\u0000\u1288\u1287\u0001\u0000\u0000\u0000\u1289\u128c"+
		"\u0001\u0000\u0000\u0000\u128a\u1288\u0001\u0000\u0000\u0000\u128a\u128b"+
		"\u0001\u0000\u0000\u0000\u128b\u01c9\u0001\u0000\u0000\u0000\u128c\u128a"+
		"\u0001\u0000\u0000\u0000\u128d\u1291\u0007&\u0000\u0000\u128e\u1292\u0005"+
		"\u015b\u0000\u0000\u128f\u1292\u0003\u0232\u0119\u0000\u1290\u1292\u0003"+
		"\u01ce\u00e7\u0000\u1291\u128e\u0001\u0000\u0000\u0000\u1291\u128f\u0001"+
		"\u0000\u0000\u0000\u1291\u1290\u0001\u0000\u0000\u0000\u1292\u01cb\u0001"+
		"\u0000\u0000\u0000\u1293\u1294\u0005\u021c\u0000\u0000\u1294\u1295\u0003"+
		"\u0418\u020c\u0000\u1295\u01cd\u0001\u0000\u0000\u0000\u1296\u1297\u0005"+
		"\u01fd\u0000\u0000\u1297\u1298\u0005\u015c\u0000\u0000\u1298\u129b\u0003"+
		"\u0418\u020c\u0000\u1299\u129a\u0005\u0151\u0000\u0000\u129a\u129c\u0005"+
		"\u0155\u0000\u0000\u129b\u1299\u0001\u0000\u0000\u0000\u129b\u129c\u0001"+
		"\u0000\u0000\u0000\u129c\u01cf\u0001\u0000\u0000\u0000\u129d\u129e\u0005"+
		"\u00ae\u0000\u0000\u129e\u129f\u0005\u0131\u0000\u0000\u129f\u12a0\u0003"+
		"\u0344\u01a2\u0000\u12a0\u12a1\u0005\u00fd\u0000\u0000\u12a1\u12a2\u0005"+
		"\u00f8\u0000\u0000\u12a2\u12a3\u0005\u022a\u0000\u0000\u12a3\u12a4\u0007"+
		"2\u0000\u0000\u12a4\u01d1\u0001\u0000\u0000\u0000\u12a5\u12a6\u0005.\u0000"+
		"\u0000\u12a6\u12a7\u0003\u03ea\u01f5\u0000\u12a7\u12a9\u0007&\u0000\u0000"+
		"\u12a8\u12aa\u0003\u01d4\u00ea\u0000\u12a9\u12a8\u0001\u0000\u0000\u0000"+
		"\u12aa\u12ab\u0001\u0000\u0000\u0000\u12ab\u12a9\u0001\u0000\u0000\u0000"+
		"\u12ab\u12ac\u0001\u0000\u0000\u0000\u12ac\u12ad\u0001\u0000\u0000\u0000"+
		"\u12ad\u12ae\u0005\u009c\u0000\u0000\u12ae\u01d3\u0001\u0000\u0000\u0000"+
		"\u12af\u12b2\u0003\u01d6\u00eb\u0000\u12b0\u12b2\u0003\u01d8\u00ec\u0000"+
		"\u12b1\u12af\u0001\u0000\u0000\u0000\u12b1\u12b0\u0001\u0000\u0000\u0000"+
		"\u12b2\u01d5\u0001\u0000\u0000\u0000\u12b3\u12b4\u00073\u0000\u0000\u12b4"+
		"\u12b5\u0005\u0123\u0000\u0000\u12b5\u12b6\u0003\u01dc\u00ee\u0000\u12b6"+
		"\u01d7\u0001\u0000\u0000\u0000\u12b7\u12bb\u00074\u0000\u0000\u12b8\u12bc"+
		"\u0003\u01da\u00ed\u0000\u12b9\u12bc\u0003\u01dc\u00ee\u0000\u12ba\u12bc"+
		"\u0003\u01de\u00ef\u0000\u12bb\u12b8\u0001\u0000\u0000\u0000\u12bb\u12b9"+
		"\u0001\u0000\u0000\u0000\u12bb\u12ba\u0001\u0000\u0000\u0000\u12bc\u01d9"+
		"\u0001\u0000\u0000\u0000\u12bd\u12be\u0005\u0190\u0000\u0000\u12be\u12bf"+
		"\u0003\u03f2\u01f9\u0000\u12bf\u12c0\u0005\u0285\u0000\u0000\u12c0\u12c5"+
		"\u0003\u01f8\u00fc\u0000\u12c1\u12c2\u0005\u028b\u0000\u0000\u12c2\u12c4"+
		"\u0003\u01f8\u00fc\u0000\u12c3\u12c1\u0001\u0000\u0000\u0000\u12c4\u12c7"+
		"\u0001\u0000\u0000\u0000\u12c5\u12c3\u0001\u0000\u0000\u0000\u12c5\u12c6"+
		"\u0001\u0000\u0000\u0000\u12c6\u12c8\u0001\u0000\u0000\u0000\u12c7\u12c5"+
		"\u0001\u0000\u0000\u0000\u12c8\u12c9\u0005\u0286\u0000\u0000\u12c9\u12d7"+
		"\u0007&\u0000\u0000\u12ca\u12d8\u0003\u0208\u0104\u0000\u12cb\u12cd\u0005"+
		"z\u0000\u0000\u12cc\u12cb\u0001\u0000\u0000\u0000\u12cc\u12cd\u0001\u0000"+
		"\u0000\u0000\u12cd\u12d1\u0001\u0000\u0000\u0000\u12ce\u12d0\u0003\u0216"+
		"\u010b\u0000\u12cf\u12ce\u0001\u0000\u0000\u0000\u12d0\u12d3\u0001\u0000"+
		"\u0000\u0000\u12d1\u12cf\u0001\u0000\u0000\u0000\u12d1\u12d2\u0001\u0000"+
		"\u0000\u0000\u12d2\u12d4\u0001\u0000\u0000\u0000\u12d3\u12d1\u0001\u0000"+
		"\u0000\u0000\u12d4\u12d5\u0003\u0260\u0130\u0000\u12d5\u12d6\u0005\u0291"+
		"\u0000\u0000\u12d6\u12d8\u0001\u0000\u0000\u0000\u12d7\u12ca\u0001\u0000"+
		"\u0000\u0000\u12d7\u12cc\u0001\u0000\u0000\u0000\u12d8\u01db\u0001\u0000"+
		"\u0000\u0000\u12d9\u12da\u0005\u00c6\u0000\u0000\u12da\u12e6\u0003\u03f0"+
		"\u01f8\u0000\u12db\u12dc\u0005\u0285\u0000\u0000\u12dc\u12e1\u0003\u01f8"+
		"\u00fc\u0000\u12dd\u12de\u0005\u028b\u0000\u0000\u12de\u12e0\u0003\u01f8"+
		"\u00fc\u0000\u12df\u12dd\u0001\u0000\u0000\u0000\u12e0\u12e3\u0001\u0000"+
		"\u0000\u0000\u12e1\u12df\u0001\u0000\u0000\u0000\u12e1\u12e2\u0001\u0000"+
		"\u0000\u0000\u12e2\u12e4\u0001\u0000\u0000\u0000\u12e3\u12e1\u0001\u0000"+
		"\u0000\u0000\u12e4\u12e5\u0005\u0286\u0000\u0000\u12e5\u12e7\u0001\u0000"+
		"\u0000\u0000\u12e6\u12db\u0001\u0000\u0000\u0000\u12e6\u12e7\u0001\u0000"+
		"\u0000\u0000\u12e7\u12e8\u0001\u0000\u0000\u0000\u12e8\u12e9\u0005\u01b0"+
		"\u0000\u0000\u12e9\u12ea\u0003\u0418\u020c\u0000\u12ea\u12f8\u0007&\u0000"+
		"\u0000\u12eb\u12f9\u0003\u0208\u0104\u0000\u12ec\u12ee\u0005z\u0000\u0000"+
		"\u12ed\u12ec\u0001\u0000\u0000\u0000\u12ed\u12ee\u0001\u0000\u0000\u0000"+
		"\u12ee\u12f2\u0001\u0000\u0000\u0000\u12ef\u12f1\u0003\u0216\u010b\u0000"+
		"\u12f0\u12ef\u0001\u0000\u0000\u0000\u12f1\u12f4\u0001\u0000\u0000\u0000"+
		"\u12f2\u12f0\u0001\u0000\u0000\u0000\u12f2\u12f3\u0001\u0000\u0000\u0000"+
		"\u12f3\u12f5\u0001\u0000\u0000\u0000\u12f4\u12f2\u0001\u0000\u0000\u0000"+
		"\u12f5\u12f6\u0003\u0260\u0130\u0000\u12f6\u12f7\u0005\u0291\u0000\u0000"+
		"\u12f7\u12f9\u0001\u0000\u0000\u0000\u12f8\u12eb\u0001\u0000\u0000\u0000"+
		"\u12f8\u12ed\u0001\u0000\u0000\u0000\u12f9\u01dd\u0001\u0000\u0000\u0000"+
		"\u12fa\u12fc\u0005\u00b5\u0000\u0000\u12fb\u12fa\u0001\u0000\u0000\u0000"+
		"\u12fb\u12fc\u0001\u0000\u0000\u0000\u12fc\u12fe\u0001\u0000\u0000\u0000"+
		"\u12fd\u12ff\u0005\u00ec\u0000\u0000\u12fe\u12fd\u0001\u0000\u0000\u0000"+
		"\u12fe\u12ff\u0001\u0000\u0000\u0000\u12ff\u1300\u0001\u0000\u0000\u0000"+
		"\u1300\u1301\u0005Z\u0000\u0000\u1301\u1302\u0005\u00c6\u0000\u0000\u1302"+
		"\u1314\u0003\u0418\u020c\u0000\u1303\u1304\u0005\u0285\u0000\u0000\u1304"+
		"\u1305\u0005\u01cd\u0000\u0000\u1305\u1306\u0005\u00d9\u0000\u0000\u1306"+
		"\u1307\u0005\u016c\u0000\u0000\u1307\u1308\u0003\u0418\u020c\u0000\u1308"+
		"\u1309\u0005\u028b\u0000\u0000\u1309\u130a\u0001\u0000\u0000\u0000\u130a"+
		"\u130f\u0003\u01f8\u00fc\u0000\u130b\u130c\u0005\u028b\u0000\u0000\u130c"+
		"\u130e\u0003\u01f8\u00fc\u0000\u130d\u130b\u0001\u0000\u0000\u0000\u130e"+
		"\u1311\u0001\u0000\u0000\u0000\u130f\u130d\u0001\u0000\u0000\u0000\u130f"+
		"\u1310\u0001\u0000\u0000\u0000\u1310\u1312\u0001\u0000\u0000\u0000\u1311"+
		"\u130f\u0001\u0000\u0000\u0000\u1312\u1313\u0005\u0286\u0000\u0000\u1313"+
		"\u1315\u0001\u0000\u0000\u0000\u1314\u1303\u0001\u0000\u0000\u0000\u1314"+
		"\u1315\u0001\u0000\u0000\u0000\u1315\u1316\u0001\u0000\u0000\u0000\u1316"+
		"\u1317\u0005\u01b0\u0000\u0000\u1317\u1318\u0005\u01cd\u0000\u0000\u1318"+
		"\u1319\u0005\u0014\u0000\u0000\u1319\u131a\u0005\u01ad\u0000\u0000\u131a"+
		"\u1328\u0007&\u0000\u0000\u131b\u1329\u0003\u0208\u0104\u0000\u131c\u131e"+
		"\u0005z\u0000\u0000\u131d\u131c\u0001\u0000\u0000\u0000\u131d\u131e\u0001"+
		"\u0000\u0000\u0000\u131e\u1322\u0001\u0000\u0000\u0000\u131f\u1321\u0003"+
		"\u0216\u010b\u0000\u1320\u131f\u0001\u0000\u0000\u0000\u1321\u1324\u0001"+
		"\u0000\u0000\u0000\u1322\u1320\u0001\u0000\u0000\u0000\u1322\u1323\u0001"+
		"\u0000\u0000\u0000\u1323\u1325\u0001\u0000\u0000\u0000\u1324\u1322\u0001"+
		"\u0000\u0000\u0000\u1325\u1326\u0003\u0260\u0130\u0000\u1326\u1327\u0005"+
		"\u0291\u0000\u0000\u1327\u1329\u0001\u0000\u0000\u0000\u1328\u131b\u0001"+
		"\u0000\u0000\u0000\u1328\u131d\u0001\u0000\u0000\u0000\u1329\u01df\u0001"+
		"\u0000\u0000\u0000\u132a\u132c\u0005\u0151\u0000\u0000\u132b\u132a\u0001"+
		"\u0000\u0000\u0000\u132b\u132c\u0001\u0000\u0000\u0000\u132c\u132d\u0001"+
		"\u0000\u0000\u0000\u132d\u132e\u00075\u0000\u0000\u132e\u01e1\u0001\u0000"+
		"\u0000\u0000\u132f\u1330\u0003\u042e\u0217\u0000\u1330\u1332\u0003\u0418"+
		"\u020c\u0000\u1331\u1333\u0003\u01e4\u00f2\u0000\u1332\u1331\u0001\u0000"+
		"\u0000\u0000\u1332\u1333\u0001\u0000\u0000\u0000\u1333\u1336\u0001\u0000"+
		"\u0000\u0000\u1334\u1336\u0003\u01e6\u00f3\u0000\u1335\u132f\u0001\u0000"+
		"\u0000\u0000\u1335\u1334\u0001\u0000\u0000\u0000\u1336\u01e3\u0001\u0000"+
		"\u0000\u0000\u1337\u1338\u0005\u00ae\u0000\u0000\u1338\u1339\u0005\u0131"+
		"\u0000\u0000\u1339\u133a\u0003\u0344\u01a2\u0000\u133a\u01e5\u0001\u0000"+
		"\u0000\u0000\u133b\u133d\u0003\u01e0\u00f0\u0000\u133c\u133b\u0001\u0000"+
		"\u0000\u0000\u133c\u133d\u0001\u0000\u0000\u0000\u133d\u133f\u0001\u0000"+
		"\u0000\u0000\u133e\u1340\u0003\u01e8\u00f4\u0000\u133f\u133e\u0001\u0000"+
		"\u0000\u0000\u1340\u1341\u0001\u0000\u0000\u0000\u1341\u133f\u0001\u0000"+
		"\u0000\u0000\u1341\u1342\u0001\u0000\u0000\u0000\u1342\u1345\u0001\u0000"+
		"\u0000\u0000\u1343\u1344\u0005\u028b\u0000\u0000\u1344\u1346\u0003\u01f4"+
		"\u00fa\u0000\u1345\u1343\u0001\u0000\u0000\u0000\u1345\u1346\u0001\u0000"+
		"\u0000\u0000\u1346\u01e7\u0001\u0000\u0000\u0000\u1347\u134b\u0003\u01ea"+
		"\u00f5\u0000\u1348\u134b\u0003\u01f0\u00f8\u0000\u1349\u134b\u0003\u01f2"+
		"\u00f9\u0000\u134a\u1347\u0001\u0000\u0000\u0000\u134a\u1348\u0001\u0000"+
		"\u0000\u0000\u134a\u1349\u0001\u0000\u0000\u0000\u134b\u01e9\u0001\u0000"+
		"\u0000\u0000\u134c\u134f\u00074\u0000\u0000\u134d\u1350\u0003\u01ec\u00f6"+
		"\u0000\u134e\u1350\u0003\u01ee\u00f7\u0000\u134f\u134d\u0001\u0000\u0000"+
		"\u0000\u134f\u134e\u0001\u0000\u0000\u0000\u1350\u01eb\u0001\u0000\u0000"+
		"\u0000\u1351\u1352\u0005\u0190\u0000\u0000\u1352\u1353\u0003\u03f2\u01f9"+
		"\u0000\u1353\u1354\u0005\u0285\u0000\u0000\u1354\u1359\u0003\u01f8\u00fc"+
		"\u0000\u1355\u1356\u0005\u028b\u0000\u0000\u1356\u1358\u0003\u01f8\u00fc"+
		"\u0000\u1357\u1355\u0001\u0000\u0000\u0000\u1358\u135b\u0001\u0000\u0000"+
		"\u0000\u1359\u1357\u0001\u0000\u0000\u0000\u1359\u135a\u0001\u0000\u0000"+
		"\u0000\u135a\u135c\u0001\u0000\u0000\u0000\u135b\u1359\u0001\u0000\u0000"+
		"\u0000\u135c\u135f\u0005\u0286\u0000\u0000\u135d\u135e\u0007&\u0000\u0000"+
		"\u135e\u1360\u0003\u0208\u0104\u0000\u135f\u135d\u0001\u0000\u0000\u0000"+
		"\u135f\u1360\u0001\u0000\u0000\u0000\u1360\u01ed\u0001\u0000\u0000\u0000"+
		"\u1361\u1362\u0005\u00c6\u0000\u0000\u1362\u136e\u0003\u03f0\u01f8\u0000"+
		"\u1363\u1364\u0005\u0285\u0000\u0000\u1364\u1369\u0003\u01f8\u00fc\u0000"+
		"\u1365\u1366\u0005\u028b\u0000\u0000\u1366\u1368\u0003\u01f8\u00fc\u0000"+
		"\u1367\u1365\u0001\u0000\u0000\u0000\u1368\u136b\u0001\u0000\u0000\u0000"+
		"\u1369\u1367\u0001\u0000\u0000\u0000\u1369\u136a\u0001\u0000\u0000\u0000"+
		"\u136a\u136c\u0001\u0000\u0000\u0000\u136b\u1369\u0001\u0000\u0000\u0000"+
		"\u136c\u136d\u0005\u0286\u0000\u0000\u136d\u136f\u0001\u0000\u0000\u0000"+
		"\u136e\u1363\u0001\u0000\u0000\u0000\u136e\u136f\u0001\u0000\u0000\u0000"+
		"\u136f\u1370\u0001\u0000\u0000\u0000\u1370\u1375\u0005\u01b0\u0000\u0000"+
		"\u1371\u1376\u0003\u0418\u020c\u0000\u1372\u1373\u0005\u01cd\u0000\u0000"+
		"\u1373\u1374\u0005\u0014\u0000\u0000\u1374\u1376\u0005\u01ad\u0000\u0000"+
		"\u1375\u1371\u0001\u0000\u0000\u0000\u1375\u1372\u0001\u0000\u0000\u0000"+
		"\u1376\u137f\u0001\u0000\u0000\u0000\u1377\u1378\u0007&\u0000\u0000\u1378"+
		"\u1380\u0003\u0208\u0104\u0000\u1379\u137b\u0005\u00ae\u0000\u0000\u137a"+
		"\u137c\u0005\u0230\u0000\u0000\u137b\u137a\u0001\u0000\u0000\u0000\u137b"+
		"\u137c\u0001\u0000\u0000\u0000\u137c\u137d\u0001\u0000\u0000\u0000\u137d"+
		"\u137e\u0005\u0131\u0000\u0000\u137e\u1380\u0003\u0344\u01a2\u0000\u137f"+
		"\u1377\u0001\u0000\u0000\u0000\u137f\u1379\u0001\u0000\u0000\u0000\u137f"+
		"\u1380\u0001\u0000\u0000\u0000\u1380\u01ef\u0001\u0000\u0000\u0000\u1381"+
		"\u1383\u0005\u00b5\u0000\u0000\u1382\u1381\u0001\u0000\u0000\u0000\u1382"+
		"\u1383\u0001\u0000\u0000\u0000\u1383\u1385\u0001\u0000\u0000\u0000\u1384"+
		"\u1386\u0005\u00ec\u0000\u0000\u1385\u1384\u0001\u0000\u0000\u0000\u1385"+
		"\u1386\u0001\u0000\u0000\u0000\u1386\u1387\u0001\u0000\u0000\u0000\u1387"+
		"\u1388\u0005Z\u0000\u0000\u1388\u1389\u0005\u00c6\u0000\u0000\u1389\u139b"+
		"\u0003\u0418\u020c\u0000\u138a\u138b\u0005\u0285\u0000\u0000\u138b\u138c"+
		"\u0005\u01cd\u0000\u0000\u138c\u138d\u0005\u00d9\u0000\u0000\u138d\u138e"+
		"\u0005\u016c\u0000\u0000\u138e\u138f\u0003\u0418\u020c\u0000\u138f\u1390"+
		"\u0005\u028b\u0000\u0000\u1390\u1391\u0001\u0000\u0000\u0000\u1391\u1396"+
		"\u0003\u01f8\u00fc\u0000\u1392\u1393\u0005\u028b\u0000\u0000\u1393\u1395"+
		"\u0003\u01f8\u00fc\u0000\u1394\u1392\u0001\u0000\u0000\u0000\u1395\u1398"+
		"\u0001\u0000\u0000\u0000\u1396\u1394\u0001\u0000\u0000\u0000\u1396\u1397"+
		"\u0001\u0000\u0000\u0000\u1397\u1399\u0001\u0000\u0000\u0000\u1398\u1396"+
		"\u0001\u0000\u0000\u0000\u1399\u139a\u0005\u0286\u0000\u0000\u139a\u139c"+
		"\u0001\u0000\u0000\u0000\u139b\u138a\u0001\u0000\u0000\u0000\u139b\u139c"+
		"\u0001\u0000\u0000\u0000\u139c\u139d\u0001\u0000\u0000\u0000\u139d\u139e"+
		"\u0005\u01b0\u0000\u0000\u139e\u139f\u0005\u01cd\u0000\u0000\u139f\u13a0"+
		"\u0005\u0014\u0000\u0000\u13a0\u13a3\u0005\u01ad\u0000\u0000\u13a1\u13a2"+
		"\u0007&\u0000\u0000\u13a2\u13a4\u0003\u0208\u0104\u0000\u13a3\u13a1\u0001"+
		"\u0000\u0000\u0000\u13a3\u13a4\u0001\u0000\u0000\u0000\u13a4\u01f1\u0001"+
		"\u0000\u0000\u0000\u13a5\u13a6\u00073\u0000\u0000\u13a6\u13a7\u0005\u0123"+
		"\u0000\u0000\u13a7\u13a8\u0003\u01ee\u00f7\u0000\u13a8\u01f3\u0001\u0000"+
		"\u0000\u0000\u13a9\u13aa\u0005\u0188\u0000\u0000\u13aa\u13ab\u0005\u01ac"+
		"\u0000\u0000\u13ab\u13ac\u0005\u0285\u0000\u0000\u13ac\u13b1\u0003\u01f6"+
		"\u00fb\u0000\u13ad\u13ae\u0005\u028b\u0000\u0000\u13ae\u13b0\u0003\u01f6"+
		"\u00fb\u0000\u13af\u13ad\u0001\u0000\u0000\u0000\u13b0\u13b3\u0001\u0000"+
		"\u0000\u0000\u13b1\u13af\u0001\u0000\u0000\u0000\u13b1\u13b2\u0001\u0000"+
		"\u0000\u0000\u13b2\u13b4\u0001\u0000\u0000\u0000\u13b3\u13b1\u0001\u0000"+
		"\u0000\u0000\u13b4\u13b5\u0005\u0286\u0000\u0000\u13b5\u01f5\u0001\u0000"+
		"\u0000\u0000\u13b6\u13b9\u0003\u042e\u0217\u0000\u13b7\u13b9\u0005\u0080"+
		"\u0000\u0000\u13b8\u13b6\u0001\u0000\u0000\u0000\u13b8\u13b7\u0001\u0000"+
		"\u0000\u0000\u13b9\u01f7\u0001\u0000\u0000\u0000\u13ba\u13bb\u0003\u03dc"+
		"\u01ee\u0000\u13bb\u13bc\u0003\u0418\u020c\u0000\u13bc\u01f9\u0001\u0000"+
		"\u0000\u0000\u13bd\u13be\u0005\u0091\u0000\u0000\u13be\u13bf\u0005\u01ce"+
		"\u0000\u0000\u13bf\u13c0\u0003\u03ec\u01f6\u0000\u13c0\u01fb\u0001\u0000"+
		"\u0000\u0000\u13c1\u13c2\u0005\f\u0000\u0000\u13c2\u13c3\u0005\u01ce\u0000"+
		"\u0000\u13c3\u13c5\u0003\u03ec\u01f6\u0000\u13c4\u13c6\u0003\u0200\u0100"+
		"\u0000\u13c5\u13c4\u0001\u0000\u0000\u0000\u13c6\u13c7\u0001\u0000\u0000"+
		"\u0000\u13c7\u13c5\u0001\u0000\u0000\u0000\u13c7\u13c8\u0001\u0000\u0000"+
		"\u0000\u13c8\u01fd\u0001\u0000\u0000\u0000\u13c9\u13ca\u0005c\u0000\u0000"+
		"\u13ca\u13cb\u0005\u01ce\u0000\u0000\u13cb\u13d0\u0003\u03ec\u01f6\u0000"+
		"\u13cc\u13cf\u0003\u0202\u0101\u0000\u13cd\u13cf\u0003\u0200\u0100\u0000"+
		"\u13ce\u13cc\u0001\u0000\u0000\u0000\u13ce\u13cd\u0001\u0000\u0000\u0000"+
		"\u13cf\u13d2\u0001\u0000\u0000\u0000\u13d0\u13ce\u0001\u0000\u0000\u0000"+
		"\u13d0\u13d1\u0001\u0000\u0000\u0000\u13d1\u01ff\u0001\u0000\u0000\u0000"+
		"\u13d2\u13d0\u0001\u0000\u0000\u0000\u13d3\u13d4\u0005\u00dc\u0000\u0000"+
		"\u13d4\u13d5\u00053\u0000\u0000\u13d5\u13e4\u0005\u027f\u0000\u0000\u13d6"+
		"\u13d7\u0005\u0120\u0000\u0000\u13d7\u13e4\u0005\u027f\u0000\u0000\u13d8"+
		"\u13e4\u0005\u0146\u0000\u0000\u13d9\u13da\u0005\u0129\u0000\u0000\u13da"+
		"\u13e4\u0005\u027f\u0000\u0000\u13db\u13e4\u0005\u0148\u0000\u0000\u13dc"+
		"\u13e4\u0005m\u0000\u0000\u13dd\u13e4\u0005\u0142\u0000\u0000\u13de\u13df"+
		"\u00056\u0000\u0000\u13df\u13e4\u0005\u027f\u0000\u0000\u13e0\u13e4\u0005"+
		"\u013f\u0000\u0000\u13e1\u13e4\u0005\u0169\u0000\u0000\u13e2\u13e4\u0005"+
		"\u014b\u0000\u0000\u13e3\u13d3\u0001\u0000\u0000\u0000\u13e3\u13d6\u0001"+
		"\u0000\u0000\u0000\u13e3\u13d8\u0001\u0000\u0000\u0000\u13e3\u13d9\u0001"+
		"\u0000\u0000\u0000\u13e3\u13db\u0001\u0000\u0000\u0000\u13e3\u13dc\u0001"+
		"\u0000\u0000\u0000\u13e3\u13dd\u0001\u0000\u0000\u0000\u13e3\u13de\u0001"+
		"\u0000\u0000\u0000\u13e3\u13e0\u0001\u0000\u0000\u0000\u13e3\u13e1\u0001"+
		"\u0000\u0000\u0000\u13e3\u13e2\u0001\u0000\u0000\u0000\u13e4\u0201\u0001"+
		"\u0000\u0000\u0000\u13e5\u13e6\u0005\u01ea\u0000\u0000\u13e6\u13e7\u0005"+
		"\u0241\u0000\u0000\u13e7\u13e8\u0005\u027f\u0000\u0000\u13e8\u0203\u0001"+
		"\u0000\u0000\u0000\u13e9\u13ea\u0005\u001a\u0000\u0000\u13ea\u13eb\u0007"+
		"6\u0000\u0000\u13eb\u0205\u0001\u0000\u0000\u0000\u13ec\u13ed\u0003\u042e"+
		"\u0217\u0000\u13ed\u13ee\u0005\u029c\u0000\u0000\u13ee\u13ef\u0003\u0344"+
		"\u01a2\u0000\u13ef\u0207\u0001\u0000\u0000\u0000\u13f0\u13f3\u0005\u00fd"+
		"\u0000\u0000\u13f1\u13f4\u0003\u020a\u0105\u0000\u13f2\u13f4\u0003\u020c"+
		"\u0106\u0000\u13f3\u13f1\u0001\u0000\u0000\u0000\u13f3\u13f2\u0001\u0000"+
		"\u0000\u0000\u13f4\u0209\u0001\u0000\u0000\u0000\u13f5\u13f6\u0005\u00f8"+
		"\u0000\u0000\u13f6\u13f7\u0005\u0131\u0000\u0000\u13f7\u13f8\u0005\u0281"+
		"\u0000\u0000\u13f8\u020b\u0001\u0000\u0000\u0000\u13f9\u13fc\u00055\u0000"+
		"\u0000\u13fa\u13fb\u0005\u0131\u0000\u0000\u13fb\u13fd\u0005\u0281\u0000"+
		"\u0000\u13fc\u13fa\u0001\u0000\u0000\u0000\u13fc\u13fd\u0001\u0000\u0000"+
		"\u0000\u13fd\u13fe\u0001\u0000\u0000\u0000\u13fe\u13ff\u0005\u0105\u0000"+
		"\u0000\u13ff\u1401\u0003\u042e\u0217\u0000\u1400\u1402\u0003\u020e\u0107"+
		"\u0000\u1401\u1400\u0001\u0000\u0000\u0000\u1401\u1402\u0001\u0000\u0000"+
		"\u0000\u1402\u1405\u0001\u0000\u0000\u0000\u1403\u1404\u0005\u0241\u0000"+
		"\u0000\u1404\u1406\u0005\\\u0000\u0000\u1405\u1403\u0001\u0000\u0000\u0000"+
		"\u1405\u1406\u0001\u0000\u0000\u0000\u1406\u1408\u0001\u0000\u0000\u0000"+
		"\u1407\u1409\u0003\u0210\u0108\u0000\u1408\u1407\u0001\u0000\u0000\u0000"+
		"\u1408\u1409\u0001\u0000\u0000\u0000\u1409\u020d\u0001\u0000\u0000\u0000"+
		"\u140a\u140b\u0005\u0007\u0000\u0000\u140b\u140c\u0005\u00d9\u0000\u0000"+
		"\u140c\u140d\u0005\u0285\u0000\u0000\u140d\u1412\u0003\u0344\u01a2\u0000"+
		"\u140e\u140f\u0005\u028b\u0000\u0000\u140f\u1411\u0003\u0344\u01a2\u0000"+
		"\u1410\u140e\u0001\u0000\u0000\u0000\u1411\u1414\u0001\u0000\u0000\u0000"+
		"\u1412\u1410\u0001\u0000\u0000\u0000\u1412\u1413\u0001\u0000\u0000\u0000"+
		"\u1413\u1415\u0001\u0000\u0000\u0000\u1414\u1412\u0001\u0000\u0000\u0000"+
		"\u1415\u1416\u0005\u0286\u0000\u0000\u1416\u020f\u0001\u0000\u0000\u0000"+
		"\u1417\u1418\u0005\u0174\u0000\u0000\u1418\u1424\u0005\u0285\u0000\u0000"+
		"\u1419\u141e\u0003\u0344\u01a2\u0000\u141a\u141b\u0005\u028b\u0000\u0000"+
		"\u141b\u141d\u0003\u0344\u01a2\u0000\u141c\u141a\u0001\u0000\u0000\u0000"+
		"\u141d\u1420\u0001\u0000\u0000\u0000\u141e\u141c\u0001\u0000\u0000\u0000"+
		"\u141e\u141f\u0001\u0000\u0000\u0000\u141f\u1425\u0001\u0000\u0000\u0000"+
		"\u1420\u141e\u0001\u0000\u0000\u0000\u1421\u1422\u0005\u027e\u0000\u0000"+
		"\u1422\u1423\u0005\u027e\u0000\u0000\u1423\u1425\u0005\u027e\u0000\u0000"+
		"\u1424\u1419\u0001\u0000\u0000\u0000\u1424\u1421\u0001\u0000\u0000\u0000"+
		"\u1425\u1426\u0001\u0000\u0000\u0000\u1426\u1427\u0005\u0286\u0000\u0000"+
		"\u1427\u0211\u0001\u0000\u0000\u0000\u1428\u142c\u0003\u03dc\u01ee\u0000"+
		"\u1429\u142b\u00077\u0000\u0000\u142a\u1429\u0001\u0000\u0000\u0000\u142b"+
		"\u142e\u0001\u0000\u0000\u0000\u142c\u142a\u0001\u0000\u0000\u0000\u142c"+
		"\u142d\u0001\u0000\u0000\u0000\u142d\u1430\u0001\u0000\u0000\u0000\u142e"+
		"\u142c\u0001\u0000\u0000\u0000\u142f\u1431\u0003\u0418\u020c\u0000\u1430"+
		"\u142f\u0001\u0000\u0000\u0000\u1430\u1431\u0001\u0000\u0000\u0000\u1431"+
		"\u1433\u0001\u0000\u0000\u0000\u1432\u1434\u0003\u0214\u010a\u0000\u1433"+
		"\u1432\u0001\u0000\u0000\u0000\u1433\u1434\u0001\u0000\u0000\u0000\u1434"+
		"\u0213\u0001\u0000\u0000\u0000\u1435\u1436\u00078\u0000\u0000\u1436\u1437"+
		"\u0003\u0344\u01a2\u0000\u1437\u0215\u0001\u0000\u0000\u0000\u1438\u1442"+
		"\u0003\u0218\u010c\u0000\u1439\u1442\u0003\u021a\u010d\u0000\u143a\u1442"+
		"\u0003\u021c\u010e\u0000\u143b\u1442\u0003\u0220\u0110\u0000\u143c\u1442"+
		"\u0003\u0222\u0111\u0000\u143d\u1442\u0003\u0224\u0112\u0000\u143e\u1442"+
		"\u0003\u022c\u0116\u0000\u143f\u1442\u0003\u0186\u00c3\u0000\u1440\u1442"+
		"\u0003\u0164\u00b2\u0000\u1441\u1438\u0001\u0000\u0000\u0000\u1441\u1439"+
		"\u0001\u0000\u0000\u0000\u1441\u143a\u0001\u0000\u0000\u0000\u1441\u143b"+
		"\u0001\u0000\u0000\u0000\u1441\u143c\u0001\u0000\u0000\u0000\u1441\u143d"+
		"\u0001\u0000\u0000\u0000\u1441\u143e\u0001\u0000\u0000\u0000\u1441\u143f"+
		"\u0001\u0000\u0000\u0000\u1441\u1440\u0001\u0000\u0000\u0000\u1442\u0217"+
		"\u0001\u0000\u0000\u0000\u1443\u1445\u0003\u03f6\u01fb\u0000\u1444\u1446"+
		"\u0005W\u0000\u0000\u1445\u1444\u0001\u0000\u0000\u0000\u1445\u1446\u0001"+
		"\u0000\u0000\u0000\u1446\u1447\u0001\u0000\u0000\u0000\u1447\u144a\u0003"+
		"\u0418\u020c\u0000\u1448\u1449\u0005\u0151\u0000\u0000\u1449\u144b\u0005"+
		"\u0155\u0000\u0000\u144a\u1448\u0001\u0000\u0000\u0000\u144a\u144b\u0001"+
		"\u0000\u0000\u0000\u144b\u144d\u0001\u0000\u0000\u0000\u144c\u144e\u0003"+
		"\u0214\u010a\u0000\u144d\u144c\u0001\u0000\u0000\u0000\u144d\u144e\u0001"+
		"\u0000\u0000\u0000\u144e\u144f\u0001\u0000\u0000\u0000\u144f\u1450\u0005"+
		"\u0291\u0000\u0000\u1450\u0219\u0001\u0000\u0000\u0000\u1451\u1452\u0005"+
		"\u01f8\u0000\u0000\u1452\u1453\u0003\u03ea\u01f5\u0000\u1453\u1454\u0005"+
		"\u00f5\u0000\u0000\u1454\u145a\u0003\u0418\u020c\u0000\u1455\u1456\u0005"+
		"\u0195\u0000\u0000\u1456\u1457\u0003\u0344\u01a2\u0000\u1457\u1458\u0005"+
		"\u0001\u0000\u0000\u1458\u1459\u0003\u0344\u01a2\u0000\u1459\u145b\u0001"+
		"\u0000\u0000\u0000\u145a\u1455\u0001\u0000\u0000\u0000\u145a\u145b\u0001"+
		"\u0000\u0000\u0000\u145b\u145e\u0001\u0000\u0000\u0000\u145c\u145d\u0005"+
		"\u0151\u0000\u0000\u145d\u145f\u0005\u0155\u0000\u0000\u145e\u145c\u0001"+
		"\u0000\u0000\u0000\u145e\u145f\u0001\u0000\u0000\u0000\u145f\u1460\u0001"+
		"\u0000\u0000\u0000\u1460\u1461\u0005\u0291\u0000\u0000\u1461\u021b\u0001"+
		"\u0000\u0000\u0000\u1462\u1463\u0005k\u0000\u0000\u1463\u146f\u0003\u03fa"+
		"\u01fd\u0000\u1464\u1465\u0005\u0285\u0000\u0000\u1465\u146a\u0003\u021e"+
		"\u010f\u0000\u1466\u1467\u0005\u028b\u0000\u0000\u1467\u1469\u0003\u021e"+
		"\u010f\u0000\u1468\u1466\u0001\u0000\u0000\u0000\u1469\u146c\u0001\u0000"+
		"\u0000\u0000\u146a\u1468\u0001\u0000\u0000\u0000\u146a\u146b\u0001\u0000"+
		"\u0000\u0000\u146b\u146d\u0001\u0000\u0000\u0000\u146c\u146a\u0001\u0000"+
		"\u0000\u0000\u146d\u146e\u0005\u0286\u0000\u0000\u146e\u1470\u0001\u0000"+
		"\u0000\u0000\u146f\u1464\u0001\u0000\u0000\u0000\u146f\u1470\u0001\u0000"+
		"\u0000\u0000\u1470\u1473\u0001\u0000\u0000\u0000\u1471\u1472\u0005\u01b0"+
		"\u0000\u0000\u1472\u1474\u0003\u0418\u020c\u0000\u1473\u1471\u0001\u0000"+
		"\u0000\u0000\u1473\u1474\u0001\u0000\u0000\u0000\u1474\u1477\u0001\u0000"+
		"\u0000\u0000\u1475\u1476\u0005\u00f5\u0000\u0000\u1476\u1478\u0003\u028a"+
		"\u0145\u0000\u1477\u1475\u0001\u0000\u0000\u0000\u1477\u1478\u0001\u0000"+
		"\u0000\u0000\u1478\u1479\u0001\u0000\u0000\u0000\u1479\u147a\u0005\u0291"+
		"\u0000\u0000\u147a\u021d\u0001\u0000\u0000\u0000\u147b\u1480\u0003\u03dc"+
		"\u01ee\u0000\u147c\u147e\u0005\u00d9\u0000\u0000\u147d\u147c\u0001\u0000"+
		"\u0000\u0000\u147d\u147e\u0001\u0000\u0000\u0000\u147e\u147f\u0001\u0000"+
		"\u0000\u0000\u147f\u1481\u0003\u0418\u020c\u0000\u1480\u147d\u0001\u0000"+
		"\u0000\u0000\u1480\u1481\u0001\u0000\u0000\u0000\u1481\u1483\u0001\u0000"+
		"\u0000\u0000\u1482\u1484\u0003\u0214\u010a\u0000\u1483\u1482\u0001\u0000"+
		"\u0000\u0000\u1483\u1484\u0001\u0000\u0000\u0000\u1484\u021f\u0001\u0000"+
		"\u0000\u0000\u1485\u1486\u0003\u03ee\u01f7\u0000\u1486\u1487\u0005\u00a4"+
		"\u0000\u0000\u1487\u1488\u0005\u0291\u0000\u0000\u1488\u0221\u0001\u0000"+
		"\u0000\u0000\u1489\u14a8\u0005\u0188\u0000\u0000\u148a\u14a9\u0005\u01d1"+
		"\u0000\u0000\u148b\u14a9\u0005\u001d\u0000\u0000\u148c\u148d\u0005\u00a5"+
		"\u0000\u0000\u148d\u148e\u0005\u0285\u0000\u0000\u148e\u148f\u0003\u03ee"+
		"\u01f7\u0000\u148f\u1490\u0005\u028b\u0000\u0000\u1490\u1491\u0003\u042a"+
		"\u0215\u0000\u1491\u1492\u0005\u0286\u0000\u0000\u1492\u14a9\u0001\u0000"+
		"\u0000\u0000\u1493\u1494\u0005\u00e7\u0000\u0000\u1494\u1495\u0005\u0285"+
		"\u0000\u0000\u1495\u1496\u0003\u042e\u0217\u0000\u1496\u1497\u0005\u028b"+
		"\u0000\u0000\u1497\u1498\u0003\u0344\u01a2\u0000\u1498\u1499\u0005\u0286"+
		"\u0000\u0000\u1499\u14a9\u0001\u0000\u0000\u0000\u149a\u149b\u0005\u01ac"+
		"\u0000\u0000\u149b\u149e\u0005\u0285\u0000\u0000\u149c\u149f\u0003\u042e"+
		"\u0217\u0000\u149d\u149f\u0005\u0080\u0000\u0000\u149e\u149c\u0001\u0000"+
		"\u0000\u0000\u149e\u149d\u0001\u0000\u0000\u0000\u149f\u14a2\u0001\u0000"+
		"\u0000\u0000\u14a0\u14a1\u0005\u028b\u0000\u0000\u14a1\u14a3\u0003\u042e"+
		"\u0217\u0000\u14a2\u14a0\u0001\u0000\u0000\u0000\u14a3\u14a4\u0001\u0000"+
		"\u0000\u0000\u14a4\u14a2\u0001\u0000\u0000\u0000\u14a4\u14a5\u0001\u0000"+
		"\u0000\u0000\u14a5\u14a6\u0001\u0000\u0000\u0000\u14a6\u14a7\u0005\u0286"+
		"\u0000\u0000\u14a7\u14a9\u0001\u0000\u0000\u0000\u14a8\u148a\u0001\u0000"+
		"\u0000\u0000\u14a8\u148b\u0001\u0000\u0000\u0000\u14a8\u148c\u0001\u0000"+
		"\u0000\u0000\u14a8\u1493\u0001\u0000\u0000\u0000\u14a8\u149a\u0001\u0000"+
		"\u0000\u0000\u14a9\u14aa\u0001\u0000\u0000\u0000\u14aa\u14ab\u0005\u0291"+
		"\u0000\u0000\u14ab\u0223\u0001\u0000\u0000\u0000\u14ac\u14af\u0003\u0226"+
		"\u0113\u0000\u14ad\u14af\u0003\u022a\u0115\u0000\u14ae\u14ac\u0001\u0000"+
		"\u0000\u0000\u14ae\u14ad\u0001\u0000\u0000\u0000\u14af\u0225\u0001\u0000"+
		"\u0000\u0000\u14b0\u14b1\u0005\u021a\u0000\u0000\u14b1\u14b2\u0003\u03ea"+
		"\u01f5\u0000\u14b2\u14c5\u0005\u00f5\u0000\u0000\u14b3\u14b4\u0005\u019b"+
		"\u0000\u0000\u14b4\u14b5\u0005\u0285\u0000\u0000\u14b5\u14ba\u0003\u0228"+
		"\u0114\u0000\u14b6\u14b7\u0005\u028b\u0000\u0000\u14b7\u14b9\u0003\u0228"+
		"\u0114\u0000\u14b8\u14b6\u0001\u0000\u0000\u0000\u14b9\u14bc\u0001\u0000"+
		"\u0000\u0000\u14ba\u14b8\u0001\u0000\u0000\u0000\u14ba\u14bb\u0001\u0000"+
		"\u0000\u0000\u14bb\u14bd\u0001\u0000\u0000\u0000\u14bc\u14ba\u0001\u0000"+
		"\u0000\u0000\u14bd\u14be\u0005\u0286\u0000\u0000\u14be\u14c6\u0001\u0000"+
		"\u0000\u0000\u14bf\u14c0\u0005\u019f\u0000\u0000\u14c0\u14c3\u0005k\u0000"+
		"\u0000\u14c1\u14c2\u0005\u01b0\u0000\u0000\u14c2\u14c4\u0003\u0418\u020c"+
		"\u0000\u14c3\u14c1\u0001\u0000\u0000\u0000\u14c3\u14c4\u0001\u0000\u0000"+
		"\u0000\u14c4\u14c6\u0001\u0000\u0000\u0000\u14c5\u14b3\u0001\u0000\u0000"+
		"\u0000\u14c5\u14bf\u0001\u0000\u0000\u0000\u14c6\u14c7\u0001\u0000\u0000"+
		"\u0000\u14c7\u14c8\u0005\u0291\u0000\u0000\u14c8\u0227\u0001\u0000\u0000"+
		"\u0000\u14c9\u14cb\u0003\u0402\u0201\u0000\u14ca\u14cc\u0003\u0418\u020c"+
		"\u0000\u14cb\u14ca\u0001\u0000\u0000\u0000\u14cb\u14cc\u0001\u0000\u0000"+
		"\u0000\u14cc\u14cf\u0001\u0000\u0000\u0000\u14cd\u14ce\u0005\u0151\u0000"+
		"\u0000\u14ce\u14d0\u0005\u0155\u0000\u0000\u14cf\u14cd\u0001\u0000\u0000"+
		"\u0000\u14cf\u14d0\u0001\u0000\u0000\u0000\u14d0\u14d2\u0001\u0000\u0000"+
		"\u0000\u14d1\u14d3\u0003\u0214\u010a\u0000\u14d2\u14d1\u0001\u0000\u0000"+
		"\u0000\u14d2\u14d3\u0001\u0000\u0000\u0000\u14d3\u0229\u0001\u0000\u0000"+
		"\u0000\u14d4\u14d5\u0003\u03fc\u01fe\u0000\u14d5\u14d6\u0003\u03ea\u01f5"+
		"\u0000\u14d6\u14d7\u00079\u0000\u0000\u14d7\u14d8\u0005\u0291\u0000\u0000"+
		"\u14d8\u022b\u0001\u0000\u0000\u0000\u14d9\u14dc\u0003\u022e\u0117\u0000"+
		"\u14da\u14dc\u0003\u0234\u011a\u0000\u14db\u14d9\u0001\u0000\u0000\u0000"+
		"\u14db\u14da\u0001\u0000\u0000\u0000\u14dc\u14dd\u0001\u0000\u0000\u0000"+
		"\u14dd\u14de\u0005\u0291\u0000\u0000\u14de\u022d\u0001\u0000\u0000\u0000"+
		"\u14df\u14e0\u0005\u021a\u0000\u0000\u14e0\u14e1\u0003\u03ea\u01f5\u0000"+
		"\u14e1\u14ed\u0005\u00f5\u0000\u0000\u14e2\u14e3\u0005\u01fd\u0000\u0000"+
		"\u14e3\u14e4\u0005\u015c\u0000\u0000\u14e4\u14e6\u0003\u0418\u020c\u0000"+
		"\u14e5\u14e7\u0003\u0230\u0118\u0000\u14e6\u14e5\u0001\u0000\u0000\u0000"+
		"\u14e6\u14e7\u0001\u0000\u0000\u0000\u14e7\u14ea\u0001\u0000\u0000\u0000"+
		"\u14e8\u14e9\u0005\u0151\u0000\u0000\u14e9\u14eb\u0005\u0155\u0000\u0000"+
		"\u14ea\u14e8\u0001\u0000\u0000\u0000\u14ea\u14eb\u0001\u0000\u0000\u0000"+
		"\u14eb\u14ee\u0001\u0000\u0000\u0000\u14ec\u14ee\u0003\u0232\u0119\u0000"+
		"\u14ed\u14e2\u0001\u0000\u0000\u0000\u14ed\u14ec\u0001\u0000\u0000\u0000"+
		"\u14ee\u022f\u0001\u0000\u0000\u0000\u14ef\u14f2\u0005\u00df\u0000\u0000"+
		"\u14f0\u14f2\u0005\u00de\u0000\u0000\u14f1\u14ef\u0001\u0000\u0000\u0000"+
		"\u14f1\u14f0\u0001\u0000\u0000\u0000\u14f2\u14f3\u0001\u0000\u0000\u0000"+
		"\u14f3\u14f4\u00053\u0000\u0000\u14f4\u14f5\u0003\u0418\u020c\u0000\u14f5"+
		"\u0231\u0001\u0000\u0000\u0000\u14f6\u14fa\u0005\u0231\u0000\u0000\u14f7"+
		"\u14f8\u0005\u0233\u0000\u0000\u14f8\u14fa\u0005\u0013\u0000\u0000\u14f9"+
		"\u14f6\u0001\u0000\u0000\u0000\u14f9\u14f7\u0001\u0000\u0000\u0000\u14fa"+
		"\u14fb\u0001\u0000\u0000\u0000\u14fb\u14fc\u0005\u0285\u0000\u0000\u14fc"+
		"\u14fd\u0003\u0344\u01a2\u0000\u14fd\u14fe\u0005\u0286\u0000\u0000\u14fe"+
		"\u14ff\u0005\u015c\u0000\u0000\u14ff\u1502\u0003\u0418\u020c\u0000\u1500"+
		"\u1501\u0005\u0151\u0000\u0000\u1501\u1503\u0005\u0155\u0000\u0000\u1502"+
		"\u1500\u0001\u0000\u0000\u0000\u1502\u1503\u0001\u0000\u0000\u0000\u1503"+
		"\u0233\u0001\u0000\u0000\u0000\u1504\u1505\u0003\u03d2\u01e9\u0000\u1505"+
		"\u1506\u0003\u0418\u020c\u0000\u1506\u0235\u0001\u0000\u0000\u0000\u1507"+
		"\u1508\u0003\u023a\u011d\u0000\u1508\u1509\u0007:\u0000\u0000\u1509\u150c"+
		"\u0001\u0000\u0000\u0000\u150a\u150c\u0003\u0238\u011c\u0000\u150b\u1507"+
		"\u0001\u0000\u0000\u0000\u150b\u150a\u0001\u0000\u0000\u0000\u150c\u150d"+
		"\u0001\u0000\u0000\u0000\u150d\u150b\u0001\u0000\u0000\u0000\u150d\u150e"+
		"\u0001\u0000\u0000\u0000\u150e\u0237\u0001\u0000\u0000\u0000\u150f\u1510"+
		"\u0005\u0293\u0000\u0000\u1510\u1511\u0005\u0293\u0000\u0000\u1511\u1512"+
		"\u0003\u03e8\u01f4\u0000\u1512\u1513\u0005\u0299\u0000\u0000\u1513\u1514"+
		"\u0005\u0299\u0000\u0000\u1514\u0239\u0001\u0000\u0000\u0000\u1515\u1516"+
		"\u0005c\u0000\u0000\u1516\u1530\u0003\u0000\u0000\u0000\u1517\u1518\u0005"+
		"\f\u0000\u0000\u1518\u1530\u0003\u0000\u0000\u0000\u1519\u151b\u0005\u00ca"+
		"\u0000\u0000\u151a\u151c\u0005\t\u0000\u0000\u151b\u151a\u0001\u0000\u0000"+
		"\u0000\u151b\u151c\u0001\u0000\u0000\u0000\u151c\u151d\u0001\u0000\u0000"+
		"\u0000\u151d\u1530\u0003\u0000\u0000\u0000\u151e\u151f\u0005\u0218\u0000"+
		"\u0000\u151f\u1530\u0003\u0000\u0000\u0000\u1520\u1530\u0003\u0260\u0130"+
		"\u0000\u1521\u1530\u0003\u0266\u0133\u0000\u1522\u1530\u0003\u023c\u011e"+
		"\u0000\u1523\u1530\u0003\u023e\u011f\u0000\u1524\u1530\u0003\u0240\u0120"+
		"\u0000\u1525\u1530\u0003\u0242\u0121\u0000\u1526\u1530\u0003\u0244\u0122"+
		"\u0000\u1527\u1530\u0003\u024a\u0125\u0000\u1528\u1530\u0003\u024e\u0127"+
		"\u0000\u1529\u1530\u0003\u0258\u012c\u0000\u152a\u1530\u0003\u025a\u012d"+
		"\u0000\u152b\u1530\u0003\u025c\u012e\u0000\u152c\u1530\u0003\u0368\u01b4"+
		"\u0000\u152d\u1530\u0003\u0268\u0134\u0000\u152e\u1530\u0003\u025e\u012f"+
		"\u0000\u152f\u1515\u0001\u0000\u0000\u0000\u152f\u1517\u0001\u0000\u0000"+
		"\u0000\u152f\u1519\u0001\u0000\u0000\u0000\u152f\u151e\u0001\u0000\u0000"+
		"\u0000\u152f\u1520\u0001\u0000\u0000\u0000\u152f\u1521\u0001\u0000\u0000"+
		"\u0000\u152f\u1522\u0001\u0000\u0000\u0000\u152f\u1523\u0001\u0000\u0000"+
		"\u0000\u152f\u1524\u0001\u0000\u0000\u0000\u152f\u1525\u0001\u0000\u0000"+
		"\u0000\u152f\u1526\u0001\u0000\u0000\u0000\u152f\u1527\u0001\u0000\u0000"+
		"\u0000\u152f\u1528\u0001\u0000\u0000\u0000\u152f\u1529\u0001\u0000\u0000"+
		"\u0000\u152f\u152a\u0001\u0000\u0000\u0000\u152f\u152b\u0001\u0000\u0000"+
		"\u0000\u152f\u152c\u0001\u0000\u0000\u0000\u152f\u152d\u0001\u0000\u0000"+
		"\u0000\u152f\u152e\u0001\u0000\u0000\u0000\u1530\u023b\u0001\u0000\u0000"+
		"\u0000\u1531\u1534\u0003\u0422\u0211\u0000\u1532\u1534\u0003\u0420\u0210"+
		"\u0000\u1533\u1531\u0001\u0000\u0000\u0000\u1533\u1532\u0001\u0000\u0000"+
		"\u0000\u1534\u1535\u0001\u0000\u0000\u0000\u1535\u1536\u0005\u028e\u0000"+
		"\u0000\u1536\u1537\u0003\u0344\u01a2\u0000\u1537\u023d\u0001\u0000\u0000"+
		"\u0000\u1538\u153a\u0005]\u0000\u0000\u1539\u153b\u0003\u03e8\u01f4\u0000"+
		"\u153a\u1539\u0001\u0000\u0000\u0000\u153a\u153b\u0001\u0000\u0000\u0000"+
		"\u153b\u153e\u0001\u0000\u0000\u0000\u153c\u153d\u0005\u023d\u0000\u0000"+
		"\u153d\u153f\u0003\u0342\u01a1\u0000\u153e\u153c\u0001\u0000\u0000\u0000"+
		"\u153e\u153f\u0001\u0000\u0000\u0000\u153f\u023f\u0001\u0000\u0000\u0000"+
		"\u1540\u1542\u0005\u00ab\u0000\u0000\u1541\u1543\u0003\u03e8\u01f4\u0000"+
		"\u1542\u1541\u0001\u0000\u0000\u0000\u1542\u1543\u0001\u0000\u0000\u0000"+
		"\u1543\u1546\u0001\u0000\u0000\u0000\u1544\u1545\u0005\u023d\u0000\u0000"+
		"\u1545\u1547\u0003\u0342\u01a1\u0000\u1546\u1544\u0001\u0000\u0000\u0000"+
		"\u1546\u1547\u0001\u0000\u0000\u0000\u1547\u0241\u0001\u0000\u0000\u0000"+
		"\u1548\u1549\u0005\u00c9\u0000\u0000\u1549\u154a\u0003\u03e8\u01f4\u0000"+
		"\u154a\u0243\u0001\u0000\u0000\u0000\u154b\u154c\u0005\u00d5\u0000\u0000"+
		"\u154c\u154d\u0003\u0342\u01a1\u0000\u154d\u154e\u0005\u0204\u0000\u0000"+
		"\u154e\u1552\u0003\u0236\u011b\u0000\u154f\u1551\u0003\u0246\u0123\u0000"+
		"\u1550\u154f\u0001\u0000\u0000\u0000\u1551\u1554\u0001\u0000\u0000\u0000"+
		"\u1552\u1550\u0001\u0000\u0000\u0000\u1552\u1553\u0001\u0000\u0000\u0000"+
		"\u1553\u1556\u0001\u0000\u0000\u0000\u1554\u1552\u0001\u0000\u0000\u0000"+
		"\u1555\u1557\u0003\u0248\u0124\u0000\u1556\u1555\u0001\u0000\u0000\u0000"+
		"\u1556\u1557\u0001\u0000\u0000\u0000\u1557\u1558\u0001\u0000\u0000\u0000"+
		"\u1558\u1559\u0005\u009c\u0000\u0000\u1559\u155a\u0005\u00d5\u0000\u0000"+
		"\u155a\u0245\u0001\u0000\u0000\u0000\u155b\u155c\u0005\u0097\u0000\u0000"+
		"\u155c\u155d\u0003\u0342\u01a1\u0000\u155d\u155e\u0005\u0204\u0000\u0000"+
		"\u155e\u155f\u0003\u0236\u011b\u0000\u155f\u0247\u0001\u0000\u0000\u0000"+
		"\u1560\u1561\u0005\u0096\u0000\u0000\u1561\u1562\u0003\u0236\u011b\u0000"+
		"\u1562\u0249\u0001\u0000\u0000\u0000\u1563\u1565\u0003\u03e8\u01f4\u0000"+
		"\u1564\u1563\u0001\u0000\u0000\u0000\u1564\u1565\u0001\u0000\u0000\u0000"+
		"\u1565\u156a\u0001\u0000\u0000\u0000\u1566\u1567\u0005\u0240\u0000\u0000"+
		"\u1567\u156b\u0003\u0342\u01a1\u0000\u1568\u1569\u0005\u00bd\u0000\u0000"+
		"\u1569\u156b\u0003\u024c\u0126\u0000\u156a\u1566\u0001\u0000\u0000\u0000"+
		"\u156a\u1568\u0001\u0000\u0000\u0000\u156a\u156b\u0001\u0000\u0000\u0000"+
		"\u156b\u156c\u0001\u0000\u0000\u0000\u156c\u156d\u0005\u0118\u0000\u0000"+
		"\u156d\u156e\u0003\u0236\u011b\u0000\u156e\u156f\u0005\u009c\u0000\u0000"+
		"\u156f\u1571\u0005\u0118\u0000\u0000\u1570\u1572\u0003\u03e8\u01f4\u0000"+
		"\u1571\u1570\u0001\u0000\u0000\u0000\u1571\u1572\u0001\u0000\u0000\u0000"+
		"\u1572\u024b\u0001\u0000\u0000\u0000\u1573\u1574\u0003\u03f8\u01fc\u0000"+
		"\u1574\u1576\u0005\u00d9\u0000\u0000\u1575\u1577\u0005\u01b3\u0000\u0000"+
		"\u1576\u1575\u0001\u0000\u0000\u0000\u1576\u1577\u0001\u0000\u0000\u0000"+
		"\u1577\u1578\u0001\u0000\u0000\u0000\u1578\u1579\u0003\u0254\u012a\u0000"+
		"\u1579\u157a\u0005\u0001\u0000\u0000\u157a\u157b\u0003\u0256\u012b\u0000"+
		"\u157b\u1589\u0001\u0000\u0000\u0000\u157c\u157d\u0003\u03fc\u01fe\u0000"+
		"\u157d\u1586\u0005\u00d9\u0000\u0000\u157e\u1580\u0003\u03fa\u01fd\u0000"+
		"\u157f\u1581\u0003\u0340\u01a0\u0000\u1580\u157f\u0001\u0000\u0000\u0000"+
		"\u1580\u1581\u0001\u0000\u0000\u0000\u1581\u1587\u0001\u0000\u0000\u0000"+
		"\u1582\u1583\u0005\u0285\u0000\u0000\u1583\u1584\u0003\u028a\u0145\u0000"+
		"\u1584\u1585\u0005\u0286\u0000\u0000\u1585\u1587\u0001\u0000\u0000\u0000"+
		"\u1586\u157e\u0001\u0000\u0000\u0000\u1586\u1582\u0001\u0000\u0000\u0000"+
		"\u1587\u1589\u0001\u0000\u0000\u0000\u1588\u1573\u0001\u0000\u0000\u0000"+
		"\u1588\u157c\u0001\u0000\u0000\u0000\u1589\u024d\u0001\u0000\u0000\u0000"+
		"\u158a\u158b\u0005\u00be\u0000\u0000\u158b\u158c\u0003\u03f8\u01fc\u0000"+
		"\u158c\u158d\u0005\u00d9\u0000\u0000\u158d\u158e\u0003\u0250\u0128\u0000"+
		"\u158e\u1591\u0003\u0268\u0134\u0000\u158f\u1590\u0005\u01c1\u0000\u0000"+
		"\u1590\u1592\u0005\u00a6\u0000\u0000\u1591\u158f\u0001\u0000\u0000\u0000"+
		"\u1591\u1592\u0001\u0000\u0000\u0000\u1592\u024f\u0001\u0000\u0000\u0000"+
		"\u1593\u1594\u0003\u0254\u012a\u0000\u1594\u1595\u0005\u0001\u0000\u0000"+
		"\u1595\u1596\u0003\u0256\u012b\u0000\u1596\u15a1\u0001\u0000\u0000\u0000"+
		"\u1597\u1598\u0005\u00e2\u0000\u0000\u1598\u1599\u0005\u015c\u0000\u0000"+
		"\u1599\u159b\u0003\u03fe\u01ff\u0000\u159a\u159c\u0003\u0252\u0129\u0000"+
		"\u159b\u159a\u0001\u0000\u0000\u0000\u159b\u159c\u0001\u0000\u0000\u0000"+
		"\u159c\u15a1\u0001\u0000\u0000\u0000\u159d\u159e\u0005\u022d\u0000\u0000"+
		"\u159e\u159f\u0005\u015c\u0000\u0000\u159f\u15a1\u0003\u03f8\u01fc\u0000"+
		"\u15a0\u1593\u0001\u0000\u0000\u0000\u15a0\u1597\u0001\u0000\u0000\u0000"+
		"\u15a0\u159d\u0001\u0000\u0000\u0000\u15a1\u0251\u0001\u0000\u0000\u0000"+
		"\u15a2\u15a3\u0005#\u0000\u0000\u15a3\u15a4\u0003\u0254\u012a\u0000\u15a4"+
		"\u15a5\u0005\u000f\u0000\u0000\u15a5\u15a6\u0003\u0256\u012b\u0000\u15a6"+
		"\u0253\u0001\u0000\u0000\u0000\u15a7\u15a8\u0003\u0354\u01aa\u0000\u15a8"+
		"\u0255\u0001\u0000\u0000\u0000\u15a9\u15aa\u0003\u0354\u01aa\u0000\u15aa"+
		"\u0257\u0001\u0000\u0000\u0000\u15ab\u15ac\u0005\u0155\u0000\u0000\u15ac"+
		"\u0259\u0001\u0000\u0000\u0000\u15ad\u15af\u0005\u0194\u0000\u0000\u15ae"+
		"\u15b0\u0003\u03ee\u01f7\u0000\u15af\u15ae\u0001\u0000\u0000\u0000\u15af"+
		"\u15b0\u0001\u0000\u0000\u0000\u15b0\u025b\u0001\u0000\u0000\u0000\u15b1"+
		"\u15b3\u0005\u01b0\u0000\u0000\u15b2\u15b4\u0003\u0342\u01a1\u0000\u15b3"+
		"\u15b2\u0001\u0000\u0000\u0000\u15b3\u15b4\u0001\u0000\u0000\u0000\u15b4"+
		"\u025d\u0001\u0000\u0000\u0000\u15b5\u15b7\u00057\u0000\u0000\u15b6\u15b5"+
		"\u0001\u0000\u0000\u0000\u15b6\u15b7\u0001\u0000\u0000\u0000\u15b7\u15b8"+
		"\u0001\u0000\u0000\u0000\u15b8\u15ba\u0003\u03d6\u01eb\u0000\u15b9\u15bb"+
		"\u0003\u040e\u0207\u0000\u15ba\u15b9\u0001\u0000\u0000\u0000\u15ba\u15bb"+
		"\u0001\u0000\u0000\u0000\u15bb\u025f\u0001\u0000\u0000\u0000\u15bc\u15bd"+
		"\u0005\"\u0000\u0000\u15bd\u15c4\u0003\u0236\u011b\u0000\u15be\u15c0\u0005"+
		"\u00a4\u0000\u0000\u15bf\u15c1\u0003\u0262\u0131\u0000\u15c0\u15bf\u0001"+
		"\u0000\u0000\u0000\u15c1\u15c2\u0001\u0000\u0000\u0000\u15c2\u15c0\u0001"+
		"\u0000\u0000\u0000\u15c2\u15c3\u0001\u0000\u0000\u0000\u15c3\u15c5\u0001"+
		"\u0000\u0000\u0000\u15c4\u15be\u0001\u0000\u0000\u0000\u15c4\u15c5\u0001"+
		"\u0000\u0000\u0000\u15c5\u15c6\u0001\u0000\u0000\u0000\u15c6\u15c8\u0005"+
		"\u009c\u0000\u0000\u15c7\u15c9\u0003\u03e8\u01f4\u0000\u15c8\u15c7\u0001"+
		"\u0000\u0000\u0000\u15c8\u15c9\u0001\u0000\u0000\u0000\u15c9\u0261\u0001"+
		"\u0000\u0000\u0000\u15ca\u15cb\u0005\u023d\u0000\u0000\u15cb\u15d0\u0003"+
		"\u03ee\u01f7\u0000\u15cc\u15cd\u0005\u0167\u0000\u0000\u15cd\u15cf\u0003"+
		"\u03ee\u01f7\u0000\u15ce\u15cc\u0001\u0000\u0000\u0000\u15cf\u15d2\u0001"+
		"\u0000\u0000\u0000\u15d0\u15ce\u0001\u0000\u0000\u0000\u15d0\u15d1\u0001"+
		"\u0000\u0000\u0000\u15d1\u15d3\u0001\u0000\u0000\u0000\u15d2\u15d0\u0001"+
		"\u0000\u0000\u0000\u15d3\u15d4\u0005\u0204\u0000\u0000\u15d4\u15d5\u0003"+
		"\u0236\u011b\u0000\u15d5\u0263\u0001\u0000\u0000\u0000\u15d6\u15d8\u0005"+
		"z\u0000\u0000\u15d7\u15d6\u0001\u0000\u0000\u0000\u15d7\u15d8\u0001\u0000"+
		"\u0000\u0000\u15d8\u15da\u0001\u0000\u0000\u0000\u15d9\u15db\u0003\u0216"+
		"\u010b\u0000\u15da\u15d9\u0001\u0000\u0000\u0000\u15db\u15dc\u0001\u0000"+
		"\u0000\u0000\u15dc\u15da\u0001\u0000\u0000\u0000\u15dc\u15dd\u0001\u0000"+
		"\u0000\u0000\u15dd\u15df\u0001\u0000\u0000\u0000\u15de\u15d7\u0001\u0000"+
		"\u0000\u0000\u15de\u15df\u0001\u0000\u0000\u0000\u15df\u15e0\u0001\u0000"+
		"\u0000\u0000\u15e0\u15e1\u0003\u0260\u0130\u0000\u15e1\u0265\u0001\u0000"+
		"\u0000\u0000\u15e2\u15e4\u0005z\u0000\u0000\u15e3\u15e2\u0001\u0000\u0000"+
		"\u0000\u15e3\u15e4\u0001\u0000\u0000\u0000\u15e4\u15e6\u0001\u0000\u0000"+
		"\u0000\u15e5\u15e7\u0003\u0216\u010b\u0000\u15e6\u15e5\u0001\u0000\u0000"+
		"\u0000\u15e7\u15e8\u0001\u0000\u0000\u0000\u15e8\u15e6\u0001\u0000\u0000"+
		"\u0000\u15e8\u15e9\u0001\u0000\u0000\u0000\u15e9\u15ea\u0001\u0000\u0000"+
		"\u0000\u15ea\u15eb\u0003\u0260\u0130\u0000\u15eb\u0267\u0001\u0000\u0000"+
		"\u0000\u15ec\u15f1\u0003\u026a\u0135\u0000\u15ed\u15f1\u0003\u026e\u0137"+
		"\u0000\u15ee\u15f1\u0003\u0270\u0138\u0000\u15ef\u15f1\u0003\u027a\u013d"+
		"\u0000\u15f0\u15ec\u0001\u0000\u0000\u0000\u15f0\u15ed\u0001\u0000\u0000"+
		"\u0000\u15f0\u15ee\u0001\u0000\u0000\u0000\u15f0\u15ef\u0001\u0000\u0000"+
		"\u0000\u15f1\u0269\u0001\u0000\u0000\u0000\u15f2\u15f3\u0005\u00a9\u0000"+
		"\u0000\u15f3\u15f4\u0005\u00d8\u0000\u0000\u15f4\u15fe\u0003\u0344\u01a2"+
		"\u0000\u15f5\u15f7\u0003\u03c6\u01e3\u0000\u15f6\u15f8\u0003\u038e\u01c7"+
		"\u0000\u15f7\u15f6\u0001\u0000\u0000\u0000\u15f7\u15f8\u0001\u0000\u0000"+
		"\u0000\u15f8\u15ff\u0001\u0000\u0000\u0000\u15f9\u15fb\u0003\u038e\u01c7"+
		"\u0000\u15fa\u15fc\u0003\u026c\u0136\u0000\u15fb\u15fa\u0001\u0000\u0000"+
		"\u0000\u15fb\u15fc\u0001\u0000\u0000\u0000\u15fc\u15ff\u0001\u0000\u0000"+
		"\u0000\u15fd\u15ff\u0003\u026c\u0136\u0000\u15fe\u15f5\u0001\u0000\u0000"+
		"\u0000\u15fe\u15f9\u0001\u0000\u0000\u0000\u15fe\u15fd\u0001\u0000\u0000"+
		"\u0000\u15fe\u15ff\u0001\u0000\u0000\u0000\u15ff\u026b\u0001\u0000\u0000"+
		"\u0000\u1600\u1601\u0007;\u0000\u0000\u1601\u1602\u0003\u03c6\u01e3\u0000"+
		"\u1602\u026d\u0001\u0000\u0000\u0000\u1603\u160b\u0003\u0316\u018b\u0000"+
		"\u1604\u160b\u0003\u0322\u0191\u0000\u1605\u160b\u0003\u028a\u0145\u0000"+
		"\u1606\u160b\u0003\u02fc\u017e\u0000\u1607\u160b\u0003\u0302\u0181\u0000"+
		"\u1608\u160b\u0003\u0304\u0182\u0000\u1609\u160b\u0003\u0288\u0144\u0000"+
		"\u160a\u1603\u0001\u0000\u0000\u0000\u160a\u1604\u0001\u0000\u0000\u0000"+
		"\u160a\u1605\u0001\u0000\u0000\u0000\u160a\u1606\u0001\u0000\u0000\u0000"+
		"\u160a\u1607\u0001\u0000\u0000\u0000\u160a\u1608\u0001\u0000\u0000\u0000"+
		"\u160a\u1609\u0001\u0000\u0000\u0000\u160b\u026f\u0001\u0000\u0000\u0000"+
		"\u160c\u1611\u0003\u0272\u0139\u0000\u160d\u1611\u0003\u0274\u013a\u0000"+
		"\u160e\u1611\u0003\u0276\u013b\u0000\u160f\u1611\u0003\u0278\u013c\u0000"+
		"\u1610\u160c\u0001\u0000\u0000\u0000\u1610\u160d\u0001\u0000\u0000\u0000"+
		"\u1610\u160e\u0001\u0000\u0000\u0000\u1610\u160f\u0001\u0000\u0000\u0000"+
		"\u1611\u0271\u0001\u0000\u0000\u0000\u1612\u1613\u0005D\u0000\u0000\u1613"+
		"\u1614\u0003\u03fa\u01fd\u0000\u1614\u0273\u0001\u0000\u0000\u0000\u1615"+
		"\u1616\u0005\u0164\u0000\u0000\u1616\u1618\u0003\u03fa\u01fd\u0000\u1617"+
		"\u1619\u0003\u0340\u01a0\u0000\u1618\u1617\u0001\u0000\u0000\u0000\u1618"+
		"\u1619\u0001\u0000\u0000\u0000\u1619\u0275\u0001\u0000\u0000\u0000\u161a"+
		"\u161b\u0005\u00b3\u0000\u0000\u161b\u1630\u0003\u03fa\u01fd\u0000\u161c"+
		"\u161d\u0005\u00f2\u0000\u0000\u161d\u1622\u0003\u03f6\u01fb\u0000\u161e"+
		"\u161f\u0005\u028b\u0000\u0000\u161f\u1621\u0003\u03f6\u01fb\u0000\u1620"+
		"\u161e\u0001\u0000\u0000\u0000\u1621\u1624\u0001\u0000\u0000\u0000\u1622"+
		"\u1620\u0001\u0000\u0000\u0000\u1622\u1623\u0001\u0000\u0000\u0000\u1623"+
		"\u1631\u0001\u0000\u0000\u0000\u1624\u1622\u0001\u0000\u0000\u0000\u1625"+
		"\u1626\u00052\u0000\u0000\u1626\u1627\u0005G\u0000\u0000\u1627\u1628\u0005"+
		"\u00f2\u0000\u0000\u1628\u162d\u0003\u03f6\u01fb\u0000\u1629\u162a\u0005"+
		"\u028b\u0000\u0000\u162a\u162c\u0003\u03f6\u01fb\u0000\u162b\u1629\u0001"+
		"\u0000\u0000\u0000\u162c\u162f\u0001\u0000\u0000\u0000\u162d\u162b\u0001"+
		"\u0000\u0000\u0000\u162d\u162e\u0001\u0000\u0000\u0000\u162e\u1631\u0001"+
		"\u0000\u0000\u0000\u162f\u162d\u0001\u0000\u0000\u0000\u1630\u161c\u0001"+
		"\u0000\u0000\u0000\u1630\u1625\u0001\u0000\u0000\u0000\u1631\u0277\u0001"+
		"\u0000\u0000\u0000\u1632\u1633\u0005\u0164\u0000\u0000\u1633\u1634\u0003"+
		"\u03f6\u01fb\u0000\u1634\u1637\u0005\u00bd\u0000\u0000\u1635\u1638\u0003"+
		"\u028a\u0145\u0000\u1636\u1638\u0003\u0344\u01a2\u0000\u1637\u1635\u0001"+
		"\u0000\u0000\u0000\u1637\u1636\u0001\u0000\u0000\u0000\u1638\u163a\u0001"+
		"\u0000\u0000\u0000\u1639\u163b\u0003\u038e\u01c7\u0000\u163a\u1639\u0001"+
		"\u0000\u0000\u0000\u163a\u163b\u0001\u0000\u0000\u0000\u163b\u0279\u0001"+
		"\u0000\u0000\u0000\u163c\u1642\u0003\u027c\u013e\u0000\u163d\u1642\u0003"+
		"\u027e\u013f\u0000\u163e\u1642\u0003\u0280\u0140\u0000\u163f\u1642\u0003"+
		"\u0284\u0142\u0000\u1640\u1642\u0003\u0286\u0143\u0000\u1641\u163c\u0001"+
		"\u0000\u0000\u0000\u1641\u163d\u0001\u0000\u0000\u0000\u1641\u163e\u0001"+
		"\u0000\u0000\u0000\u1641\u163f\u0001\u0000\u0000\u0000\u1641\u1640\u0001"+
		"\u0000\u0000\u0000\u1642\u027b\u0001\u0000\u0000\u0000\u1643\u1644\u0005"+
		"\u01d4\u0000\u0000\u1644\u1652\u0005\u0212\u0000\u0000\u1645\u1646\u0005"+
		"\u0197\u0000\u0000\u1646\u1653\u0007<\u0000\u0000\u1647\u1648\u0005\u00f6"+
		"\u0000\u0000\u1648\u164c\u0005\u0103\u0000\u0000\u1649\u164d\u0005\u01d0"+
		"\u0000\u0000\u164a\u164b\u0005\u0197\u0000\u0000\u164b\u164d\u0005M\u0000"+
		"\u0000\u164c\u1649\u0001\u0000\u0000\u0000\u164c\u164a\u0001\u0000\u0000"+
		"\u0000\u164d\u1653\u0001\u0000\u0000\u0000\u164e\u164f\u0005\u0229\u0000"+
		"\u0000\u164f\u1650\u0005\u01b8\u0000\u0000\u1650\u1651\u0005\u01cb\u0000"+
		"\u0000\u1651\u1653\u0003\u03d0\u01e8\u0000\u1652\u1645\u0001\u0000\u0000"+
		"\u0000\u1652\u1647\u0001\u0000\u0000\u0000\u1652\u164e\u0001\u0000\u0000"+
		"\u0000\u1652\u1653\u0001\u0000\u0000\u0000\u1653\u1656\u0001\u0000\u0000"+
		"\u0000\u1654\u1655\u0005\u0131\u0000\u0000\u1655\u1657\u0003\u042c\u0216"+
		"\u0000\u1656\u1654\u0001\u0000\u0000\u0000\u1656\u1657\u0001\u0000\u0000"+
		"\u0000\u1657\u027d\u0001\u0000\u0000\u0000\u1658\u1659\u0005\u01d4\u0000"+
		"\u0000\u1659\u1663\u0007=\u0000\u0000\u165a\u1664\u0005\t\u0000\u0000"+
		"\u165b\u1660\u0003\u03e6\u01f3\u0000\u165c\u165d\u0005\u028b\u0000\u0000"+
		"\u165d\u165f\u0003\u03e6\u01f3\u0000\u165e\u165c\u0001\u0000\u0000\u0000"+
		"\u165f\u1662\u0001\u0000\u0000\u0000\u1660\u165e\u0001\u0000\u0000\u0000"+
		"\u1660\u1661\u0001\u0000\u0000\u0000\u1661\u1664\u0001\u0000\u0000\u0000"+
		"\u1662\u1660\u0001\u0000\u0000\u0000\u1663\u165a\u0001\u0000\u0000\u0000"+
		"\u1663\u165b\u0001\u0000\u0000\u0000\u1664\u1665\u0001\u0000\u0000\u0000"+
		"\u1665\u1666\u0007\t\u0000\u0000\u1666\u027f\u0001\u0000\u0000\u0000\u1667"+
		"\u1669\u0005L\u0000\u0000\u1668\u166a\u0005\u0244\u0000\u0000\u1669\u1668"+
		"\u0001\u0000\u0000\u0000\u1669\u166a\u0001\u0000\u0000\u0000\u166a\u1678"+
		"\u0001\u0000\u0000\u0000\u166b\u166c\u0005K\u0000\u0000\u166c\u1679\u0003"+
		"\u0344\u01a2\u0000\u166d\u1676\u0005\u00bf\u0000\u0000\u166e\u166f\u0005"+
		"_\u0000\u0000\u166f\u1677\u0003\u0344\u01a2\u0000\u1670\u1677\u0005`\u0000"+
		"\u0000\u1671\u1674\u0003\u0344\u01a2\u0000\u1672\u1673\u0005\u028b\u0000"+
		"\u0000\u1673\u1675\u0003\u0344\u01a2\u0000\u1674\u1672\u0001\u0000\u0000"+
		"\u0000\u1674\u1675\u0001\u0000\u0000\u0000\u1675\u1677\u0001\u0000\u0000"+
		"\u0000\u1676\u166e\u0001\u0000\u0000\u0000\u1676\u1670\u0001\u0000\u0000"+
		"\u0000\u1676\u1671\u0001\u0000\u0000\u0000\u1677\u1679\u0001\u0000\u0000"+
		"\u0000\u1678\u166b\u0001\u0000\u0000\u0000\u1678\u166d\u0001\u0000\u0000"+
		"\u0000\u1678\u1679\u0001\u0000\u0000\u0000\u1679\u167b\u0001\u0000\u0000"+
		"\u0000\u167a\u167c\u0003\u0282\u0141\u0000\u167b\u167a\u0001\u0000\u0000"+
		"\u0000\u167b\u167c\u0001\u0000\u0000\u0000\u167c\u0281\u0001\u0000\u0000"+
		"\u0000\u167d\u167f\u0005\u0245\u0000\u0000\u167e\u1680\u0007>\u0000\u0000"+
		"\u167f\u167e\u0001\u0000\u0000\u0000\u167f\u1680\u0001\u0000\u0000\u0000"+
		"\u1680\u1682\u0001\u0000\u0000\u0000\u1681\u1683\u0007?\u0000\u0000\u1682"+
		"\u1681\u0001\u0000\u0000\u0000\u1682\u1683\u0001\u0000\u0000\u0000\u1683"+
		"\u0283\u0001\u0000\u0000\u0000\u1684\u1686\u0005\u01b8\u0000\u0000\u1685"+
		"\u1687\u0005\u0244\u0000\u0000\u1686\u1685\u0001\u0000\u0000\u0000\u1686"+
		"\u1687\u0001\u0000\u0000\u0000\u1687\u168f\u0001\u0000\u0000\u0000\u1688"+
		"\u168a\u0005\u020e\u0000\u0000\u1689\u168b\u0005\u01c2\u0000\u0000\u168a"+
		"\u1689\u0001\u0000\u0000\u0000\u168a\u168b\u0001\u0000\u0000\u0000\u168b"+
		"\u168c\u0001\u0000\u0000\u0000\u168c\u1690\u0003\u03ce\u01e7\u0000\u168d"+
		"\u168e\u0005\u00bf\u0000\u0000\u168e\u1690\u0003\u042c\u0216\u0000\u168f"+
		"\u1688\u0001\u0000\u0000\u0000\u168f\u168d\u0001\u0000\u0000\u0000\u168f"+
		"\u1690\u0001\u0000\u0000\u0000\u1690\u0285\u0001\u0000\u0000\u0000\u1691"+
		"\u1692\u0005\u01c2\u0000\u0000\u1692\u1693\u0003\u03ce\u01e7\u0000\u1693"+
		"\u0287\u0001\u0000\u0000\u0000\u1694\u1695\u0005\u00ac\u0000\u0000\u1695"+
		"\u169a\u0005\u0182\u0000\u0000\u1696\u1697\u0005\u01d4\u0000\u0000\u1697"+
		"\u1698\u0005\u01ed\u0000\u0000\u1698\u1699\u0005\u029c\u0000\u0000\u1699"+
		"\u169b\u0003\u042c\u0216\u0000\u169a\u1696\u0001\u0000\u0000\u0000\u169a"+
		"\u169b\u0001\u0000\u0000\u0000\u169b\u169e\u0001\u0000\u0000\u0000\u169c"+
		"\u169d\u0005\u00f2\u0000\u0000\u169d\u169f\u0003\u0406\u0203\u0000\u169e"+
		"\u169c\u0001\u0000\u0000\u0000\u169e\u169f\u0001\u0000\u0000\u0000\u169f"+
		"\u16a0\u0001\u0000\u0000\u0000\u16a0\u16a6\u0005\u00bd\u0000\u0000\u16a1"+
		"\u16a7\u0003\u028a\u0145\u0000\u16a2\u16a7\u0003\u02fc\u017e\u0000\u16a3"+
		"\u16a7\u0003\u0302\u0181\u0000\u16a4\u16a7\u0003\u0304\u0182\u0000\u16a5"+
		"\u16a7\u0003\u0316\u018b\u0000\u16a6\u16a1\u0001\u0000\u0000\u0000\u16a6"+
		"\u16a2\u0001\u0000\u0000\u0000\u16a6\u16a3\u0001\u0000\u0000\u0000\u16a6"+
		"\u16a4\u0001\u0000\u0000\u0000\u16a6\u16a5\u0001\u0000\u0000\u0000\u16a7"+
		"\u0289\u0001\u0000\u0000\u0000\u16a8\u16aa\u0003\u028c\u0146\u0000\u16a9"+
		"\u16a8\u0001\u0000\u0000\u0000\u16a9\u16aa\u0001\u0000\u0000\u0000\u16aa"+
		"\u16ab\u0001\u0000\u0000\u0000\u16ab\u16ac\u0003\u0294\u014a\u0000\u16ac"+
		"\u028b\u0001\u0000\u0000\u0000\u16ad\u16ae\u0005\u0241\u0000\u0000\u16ae"+
		"\u16b3\u0003\u028e\u0147\u0000\u16af\u16b0\u0005\u028b\u0000\u0000\u16b0"+
		"\u16b2\u0003\u028e\u0147\u0000\u16b1\u16af\u0001\u0000\u0000\u0000\u16b2"+
		"\u16b5\u0001\u0000\u0000\u0000\u16b3\u16b1\u0001\u0000\u0000\u0000\u16b3"+
		"\u16b4\u0001\u0000\u0000\u0000\u16b4\u028d\u0001\u0000\u0000\u0000\u16b5"+
		"\u16b3\u0001\u0000\u0000\u0000\u16b6\u16b8\u0003\u03e4\u01f2\u0000\u16b7"+
		"\u16b9\u0003\u00aeW\u0000\u16b8\u16b7\u0001\u0000\u0000\u0000\u16b8\u16b9"+
		"\u0001\u0000\u0000\u0000\u16b9\u16ba\u0001\u0000\u0000\u0000\u16ba\u16bb"+
		"\u0005\u0014\u0000\u0000\u16bb\u16bc\u0005\u0285\u0000\u0000\u16bc\u16be"+
		"\u0003\u0294\u014a\u0000\u16bd\u16bf\u0003\u02f0\u0178\u0000\u16be\u16bd"+
		"\u0001\u0000\u0000\u0000\u16be\u16bf\u0001\u0000\u0000\u0000\u16bf\u16c0"+
		"\u0001\u0000\u0000\u0000\u16c0\u16c2\u0005\u0286\u0000\u0000\u16c1\u16c3"+
		"\u0003\u0290\u0148\u0000\u16c2\u16c1\u0001\u0000\u0000\u0000\u16c2\u16c3"+
		"\u0001\u0000\u0000\u0000\u16c3\u16c5\u0001\u0000\u0000\u0000\u16c4\u16c6"+
		"\u0003\u0292\u0149\u0000\u16c5\u16c4\u0001\u0000\u0000\u0000\u16c5\u16c6"+
		"\u0001\u0000\u0000\u0000\u16c6\u028f\u0001\u0000\u0000\u0000\u16c7\u16c8"+
		"\u0005\u01c7\u0000\u0000\u16c8\u16c9\u0007@\u0000\u0000\u16c9\u16ca\u0005"+
		"\u00b6\u0000\u0000\u16ca\u16cb\u00053\u0000\u0000\u16cb\u16cd\u0003\u0402"+
		"\u0201\u0000\u16cc\u16ce\u0005\u0015\u0000\u0000\u16cd\u16cc\u0001\u0000"+
		"\u0000\u0000\u16cd\u16ce\u0001\u0000\u0000\u0000\u16ce\u16d0\u0001\u0000"+
		"\u0000\u0000\u16cf\u16d1\u0005\u0088\u0000\u0000\u16d0\u16cf\u0001\u0000"+
		"\u0000\u0000\u16d0\u16d1\u0001\u0000\u0000\u0000\u16d1\u16d4\u0001\u0000"+
		"\u0000\u0000\u16d2\u16d3\u0005\u0156\u0000\u0000\u16d3\u16d5\u0005\u00b6"+
		"\u0000\u0000\u16d4\u16d2\u0001\u0000\u0000\u0000\u16d4\u16d5\u0001\u0000"+
		"\u0000\u0000\u16d5\u16d8\u0001\u0000\u0000\u0000\u16d6\u16d7\u0005\u0156"+
		"\u0000\u0000\u16d7\u16d9\u0005\u00fe\u0000\u0000\u16d8\u16d6\u0001\u0000"+
		"\u0000\u0000\u16d8\u16d9\u0001\u0000\u0000\u0000\u16d9\u16ec\u0001\u0000"+
		"\u0000\u0000\u16da\u16db\u0005\u028b\u0000\u0000\u16db\u16dd\u0003\u0402"+
		"\u0201\u0000\u16dc\u16de\u0005\u0015\u0000\u0000\u16dd\u16dc\u0001\u0000"+
		"\u0000\u0000\u16dd\u16de\u0001\u0000\u0000\u0000\u16de\u16e0\u0001\u0000"+
		"\u0000\u0000\u16df\u16e1\u0005\u0088\u0000\u0000\u16e0\u16df\u0001\u0000"+
		"\u0000\u0000\u16e0\u16e1\u0001\u0000\u0000\u0000\u16e1\u16e4\u0001\u0000"+
		"\u0000\u0000\u16e2\u16e3\u0005\u0156\u0000\u0000\u16e3\u16e5\u0005\u00b6"+
		"\u0000\u0000\u16e4\u16e2\u0001\u0000\u0000\u0000\u16e4\u16e5\u0001\u0000"+
		"\u0000\u0000\u16e5\u16e8\u0001\u0000\u0000\u0000\u16e6\u16e7\u0005\u0156"+
		"\u0000\u0000\u16e7\u16e9\u0005\u00fe\u0000\u0000\u16e8\u16e6\u0001\u0000"+
		"\u0000\u0000\u16e8\u16e9\u0001\u0000\u0000\u0000\u16e9\u16eb\u0001\u0000"+
		"\u0000\u0000\u16ea\u16da\u0001\u0000\u0000\u0000\u16eb\u16ee\u0001\u0000"+
		"\u0000\u0000\u16ec\u16ea\u0001\u0000\u0000\u0000\u16ec\u16ed\u0001\u0000"+
		"\u0000\u0000\u16ed\u16ef\u0001\u0000\u0000\u0000\u16ee\u16ec\u0001\u0000"+
		"\u0000\u0000\u16ef\u16f0\u0005\u01d4\u0000\u0000\u16f0\u16f1\u0003\u0402"+
		"\u0201\u0000\u16f1\u0291\u0001\u0000\u0000\u0000\u16f2\u16f3\u0005m\u0000"+
		"\u0000\u16f3\u16f8\u0003\u0402\u0201\u0000\u16f4\u16f5\u0005\u028b\u0000"+
		"\u0000\u16f5\u16f7\u0003\u0402\u0201\u0000\u16f6\u16f4\u0001\u0000\u0000"+
		"\u0000\u16f7\u16fa\u0001\u0000\u0000\u0000\u16f8\u16f6\u0001\u0000\u0000"+
		"\u0000\u16f8\u16f9\u0001\u0000\u0000\u0000\u16f9\u16fb\u0001\u0000\u0000"+
		"\u0000\u16fa\u16f8\u0001\u0000\u0000\u0000\u16fb\u16fc\u0005\u01d4\u0000"+
		"\u0000\u16fc\u16fd\u0003\u0402\u0201\u0000\u16fd\u16fe\u0005\u020e\u0000"+
		"\u0000\u16fe\u16ff\u0003\u0344\u01a2\u0000\u16ff\u1700\u0005\u0080\u0000"+
		"\u0000\u1700\u1701\u0003\u0344\u01a2\u0000\u1701\u0293\u0001\u0000\u0000"+
		"\u0000\u1702\u1703\u0006\u014a\uffff\uffff\u0000\u1703\u1704\u0005\u0285"+
		"\u0000\u0000\u1704\u1705\u0003\u0294\u014a\u0000\u1705\u1706\u0005\u0286"+
		"\u0000\u0000\u1706\u1709\u0001\u0000\u0000\u0000\u1707\u1709\u0003\u0298"+
		"\u014c\u0000\u1708\u1702\u0001\u0000\u0000\u0000\u1708\u1707\u0001\u0000"+
		"\u0000\u0000\u1709\u1712\u0001\u0000\u0000\u0000\u170a\u170b\n\u0002\u0000"+
		"\u0000\u170b\u170c\u0003\u0296\u014b\u0000\u170c\u170e\u0003\u0294\u014a"+
		"\u0000\u170d\u170f\u0003\u02f0\u0178\u0000\u170e\u170d\u0001\u0000\u0000"+
		"\u0000\u170e\u170f\u0001\u0000\u0000\u0000\u170f\u1711\u0001\u0000\u0000"+
		"\u0000\u1710\u170a\u0001\u0000\u0000\u0000\u1711\u1714\u0001\u0000\u0000"+
		"\u0000\u1712\u1710\u0001\u0000\u0000\u0000\u1712\u1713\u0001\u0000\u0000"+
		"\u0000\u1713\u0295\u0001\u0000\u0000\u0000\u1714\u1712\u0001\u0000\u0000"+
		"\u0000\u1715\u1717\u0007A\u0000\u0000\u1716\u1718\u0005\t\u0000\u0000"+
		"\u1717\u1716\u0001\u0000\u0000\u0000\u1717\u1718\u0001\u0000\u0000\u0000"+
		"\u1718\u0297\u0001\u0000\u0000\u0000\u1719\u171b\u0005\u01cc\u0000\u0000"+
		"\u171a\u171c\u0007B\u0000\u0000\u171b\u171a\u0001\u0000\u0000\u0000\u171b"+
		"\u171c\u0001\u0000\u0000\u0000\u171c\u171d\u0001\u0000\u0000\u0000\u171d"+
		"\u1722\u0003\u029a\u014d\u0000\u171e\u171f\u0005\u028b\u0000\u0000\u171f"+
		"\u1721\u0003\u029a\u014d\u0000\u1720\u171e\u0001\u0000\u0000\u0000\u1721"+
		"\u1724\u0001\u0000\u0000\u0000\u1722\u1720\u0001\u0000\u0000\u0000\u1722"+
		"\u1723\u0001\u0000\u0000\u0000\u1723\u1726\u0001\u0000\u0000\u0000\u1724"+
		"\u1722\u0001\u0000\u0000\u0000\u1725\u1727\u0003\u03c6\u01e3\u0000\u1726"+
		"\u1725\u0001\u0000\u0000\u0000\u1726\u1727\u0001\u0000\u0000\u0000\u1727"+
		"\u1729\u0001\u0000\u0000\u0000\u1728\u172a\u0003\u029c\u014e\u0000\u1729"+
		"\u1728\u0001\u0000\u0000\u0000\u1729\u172a\u0001\u0000\u0000\u0000\u172a"+
		"\u172c\u0001\u0000\u0000\u0000\u172b\u172d\u0003\u03c2\u01e1\u0000\u172c"+
		"\u172b\u0001\u0000\u0000\u0000\u172c\u172d\u0001\u0000\u0000\u0000\u172d"+
		"\u172f\u0001\u0000\u0000\u0000\u172e\u1730\u0003\u02c2\u0161\u0000\u172f"+
		"\u172e\u0001\u0000\u0000\u0000\u172f\u1730\u0001\u0000\u0000\u0000\u1730"+
		"\u1735\u0001\u0000\u0000\u0000\u1731\u1734\u0003\u02c6\u0163\u0000\u1732"+
		"\u1734\u0003\u02d0\u0168\u0000\u1733\u1731\u0001\u0000\u0000\u0000\u1733"+
		"\u1732\u0001\u0000\u0000\u0000\u1734\u1737\u0001\u0000\u0000\u0000\u1735"+
		"\u1733\u0001\u0000\u0000\u0000\u1735\u1736\u0001\u0000\u0000\u0000\u1736"+
		"\u1739\u0001\u0000\u0000\u0000\u1737\u1735\u0001\u0000\u0000\u0000\u1738"+
		"\u173a\u0003\u02d2\u0169\u0000\u1739\u1738\u0001\u0000\u0000\u0000\u1739"+
		"\u173a\u0001\u0000\u0000\u0000\u173a\u1740\u0001\u0000\u0000\u0000\u173b"+
		"\u173f\u0003\u02f4\u017a\u0000\u173c\u173f\u0003\u02f0\u0178\u0000\u173d"+
		"\u173f\u0003\u02fa\u017d\u0000\u173e\u173b\u0001\u0000\u0000\u0000\u173e"+
		"\u173c\u0001\u0000\u0000\u0000\u173e\u173d\u0001\u0000\u0000\u0000\u173f"+
		"\u1742\u0001\u0000\u0000\u0000\u1740\u173e\u0001\u0000\u0000\u0000\u1740"+
		"\u1741\u0001\u0000\u0000\u0000\u1741\u0299\u0001\u0000\u0000\u0000\u1742"+
		"\u1740\u0001\u0000\u0000\u0000\u1743\u174e\u0003\u040a\u0205\u0000\u1744"+
		"\u1745\u0003\u0408\u0204\u0000\u1745\u1746\u0005\u027e\u0000\u0000\u1746"+
		"\u1747\u0003\u040a\u0205\u0000\u1747\u174e\u0001\u0000\u0000\u0000\u1748"+
		"\u174e\u0003\u0406\u0203\u0000\u1749\u174b\u0003\u0344\u01a2\u0000\u174a"+
		"\u174c\u0003\u03bc\u01de\u0000\u174b\u174a\u0001\u0000\u0000\u0000\u174b"+
		"\u174c\u0001\u0000\u0000\u0000\u174c\u174e\u0001\u0000\u0000\u0000\u174d"+
		"\u1743\u0001\u0000\u0000\u0000\u174d\u1744\u0001\u0000\u0000\u0000\u174d"+
		"\u1748\u0001\u0000\u0000\u0000\u174d\u1749\u0001\u0000\u0000\u0000\u174e"+
		"\u029b\u0001\u0000\u0000\u0000\u174f\u1750\u0005\u00c4\u0000\u0000\u1750"+
		"\u1755\u0003\u02a0\u0150\u0000\u1751\u1752\u0005\u028b\u0000\u0000\u1752"+
		"\u1754\u0003\u02a0\u0150\u0000\u1753\u1751\u0001\u0000\u0000\u0000\u1754"+
		"\u1757\u0001\u0000\u0000\u0000\u1755\u1753\u0001\u0000\u0000\u0000\u1755"+
		"\u1756\u0001\u0000\u0000\u0000\u1756\u029d\u0001\u0000\u0000\u0000\u1757"+
		"\u1755\u0001\u0000\u0000\u0000\u1758\u175b\u0003\u02a0\u0150\u0000\u1759"+
		"\u175c\u0003\u02b0\u0158\u0000\u175a\u175c\u0003\u02bc\u015e\u0000\u175b"+
		"\u1759\u0001\u0000\u0000\u0000\u175b\u175a\u0001\u0000\u0000\u0000\u175b"+
		"\u175c\u0001\u0000\u0000\u0000\u175c\u029f\u0001\u0000\u0000\u0000\u175d"+
		"\u175e\u0006\u0150\uffff\uffff\u0000\u175e\u1762\u0003\u02a2\u0151\u0000"+
		"\u175f\u1761\u0003\u02ae\u0157\u0000\u1760\u175f\u0001\u0000\u0000\u0000"+
		"\u1761\u1764\u0001\u0000\u0000\u0000\u1762\u1760\u0001\u0000\u0000\u0000"+
		"\u1762\u1763\u0001\u0000\u0000\u0000\u1763\u1770\u0001\u0000\u0000\u0000"+
		"\u1764\u1762\u0001\u0000\u0000\u0000\u1765\u1769\u0003\u02a2\u0151\u0000"+
		"\u1766\u1768\u0003\u02ae\u0157\u0000\u1767\u1766\u0001\u0000\u0000\u0000"+
		"\u1768\u176b\u0001\u0000\u0000\u0000\u1769\u1767\u0001\u0000\u0000\u0000"+
		"\u1769\u176a\u0001\u0000\u0000\u0000\u176a\u176d\u0001\u0000\u0000\u0000"+
		"\u176b\u1769\u0001\u0000\u0000\u0000\u176c\u176e\u0003\u03be\u01df\u0000"+
		"\u176d\u176c\u0001\u0000\u0000\u0000\u176d\u176e\u0001\u0000\u0000\u0000"+
		"\u176e\u1770\u0001\u0000\u0000\u0000\u176f\u175d\u0001\u0000\u0000\u0000"+
		"\u176f\u1765\u0001\u0000\u0000\u0000\u1770\u1775\u0001\u0000\u0000\u0000"+
		"\u1771\u1772\n\u0003\u0000\u0000\u1772\u1774\u0003\u02a4\u0152\u0000\u1773"+
		"\u1771\u0001\u0000\u0000\u0000\u1774\u1777\u0001\u0000\u0000\u0000\u1775"+
		"\u1773\u0001\u0000\u0000\u0000\u1775\u1776\u0001\u0000\u0000\u0000\u1776"+
		"\u02a1\u0001\u0000\u0000\u0000\u1777\u1775\u0001\u0000\u0000\u0000\u1778"+
		"\u177b\u0003\u0334\u019a\u0000\u1779\u177c\u0003\u02b0\u0158\u0000\u177a"+
		"\u177c\u0003\u02bc\u015e\u0000\u177b\u1779\u0001\u0000\u0000\u0000\u177b"+
		"\u177a\u0001\u0000\u0000\u0000\u177b\u177c\u0001\u0000\u0000\u0000\u177c"+
		"\u1783\u0001\u0000\u0000\u0000\u177d\u177e\u0005\u0163\u0000\u0000\u177e"+
		"\u177f\u0005\u0285\u0000\u0000\u177f\u1780\u0003\u0334\u019a\u0000\u1780"+
		"\u1781\u0005\u0286\u0000\u0000\u1781\u1783\u0001\u0000\u0000\u0000\u1782"+
		"\u1778\u0001\u0000\u0000\u0000\u1782\u177d\u0001\u0000\u0000\u0000\u1783"+
		"\u02a3\u0001\u0000\u0000\u0000\u1784\u1786\u0003\u02ac\u0156\u0000\u1785"+
		"\u1784\u0001\u0000\u0000\u0000\u1785\u1786\u0001\u0000\u0000\u0000\u1786"+
		"\u1788\u0001\u0000\u0000\u0000\u1787\u1789\u0003\u02aa\u0155\u0000\u1788"+
		"\u1787\u0001\u0000\u0000\u0000\u1788\u1789\u0001\u0000\u0000\u0000\u1789"+
		"\u178a\u0001\u0000\u0000\u0000\u178a\u178b\u0005\u00f9\u0000\u0000\u178b"+
		"\u178d\u0003\u02a0\u0150\u0000\u178c\u178e\u0003\u02ac\u0156\u0000\u178d"+
		"\u178c\u0001\u0000\u0000\u0000\u178d\u178e\u0001\u0000\u0000\u0000\u178e"+
		"\u1791\u0001\u0000\u0000\u0000\u178f\u1792\u0003\u02a6\u0153\u0000\u1790"+
		"\u1792\u0003\u02a8\u0154\u0000\u1791\u178f\u0001\u0000\u0000\u0000\u1791"+
		"\u1790\u0001\u0000\u0000\u0000\u1791\u1792\u0001\u0000\u0000\u0000\u1792"+
		"\u02a5\u0001\u0000\u0000\u0000\u1793\u1794\u0005\u0162\u0000\u0000\u1794"+
		"\u1795\u0003\u0342\u01a1\u0000\u1795\u02a7\u0001\u0000\u0000\u0000\u1796"+
		"\u1797\u0005\u022a\u0000\u0000\u1797\u1798\u0005\u0285\u0000\u0000\u1798"+
		"\u179d\u0003\u0402\u0201\u0000\u1799\u179a\u0005\u028b\u0000\u0000\u179a"+
		"\u179c\u0003\u0402\u0201\u0000\u179b\u1799\u0001\u0000\u0000\u0000\u179c"+
		"\u179f\u0001\u0000\u0000\u0000\u179d\u179b\u0001\u0000\u0000\u0000\u179d"+
		"\u179e\u0001\u0000\u0000\u0000\u179e\u17a0\u0001\u0000\u0000\u0000\u179f"+
		"\u179d\u0001\u0000\u0000\u0000\u17a0\u17a1\u0005\u0286\u0000\u0000\u17a1"+
		"\u02a9\u0001\u0000\u0000\u0000\u17a2\u17ae\u0005g\u0000\u0000\u17a3\u17a5"+
		"\u0005\u0133\u0000\u0000\u17a4\u17a3\u0001\u0000\u0000\u0000\u17a4\u17a5"+
		"\u0001\u0000\u0000\u0000\u17a5\u17ab\u0001\u0000\u0000\u0000\u17a6\u17ac"+
		"\u0005\u00e8\u0000\u0000\u17a7\u17a9\u0007C\u0000\u0000\u17a8\u17aa\u0005"+
		"\u016d\u0000\u0000\u17a9\u17a8\u0001\u0000\u0000\u0000\u17a9\u17aa\u0001"+
		"\u0000\u0000\u0000\u17aa\u17ac\u0001\u0000\u0000\u0000\u17ab\u17a6\u0001"+
		"\u0000\u0000\u0000\u17ab\u17a7\u0001\u0000\u0000\u0000\u17ac\u17ae\u0001"+
		"\u0000\u0000\u0000\u17ad\u17a2\u0001\u0000\u0000\u0000\u17ad\u17a4\u0001"+
		"\u0000\u0000\u0000\u17ae\u02ab\u0001\u0000\u0000\u0000\u17af\u17b0\u0005"+
		"\u0176\u0000\u0000\u17b0\u17be\u00053\u0000\u0000\u17b1\u17b2\u0005\u0285"+
		"\u0000\u0000\u17b2\u17b3\u0003\u0294\u014a\u0000\u17b3\u17b4\u0005\u0286"+
		"\u0000\u0000\u17b4\u17bf\u0001\u0000\u0000\u0000\u17b5\u17bf\u0003\u0340"+
		"\u01a0\u0000\u17b6\u17bb\u0003\u0344\u01a2\u0000\u17b7\u17b8\u0005\u028b"+
		"\u0000\u0000\u17b8\u17ba\u0003\u0344\u01a2\u0000\u17b9\u17b7\u0001\u0000"+
		"\u0000\u0000\u17ba\u17bd\u0001\u0000\u0000\u0000\u17bb\u17b9\u0001\u0000"+
		"\u0000\u0000\u17bb\u17bc\u0001\u0000\u0000\u0000\u17bc\u17bf\u0001\u0000"+
		"\u0000\u0000\u17bd\u17bb\u0001\u0000\u0000\u0000\u17be\u17b1\u0001\u0000"+
		"\u0000\u0000\u17be\u17b5\u0001\u0000\u0000\u0000\u17be\u17b6\u0001\u0000"+
		"\u0000\u0000\u17bf\u02ad\u0001\u0000\u0000\u0000\u17c0\u17c1\u0005\u0236"+
		"\u0000\u0000\u17c1\u17c2\u0005#\u0000\u0000\u17c2\u17c3\u0007D\u0000\u0000"+
		"\u17c3\u17c9\u0003\u0344\u01a2\u0000\u17c4\u17c5\u0005\u0014\u0000\u0000"+
		"\u17c5\u17c6\u0005\u015c\u0000\u0000\u17c6\u17c7\u0007E\u0000\u0000\u17c7"+
		"\u17c9\u0003\u0344\u01a2\u0000\u17c8\u17c0\u0001\u0000\u0000\u0000\u17c8"+
		"\u17c4\u0001\u0000\u0000\u0000\u17c9\u02af\u0001\u0000\u0000\u0000\u17ca"+
		"\u17cc\u0005\u0181\u0000\u0000\u17cb\u17cd\u0005\u0247\u0000\u0000\u17cc"+
		"\u17cb\u0001\u0000\u0000\u0000\u17cc\u17cd\u0001\u0000\u0000\u0000\u17cd"+
		"\u17ce\u0001\u0000\u0000\u0000\u17ce\u17cf\u0005\u0285\u0000\u0000\u17cf"+
		"\u17d4\u0003\u02b2\u0159\u0000\u17d0\u17d1\u0005\u028b\u0000\u0000\u17d1"+
		"\u17d3\u0003\u02b2\u0159\u0000\u17d2\u17d0\u0001\u0000\u0000\u0000\u17d3"+
		"\u17d6\u0001\u0000\u0000\u0000\u17d4\u17d2\u0001\u0000\u0000\u0000\u17d4"+
		"\u17d5\u0001\u0000\u0000\u0000\u17d5\u17d7\u0001\u0000\u0000\u0000\u17d6"+
		"\u17d4\u0001\u0000\u0000\u0000\u17d7\u17d8\u0003\u02b4\u015a\u0000\u17d8"+
		"\u17d9\u0003\u02b6\u015b\u0000\u17d9\u17da\u0005\u0286\u0000\u0000\u17da"+
		"\u02b1\u0001\u0000\u0000\u0000\u17db\u17dc\u0003\u03e2\u01f1\u0000\u17dc"+
		"\u17dd\u0005\u0285\u0000\u0000\u17dd\u17de\u0003\u0344\u01a2\u0000\u17de"+
		"\u17e0\u0005\u0286\u0000\u0000\u17df\u17e1\u0003\u03bc\u01de\u0000\u17e0"+
		"\u17df\u0001\u0000\u0000\u0000\u17e0\u17e1\u0001\u0000\u0000\u0000\u17e1"+
		"\u02b3\u0001\u0000\u0000\u0000\u17e2\u17ef\u0005\u00bd\u0000\u0000\u17e3"+
		"\u17f0\u0003\u0402\u0201\u0000\u17e4\u17e5\u0005\u0285\u0000\u0000\u17e5"+
		"\u17ea\u0003\u0402\u0201\u0000\u17e6\u17e7\u0005\u028b\u0000\u0000\u17e7"+
		"\u17e9\u0003\u0402\u0201\u0000\u17e8\u17e6\u0001\u0000\u0000\u0000\u17e9"+
		"\u17ec\u0001\u0000\u0000\u0000\u17ea\u17e8\u0001\u0000\u0000\u0000\u17ea"+
		"\u17eb\u0001\u0000\u0000\u0000\u17eb\u17ed\u0001\u0000\u0000\u0000\u17ec"+
		"\u17ea\u0001\u0000\u0000\u0000\u17ed\u17ee\u0005\u0286\u0000\u0000\u17ee"+
		"\u17f0\u0001\u0000\u0000\u0000\u17ef\u17e3\u0001\u0000\u0000\u0000\u17ef"+
		"\u17e4\u0001\u0000\u0000\u0000\u17f0\u02b5\u0001\u0000\u0000\u0000\u17f1"+
		"\u17f2\u0005\u00d9\u0000\u0000\u17f2\u1804\u0005\u0285\u0000\u0000\u17f3"+
		"\u1805\u0003\u0294\u014a\u0000\u17f4\u17f9\u0005\u0010\u0000\u0000\u17f5"+
		"\u17f6\u0005\u028b\u0000\u0000\u17f6\u17f8\u0005\u0010\u0000\u0000\u17f7"+
		"\u17f5\u0001\u0000\u0000\u0000\u17f8\u17fb\u0001\u0000\u0000\u0000\u17f9"+
		"\u17f7\u0001\u0000\u0000\u0000\u17f9\u17fa\u0001\u0000\u0000\u0000\u17fa"+
		"\u1805\u0001\u0000\u0000\u0000\u17fb\u17f9\u0001\u0000\u0000\u0000\u17fc"+
		"\u1801\u0003\u02b8\u015c\u0000\u17fd\u17fe\u0005\u028b\u0000\u0000\u17fe"+
		"\u1800\u0003\u02b8\u015c\u0000\u17ff\u17fd\u0001\u0000\u0000\u0000\u1800"+
		"\u1803\u0001\u0000\u0000\u0000\u1801\u17ff\u0001\u0000\u0000\u0000\u1801"+
		"\u1802\u0001\u0000\u0000\u0000\u1802\u1805\u0001\u0000\u0000\u0000\u1803"+
		"\u1801\u0001\u0000\u0000\u0000\u1804\u17f3\u0001\u0000\u0000\u0000\u1804"+
		"\u17f4\u0001\u0000\u0000\u0000\u1804\u17fc\u0001\u0000\u0000\u0000\u1805"+
		"\u1806\u0001\u0000\u0000\u0000\u1806\u1807\u0005\u0286\u0000\u0000\u1807"+
		"\u02b7\u0001\u0000\u0000\u0000\u1808\u180a\u0003\u02ba\u015d\u0000\u1809"+
		"\u180b\u0003\u03bc\u01de\u0000\u180a\u1809\u0001\u0000\u0000\u0000\u180a"+
		"\u180b\u0001\u0000\u0000\u0000\u180b\u02b9\u0001\u0000\u0000\u0000\u180c"+
		"\u180f\u0003\u0344\u01a2\u0000\u180d\u180f\u0003\u0340\u01a0\u0000\u180e"+
		"\u180c\u0001\u0000\u0000\u0000\u180e\u180d\u0001\u0000\u0000\u0000\u180f"+
		"\u02bb\u0001\u0000\u0000\u0000\u1810\u1813\u0005\u0220\u0000\u0000\u1811"+
		"\u1812\u0007F\u0000\u0000\u1812\u1814\u0005\u0156\u0000\u0000\u1813\u1811"+
		"\u0001\u0000\u0000\u0000\u1813\u1814\u0001\u0000\u0000\u0000\u1814\u1815"+
		"\u0001\u0000\u0000\u0000\u1815\u1822\u0005\u0285\u0000\u0000\u1816\u1823"+
		"\u0003\u0402\u0201\u0000\u1817\u1818\u0005\u0285\u0000\u0000\u1818\u181d"+
		"\u0003\u0402\u0201\u0000\u1819\u181a\u0005\u028b\u0000\u0000\u181a\u181c"+
		"\u0003\u0402\u0201\u0000\u181b\u1819\u0001\u0000\u0000\u0000\u181c\u181f"+
		"\u0001\u0000\u0000\u0000\u181d\u181b\u0001\u0000\u0000\u0000\u181d\u181e"+
		"\u0001\u0000\u0000\u0000\u181e\u1820\u0001\u0000\u0000\u0000\u181f\u181d"+
		"\u0001\u0000\u0000\u0000\u1820\u1821\u0005\u0286\u0000\u0000\u1821\u1823"+
		"\u0001\u0000\u0000\u0000\u1822\u1816\u0001\u0000\u0000\u0000\u1822\u1817"+
		"\u0001\u0000\u0000\u0000\u1823\u1824\u0001\u0000\u0000\u0000\u1824\u1825"+
		"\u0003\u02b4\u015a\u0000\u1825\u1826\u0003\u02be\u015f\u0000\u1826\u1827"+
		"\u0005\u0286\u0000\u0000\u1827\u02bd\u0001\u0000\u0000\u0000\u1828\u1829"+
		"\u0005\u00d9\u0000\u0000\u1829\u182a\u0005\u0285\u0000\u0000\u182a\u182f"+
		"\u0003\u02c0\u0160\u0000\u182b\u182c\u0005\u028b\u0000\u0000\u182c\u182e"+
		"\u0003\u02c0\u0160\u0000\u182d\u182b\u0001\u0000\u0000\u0000\u182e\u1831"+
		"\u0001\u0000\u0000\u0000\u182f\u182d\u0001\u0000\u0000\u0000\u182f\u1830"+
		"\u0001\u0000\u0000\u0000\u1830\u1832\u0001\u0000\u0000\u0000\u1831\u182f"+
		"\u0001\u0000\u0000\u0000\u1832\u1833\u0005\u0286\u0000\u0000\u1833\u02bf"+
		"\u0001\u0000\u0000\u0000\u1834\u1841\u0003\u0402\u0201\u0000\u1835\u1836"+
		"\u0005\u0285\u0000\u0000\u1836\u183b\u0003\u0402\u0201\u0000\u1837\u1838"+
		"\u0005\u028b\u0000\u0000\u1838\u183a\u0003\u0402\u0201\u0000\u1839\u1837"+
		"\u0001\u0000\u0000\u0000\u183a\u183d\u0001\u0000\u0000\u0000\u183b\u1839"+
		"\u0001\u0000\u0000\u0000\u183b\u183c\u0001\u0000\u0000\u0000\u183c\u183e"+
		"\u0001\u0000\u0000\u0000\u183d\u183b\u0001\u0000\u0000\u0000\u183e\u183f"+
		"\u0005\u0286\u0000\u0000\u183f\u1841\u0001\u0000\u0000\u0000\u1840\u1834"+
		"\u0001\u0000\u0000\u0000\u1840\u1835\u0001\u0000\u0000\u0000\u1841\u1851"+
		"\u0001\u0000\u0000\u0000\u1842\u184f\u0005\u0014\u0000\u0000\u1843\u1850"+
		"\u0003\u0426\u0213\u0000\u1844\u1845\u0005\u0285\u0000\u0000\u1845\u184a"+
		"\u0003\u0426\u0213\u0000\u1846\u1847\u0005\u028b\u0000\u0000\u1847\u1849"+
		"\u0003\u0426\u0213\u0000\u1848\u1846\u0001\u0000\u0000\u0000\u1849\u184c"+
		"\u0001\u0000\u0000\u0000\u184a\u1848\u0001\u0000\u0000\u0000\u184a\u184b"+
		"\u0001\u0000\u0000\u0000\u184b\u184d\u0001\u0000\u0000\u0000\u184c\u184a"+
		"\u0001\u0000\u0000\u0000\u184d\u184e\u0005\u0286\u0000\u0000\u184e\u1850"+
		"\u0001\u0000\u0000\u0000\u184f\u1843\u0001\u0000\u0000\u0000\u184f\u1844"+
		"\u0001\u0000\u0000\u0000\u1850\u1852\u0001\u0000\u0000\u0000\u1851\u1842"+
		"\u0001\u0000\u0000\u0000\u1851\u1852\u0001\u0000\u0000\u0000\u1852\u02c1"+
		"\u0001\u0000\u0000\u0000\u1853\u1854\u0005U\u0000\u0000\u1854\u1856\u0005"+
		"3\u0000\u0000\u1855\u1857\u0005\u0142\u0000\u0000\u1856\u1855\u0001\u0000"+
		"\u0000\u0000\u1856\u1857\u0001\u0000\u0000\u0000\u1857\u1858\u0001\u0000"+
		"\u0000\u0000\u1858\u185a\u0003\u0342\u01a1\u0000\u1859\u185b\u0003\u02c4"+
		"\u0162\u0000\u185a\u1859\u0001\u0000\u0000\u0000\u185a\u185b\u0001\u0000"+
		"\u0000\u0000\u185b\u1865\u0001\u0000\u0000\u0000\u185c\u185d\u0003\u02c4"+
		"\u0162\u0000\u185d\u185e\u0005U\u0000\u0000\u185e\u1860\u00053\u0000\u0000"+
		"\u185f\u1861\u0005\u0142\u0000\u0000\u1860\u185f\u0001\u0000\u0000\u0000"+
		"\u1860\u1861\u0001\u0000\u0000\u0000\u1861\u1862\u0001\u0000\u0000\u0000"+
		"\u1862\u1863\u0003\u0342\u01a1\u0000\u1863\u1865\u0001\u0000\u0000\u0000"+
		"\u1864\u1853\u0001\u0000\u0000\u0000\u1864\u185c\u0001\u0000\u0000\u0000"+
		"\u1865\u02c3\u0001\u0000\u0000\u0000\u1866\u1867\u0005\u01ea\u0000\u0000"+
		"\u1867\u1868\u0005\u0241\u0000\u0000\u1868\u1869\u0003\u0342\u01a1\u0000"+
		"\u1869\u02c5\u0001\u0000\u0000\u0000\u186a\u186b\u0005\u00cb\u0000\u0000"+
		"\u186b\u186c\u00053\u0000\u0000\u186c\u1871\u0003\u02c8\u0164\u0000\u186d"+
		"\u186e\u0005\u028b\u0000\u0000\u186e\u1870\u0003\u02c8\u0164\u0000\u186f"+
		"\u186d\u0001\u0000\u0000\u0000\u1870\u1873\u0001\u0000\u0000\u0000\u1871"+
		"\u186f\u0001\u0000\u0000\u0000\u1871\u1872\u0001\u0000\u0000\u0000\u1872"+
		"\u02c7\u0001\u0000\u0000\u0000\u1873\u1871\u0001\u0000\u0000\u0000\u1874"+
		"\u1878\u0003\u02cc\u0166\u0000\u1875\u1878\u0003\u02ca\u0165\u0000\u1876"+
		"\u1878\u0003\u0344\u01a2\u0000\u1877\u1874\u0001\u0000\u0000\u0000\u1877"+
		"\u1875\u0001\u0000\u0000\u0000\u1877\u1876\u0001\u0000\u0000\u0000\u1878"+
		"\u02c9\u0001\u0000\u0000\u0000\u1879\u187a\u0007G\u0000\u0000\u187a\u187b"+
		"\u0005\u0285\u0000\u0000\u187b\u1880\u0003\u02ce\u0167\u0000\u187c\u187d"+
		"\u0005\u028b\u0000\u0000\u187d\u187f\u0003\u02ce\u0167\u0000\u187e\u187c"+
		"\u0001\u0000\u0000\u0000\u187f\u1882\u0001\u0000\u0000\u0000\u1880\u187e"+
		"\u0001\u0000\u0000\u0000\u1880\u1881\u0001\u0000\u0000\u0000\u1881\u1883"+
		"\u0001\u0000\u0000\u0000\u1882\u1880\u0001\u0000\u0000\u0000\u1883\u1884"+
		"\u0005\u0286\u0000\u0000\u1884\u02cb\u0001\u0000\u0000\u0000\u1885\u1886"+
		"\u0005\u00cd\u0000\u0000\u1886\u1887\u0005\u01d5\u0000\u0000\u1887\u1888"+
		"\u0005\u0285\u0000\u0000\u1888\u188d\u0003\u02ce\u0167\u0000\u1889\u188a"+
		"\u0005\u028b\u0000\u0000\u188a\u188c\u0003\u02ce\u0167\u0000\u188b\u1889"+
		"\u0001\u0000\u0000\u0000\u188c\u188f\u0001\u0000\u0000\u0000\u188d\u188b"+
		"\u0001\u0000\u0000\u0000\u188d\u188e\u0001\u0000\u0000\u0000\u188e\u1890"+
		"\u0001\u0000\u0000\u0000\u188f\u188d\u0001\u0000\u0000\u0000\u1890\u1891"+
		"\u0005\u0286\u0000\u0000\u1891\u02cd\u0001\u0000\u0000\u0000\u1892\u1896"+
		"\u0003\u02ca\u0165\u0000\u1893\u1896\u0003\u0340\u01a0\u0000\u1894\u1896"+
		"\u0003\u0344\u01a2\u0000\u1895\u1892\u0001\u0000\u0000\u0000\u1895\u1893"+
		"\u0001\u0000\u0000\u0000\u1895\u1894\u0001\u0000\u0000\u0000\u1896\u02cf"+
		"\u0001\u0000\u0000\u0000\u1897\u1898\u0005\u00cf\u0000\u0000\u1898\u1899"+
		"\u0003\u0342\u01a1\u0000\u1899\u02d1\u0001\u0000\u0000\u0000\u189a\u189e"+
		"\u0005\u012c\u0000\u0000\u189b\u189d\u0003\u02d4\u016a\u0000\u189c\u189b"+
		"\u0001\u0000\u0000\u0000\u189d\u18a0\u0001\u0000\u0000\u0000\u189e\u189c"+
		"\u0001\u0000\u0000\u0000\u189e\u189f\u0001\u0000\u0000\u0000\u189f\u18a2"+
		"\u0001\u0000\u0000\u0000\u18a0\u189e\u0001\u0000\u0000\u0000\u18a1\u18a3"+
		"\u0003\u02d6\u016b\u0000\u18a2\u18a1\u0001\u0000\u0000\u0000\u18a2\u18a3"+
		"\u0001\u0000\u0000\u0000\u18a3\u18a7\u0001\u0000\u0000\u0000\u18a4\u18a6"+
		"\u0003\u02d8\u016c\u0000\u18a5\u18a4\u0001\u0000\u0000\u0000\u18a6\u18a9"+
		"\u0001\u0000\u0000\u0000\u18a7\u18a5\u0001\u0000\u0000\u0000\u18a7\u18a8"+
		"\u0001\u0000\u0000\u0000\u18a8\u18aa\u0001\u0000\u0000\u0000\u18a9\u18a7"+
		"\u0001\u0000\u0000\u0000\u18aa\u18ab\u0003\u02da\u016d\u0000\u18ab\u02d3"+
		"\u0001\u0000\u0000\u0000\u18ac\u18ad\u0007H\u0000\u0000\u18ad\u18b5\u0005"+
		"\u0135\u0000\u0000\u18ae\u18b2\u0005\u021e\u0000\u0000\u18af\u18b3\u0005"+
		"\u008a\u0000\u0000\u18b0\u18b1\u0005\u01de\u0000\u0000\u18b1\u18b3\u0005"+
		"\u01a0\u0000\u0000\u18b2\u18af\u0001\u0000\u0000\u0000\u18b2\u18b0\u0001"+
		"\u0000\u0000\u0000\u18b3\u18b5\u0001\u0000\u0000\u0000\u18b4\u18ac\u0001"+
		"\u0000\u0000\u0000\u18b4\u18ae\u0001\u0000\u0000\u0000\u18b5\u02d5\u0001"+
		"\u0000\u0000\u0000\u18b6\u18b7\u0005\u01b0\u0000\u0000\u18b7\u18b8\u0007"+
		"I\u0000\u0000\u18b8\u18b9\u0005\u01bd\u0000\u0000\u18b9\u02d7\u0001\u0000"+
		"\u0000\u0000\u18ba\u18bb\u0005\u01a0\u0000\u0000\u18bb\u18bc\u0003\u03de"+
		"\u01ef\u0000\u18bc\u18bd\u0005\u0162\u0000\u0000\u18bd\u18be\u0005\u0285"+
		"\u0000\u0000\u18be\u18bf\u0003\u0294\u014a\u0000\u18bf\u18c0\u0005\u0286"+
		"\u0000\u0000\u18c0\u18c4\u0003\u02dc\u016e\u0000\u18c1\u18c3\u0003\u02d4"+
		"\u016a\u0000\u18c2\u18c1\u0001\u0000\u0000\u0000\u18c3\u18c6\u0001\u0000"+
		"\u0000\u0000\u18c4\u18c2\u0001\u0000\u0000\u0000\u18c4\u18c5\u0001\u0000"+
		"\u0000\u0000\u18c5\u02d9\u0001\u0000\u0000\u0000\u18c6\u18c4\u0001\u0000"+
		"\u0000\u0000\u18c7\u18c8\u0005\u011a\u0000\u0000\u18c8\u18ca\u0003\u03e0"+
		"\u01f0\u0000\u18c9\u18c7\u0001\u0000\u0000\u0000\u18c9\u18ca\u0001\u0000"+
		"\u0000\u0000\u18ca\u18cb\u0001\u0000\u0000\u0000\u18cb\u18cf\u0003\u02dc"+
		"\u016e\u0000\u18cc\u18ce\u0003\u02d4\u016a\u0000\u18cd\u18cc\u0001\u0000"+
		"\u0000\u0000\u18ce\u18d1\u0001\u0000\u0000\u0000\u18cf\u18cd\u0001\u0000"+
		"\u0000\u0000\u18cf\u18d0\u0001\u0000\u0000\u0000\u18d0\u18d2\u0001\u0000"+
		"\u0000\u0000\u18d1\u18cf\u0001\u0000\u0000\u0000\u18d2\u18d3\u0003\u02e4"+
		"\u0172\u0000\u18d3\u02db\u0001\u0000\u0000\u0000\u18d4\u18d6\u0003\u02de"+
		"\u016f\u0000\u18d5\u18d4\u0001\u0000\u0000\u0000\u18d5\u18d6\u0001\u0000"+
		"\u0000\u0000\u18d6\u18d7\u0001\u0000\u0000\u0000\u18d7\u18d8\u0005\u008a"+
		"\u0000\u0000\u18d8\u18d9\u00053\u0000\u0000\u18d9\u18da\u0003\u02e0\u0170"+
		"\u0000\u18da\u18db\u0005\u0121\u0000\u0000\u18db\u18dc\u0003\u02e0\u0170"+
		"\u0000\u18dc\u02dd\u0001\u0000\u0000\u0000\u18dd\u18de\u0005\u0176\u0000"+
		"\u0000\u18de\u18df\u00053\u0000\u0000\u18df\u18e0\u0003\u02e0\u0170\u0000"+
		"\u18e0\u02df\u0001\u0000\u0000\u0000\u18e1\u18e2\u0005\u0285\u0000\u0000"+
		"\u18e2\u18e7\u0003\u02e2\u0171\u0000\u18e3\u18e4\u0005\u028b\u0000\u0000"+
		"\u18e4\u18e6\u0003\u02e2\u0171\u0000\u18e5\u18e3\u0001\u0000\u0000\u0000"+
		"\u18e6\u18e9\u0001\u0000\u0000\u0000\u18e7\u18e5\u0001\u0000\u0000\u0000"+
		"\u18e7\u18e8\u0001\u0000\u0000\u0000\u18e8\u18ea\u0001\u0000\u0000\u0000"+
		"\u18e9\u18e7\u0001\u0000\u0000\u0000\u18ea\u18eb\u0005\u0286\u0000\u0000"+
		"\u18eb\u02e1\u0001\u0000\u0000\u0000\u18ec\u18ee\u0003\u0344\u01a2\u0000"+
		"\u18ed\u18ef\u0003\u03be\u01df\u0000\u18ee\u18ed\u0001\u0000\u0000\u0000"+
		"\u18ee\u18ef\u0001\u0000\u0000\u0000\u18ef\u02e3\u0001\u0000\u0000\u0000"+
		"\u18f0\u18f2\u0003\u02e6\u0173\u0000\u18f1\u18f0\u0001\u0000\u0000\u0000"+
		"\u18f1\u18f2\u0001\u0000\u0000\u0000\u18f2\u18f3\u0001\u0000\u0000\u0000"+
		"\u18f3\u18f4\u0005\u0285\u0000\u0000\u18f4\u18f9\u0003\u02e8\u0174\u0000"+
		"\u18f5\u18f6\u0005\u028b\u0000\u0000\u18f6\u18f8\u0003\u02e8\u0174\u0000"+
		"\u18f7\u18f5\u0001\u0000\u0000\u0000\u18f8\u18fb\u0001\u0000\u0000\u0000"+
		"\u18f9\u18f7\u0001\u0000\u0000\u0000\u18f9\u18fa\u0001\u0000\u0000\u0000"+
		"\u18fa\u18fc\u0001\u0000\u0000\u0000\u18fb\u18f9\u0001\u0000\u0000\u0000"+
		"\u18fc\u18fd\u0005\u0286\u0000\u0000\u18fd\u02e5\u0001\u0000\u0000\u0000"+
		"\u18fe\u1904\u0005\u01be\u0000\u0000\u18ff\u1905\u0005\u0224\u0000\u0000"+
		"\u1900\u1902\u0005\u0227\u0000\u0000\u1901\u1903\u0005\t\u0000\u0000\u1902"+
		"\u1901\u0001\u0000\u0000\u0000\u1902\u1903\u0001\u0000\u0000\u0000\u1903"+
		"\u1905\u0001\u0000\u0000\u0000\u1904\u18ff\u0001\u0000\u0000\u0000\u1904"+
		"\u1900\u0001\u0000\u0000\u0000\u1904\u1905\u0001\u0000\u0000\u0000\u1905"+
		"\u1908\u0001\u0000\u0000\u0000\u1906\u1907\u0007J\u0000\u0000\u1907\u1909"+
		"\u0005\u0169\u0000\u0000\u1908\u1906\u0001\u0000\u0000\u0000\u1908\u1909"+
		"\u0001\u0000\u0000\u0000\u1909\u190b\u0001\u0000\u0000\u0000\u190a\u190c"+
		"\u0003\u02ec\u0176\u0000\u190b\u190a\u0001\u0000\u0000\u0000\u190b\u190c"+
		"\u0001\u0000\u0000\u0000\u190c\u02e7\u0001\u0000\u0000\u0000\u190d\u1913"+
		"\u0005\u0224\u0000\u0000\u190e\u1910\u0005\u0227\u0000\u0000\u190f\u1911"+
		"\u0005\t\u0000\u0000\u1910\u190f\u0001\u0000\u0000\u0000\u1910\u1911\u0001"+
		"\u0000\u0000\u0000\u1911\u1913\u0001\u0000\u0000\u0000\u1912\u190d\u0001"+
		"\u0000\u0000\u0000\u1912\u190e\u0001\u0000\u0000\u0000\u1912\u1913\u0001"+
		"\u0000\u0000\u0000\u1913\u1914\u0001\u0000\u0000\u0000\u1914\u1916\u0003"+
		"\u02ea\u0175\u0000\u1915\u1917\u0003\u02f0\u0178\u0000\u1916\u1915\u0001"+
		"\u0000\u0000\u0000\u1916\u1917\u0001\u0000\u0000\u0000\u1917\u1918\u0001"+
		"\u0000\u0000\u0000\u1918\u1919\u0005\u029c\u0000\u0000\u1919\u191a\u0003"+
		"\u0344\u01a2\u0000\u191a\u02e9\u0001\u0000\u0000\u0000\u191b\u191c\u0003"+
		"\u035a\u01ad\u0000\u191c\u02eb\u0001\u0000\u0000\u0000\u191d\u191e\u0005"+
		"\u00f7\u0000\u0000\u191e\u191f\u0005\u0285\u0000\u0000\u191f\u1920\u0003"+
		"\u0344\u01a2\u0000\u1920\u1922\u0005\u0286\u0000\u0000\u1921\u1923\u0003"+
		"\u02ee\u0177\u0000\u1922\u1921\u0001\u0000\u0000\u0000\u1922\u1923\u0001"+
		"\u0000\u0000\u0000\u1923\u02ed\u0001\u0000\u0000\u0000\u1924\u1925\u0005"+
		"\u0221\u0000\u0000\u1925\u1926\u0005\u0285\u0000\u0000\u1926\u1927\u0003"+
		"\u0342\u01a1\u0000\u1927\u1928\u0005\u0286\u0000\u0000\u1928\u02ef\u0001"+
		"\u0000\u0000\u0000\u1929\u192b\u0005\u0169\u0000\u0000\u192a\u192c\u0005"+
		"\u01db\u0000\u0000\u192b\u192a\u0001\u0000\u0000\u0000\u192b\u192c\u0001"+
		"\u0000\u0000\u0000\u192c\u192d\u0001\u0000\u0000\u0000\u192d\u192e\u0005"+
		"3\u0000\u0000\u192e\u1933\u0003\u02f2\u0179\u0000\u192f\u1930\u0005\u028b"+
		"\u0000\u0000\u1930\u1932\u0003\u02f2\u0179\u0000\u1931\u192f\u0001\u0000"+
		"\u0000\u0000\u1932\u1935\u0001\u0000\u0000\u0000\u1933\u1931\u0001\u0000"+
		"\u0000\u0000\u1933\u1934\u0001\u0000\u0000\u0000\u1934\u02f1\u0001\u0000"+
		"\u0000\u0000\u1935\u1933\u0001\u0000\u0000\u0000\u1936\u1938\u0003\u0344"+
		"\u01a2\u0000\u1937\u1939\u0007\u000e\u0000\u0000\u1938\u1937\u0001\u0000"+
		"\u0000\u0000\u1938\u1939\u0001\u0000\u0000\u0000\u1939\u193c\u0001\u0000"+
		"\u0000\u0000\u193a\u193b\u0005\u0156\u0000\u0000\u193b\u193d\u0007K\u0000"+
		"\u0000\u193c\u193a\u0001\u0000\u0000\u0000\u193c\u193d\u0001\u0000\u0000"+
		"\u0000\u193d\u02f3\u0001\u0000\u0000\u0000\u193e\u193f\u0005\u00bd\u0000"+
		"\u0000\u193f\u1941\u0005\u0224\u0000\u0000\u1940\u1942\u0003\u02f6\u017b"+
		"\u0000\u1941\u1940\u0001\u0000\u0000\u0000\u1941\u1942\u0001\u0000\u0000"+
		"\u0000\u1942\u1944\u0001\u0000\u0000\u0000\u1943\u1945\u0003\u02f8\u017c"+
		"\u0000\u1944\u1943\u0001\u0000\u0000\u0000\u1944\u1945\u0001\u0000\u0000"+
		"\u0000\u1945\u02f5\u0001\u0000\u0000\u0000\u1946\u1947\u0005\u015c\u0000"+
		"\u0000\u1947\u194c\u0003\u0402\u0201\u0000\u1948\u1949\u0005\u028b\u0000"+
		"\u0000\u1949\u194b\u0003\u0402\u0201\u0000\u194a\u1948\u0001\u0000\u0000"+
		"\u0000\u194b\u194e\u0001\u0000\u0000\u0000\u194c\u194a\u0001\u0000\u0000"+
		"\u0000\u194c\u194d\u0001\u0000\u0000\u0000\u194d\u02f7\u0001\u0000\u0000"+
		"\u0000\u194e\u194c\u0001\u0000\u0000\u0000\u194f\u1950\u0005\u01e0\u0000"+
		"\u0000\u1950\u1955\u0005\u0111\u0000\u0000\u1951\u1955\u0005\u0153\u0000"+
		"\u0000\u1952\u1953\u0005\u023a\u0000\u0000\u1953\u1955\u0003\u0344\u01a2"+
		"\u0000\u1954\u194f\u0001\u0000\u0000\u0000\u1954\u1951\u0001\u0000\u0000"+
		"\u0000\u1954\u1952\u0001\u0000\u0000\u0000\u1955\u02f9\u0001\u0000\u0000"+
		"\u0000\u1956\u1957\u0005\u010a\u0000\u0000\u1957\u1958\u0003\u0344\u01a2"+
		"\u0000\u1958\u02fb\u0001\u0000\u0000\u0000\u1959\u195a\u0005\u0224\u0000"+
		"\u0000\u195a\u195b\u0003\u032a\u0195\u0000\u195b\u195d\u0003\u02fe\u017f"+
		"\u0000\u195c\u195e\u0003\u029c\u014e\u0000\u195d\u195c\u0001\u0000\u0000"+
		"\u0000\u195d\u195e\u0001\u0000\u0000\u0000\u195e\u1960\u0001\u0000\u0000"+
		"\u0000\u195f\u1961\u0003\u03c2\u01e1\u0000\u1960\u195f\u0001\u0000\u0000"+
		"\u0000\u1960\u1961\u0001\u0000\u0000\u0000\u1961\u1963\u0001\u0000\u0000"+
		"\u0000\u1962\u1964\u0003\u032c\u0196\u0000\u1963\u1962\u0001\u0000\u0000"+
		"\u0000\u1963\u1964\u0001\u0000\u0000\u0000\u1964\u1966\u0001\u0000\u0000"+
		"\u0000\u1965\u1967\u0003\u032e\u0197\u0000\u1966\u1965\u0001\u0000\u0000"+
		"\u0000\u1966\u1967\u0001\u0000\u0000\u0000\u1967\u02fd\u0001\u0000\u0000"+
		"\u0000\u1968\u1978\u0005\u01d4\u0000\u0000\u1969\u196e\u0003\u0300\u0180"+
		"\u0000\u196a\u196b\u0005\u028b\u0000\u0000\u196b\u196d\u0003\u0300\u0180"+
		"\u0000\u196c\u196a\u0001\u0000\u0000\u0000\u196d\u1970\u0001\u0000\u0000"+
		"\u0000\u196e\u196c\u0001\u0000\u0000\u0000\u196e\u196f\u0001\u0000\u0000"+
		"\u0000\u196f\u1979\u0001\u0000\u0000\u0000\u1970\u196e\u0001\u0000\u0000"+
		"\u0000\u1971\u1972\u0005\u022c\u0000\u0000\u1972\u1973\u0005\u0285\u0000"+
		"\u0000\u1973\u1974\u0003\u042e\u0217\u0000\u1974\u1975\u0005\u0286\u0000"+
		"\u0000\u1975\u1976\u0005\u029c\u0000\u0000\u1976\u1977\u0003\u0344\u01a2"+
		"\u0000\u1977\u1979\u0001\u0000\u0000\u0000\u1978\u1969\u0001\u0000\u0000"+
		"\u0000\u1978\u1971\u0001\u0000\u0000\u0000\u1979\u02ff\u0001\u0000\u0000"+
		"\u0000\u197a\u197b\u0003\u0402\u0201\u0000\u197b\u197c\u0005\u029c\u0000"+
		"\u0000\u197c\u197d\u0003\u0344\u01a2\u0000\u197d\u1983\u0001\u0000\u0000"+
		"\u0000\u197e\u197f\u0003\u00aeW\u0000\u197f\u1980\u0005\u029c\u0000\u0000"+
		"\u1980\u1981\u0003\u0294\u014a\u0000\u1981\u1983\u0001\u0000\u0000\u0000"+
		"\u1982\u197a\u0001\u0000\u0000\u0000\u1982\u197e\u0001\u0000\u0000\u0000"+
		"\u1983\u0301\u0001\u0000\u0000\u0000\u1984\u1986\u0005\u0085\u0000\u0000"+
		"\u1985\u1987\u0005\u00c4\u0000\u0000\u1986\u1985\u0001\u0000\u0000\u0000"+
		"\u1986\u1987\u0001\u0000\u0000\u0000\u1987\u1988\u0001\u0000\u0000\u0000"+
		"\u1988\u198a\u0003\u032a\u0195\u0000\u1989\u198b\u0003\u03c2\u01e1\u0000"+
		"\u198a\u1989\u0001\u0000\u0000\u0000\u198a\u198b\u0001\u0000\u0000\u0000"+
		"\u198b\u198d\u0001\u0000\u0000\u0000\u198c\u198e\u0003\u032c\u0196\u0000"+
		"\u198d\u198c\u0001\u0000\u0000\u0000\u198d\u198e\u0001\u0000\u0000\u0000"+
		"\u198e\u1990\u0001\u0000\u0000\u0000\u198f\u1991\u0003\u032e\u0197\u0000"+
		"\u1990\u198f\u0001\u0000\u0000\u0000\u1990\u1991\u0001\u0000\u0000\u0000"+
		"\u1991\u0303\u0001\u0000\u0000\u0000\u1992\u1995\u0005\u00ea\u0000\u0000"+
		"\u1993\u1996\u0003\u0306\u0183\u0000\u1994\u1996\u0003\u0308\u0184\u0000"+
		"\u1995\u1993\u0001\u0000\u0000\u0000\u1995\u1994\u0001\u0000\u0000\u0000"+
		"\u1996\u0305\u0001\u0000\u0000\u0000\u1997\u199d\u0003\u0312\u0189\u0000"+
		"\u1998\u199a\u0003\u0314\u018a\u0000\u1999\u199b\u0003\u032c\u0196\u0000"+
		"\u199a\u1999\u0001\u0000\u0000\u0000\u199a\u199b\u0001\u0000\u0000\u0000"+
		"\u199b\u199e\u0001\u0000\u0000\u0000\u199c\u199e\u0003\u028a\u0145\u0000"+
		"\u199d\u1998\u0001\u0000\u0000\u0000\u199d\u199c\u0001\u0000\u0000\u0000"+
		"\u199e\u19a0\u0001\u0000\u0000\u0000\u199f\u19a1\u0003\u032e\u0197\u0000"+
		"\u19a0\u199f\u0001\u0000\u0000\u0000\u19a0\u19a1\u0001\u0000\u0000\u0000"+
		"\u19a1\u0307\u0001\u0000\u0000\u0000\u19a2\u19a4\u0005\t\u0000\u0000\u19a3"+
		"\u19a5\u0003\u030a\u0185\u0000\u19a4\u19a3\u0001\u0000\u0000\u0000\u19a5"+
		"\u19a6\u0001\u0000\u0000\u0000\u19a6\u19a4\u0001\u0000\u0000\u0000\u19a6"+
		"\u19a7\u0001\u0000\u0000\u0000\u19a7\u19aa\u0001\u0000\u0000\u0000\u19a8"+
		"\u19aa\u0003\u030c\u0186\u0000\u19a9\u19a2\u0001\u0000\u0000\u0000\u19a9"+
		"\u19a8\u0001\u0000\u0000\u0000\u19aa\u19ab\u0001\u0000\u0000\u0000\u19ab"+
		"\u19ac\u0003\u028a\u0145\u0000\u19ac\u0309\u0001\u0000\u0000\u0000\u19ad"+
		"\u19af\u0003\u0312\u0189\u0000\u19ae\u19b0\u0003\u0314\u018a\u0000\u19af"+
		"\u19ae\u0001\u0000\u0000\u0000\u19af\u19b0\u0001\u0000\u0000\u0000\u19b0"+
		"\u19b2\u0001\u0000\u0000\u0000\u19b1\u19b3\u0003\u032e\u0197\u0000\u19b2"+
		"\u19b1\u0001\u0000\u0000\u0000\u19b2\u19b3\u0001\u0000\u0000\u0000\u19b3"+
		"\u030b\u0001\u0000\u0000\u0000\u19b4\u19b6\u0007L\u0000\u0000\u19b5\u19b4"+
		"\u0001\u0000\u0000\u0000\u19b5\u19b6\u0001\u0000\u0000\u0000\u19b6\u19b8"+
		"\u0001\u0000\u0000\u0000\u19b7\u19b9\u0003\u030e\u0187\u0000\u19b8\u19b7"+
		"\u0001\u0000\u0000\u0000\u19b9\u19ba\u0001\u0000\u0000\u0000\u19ba\u19b8"+
		"\u0001\u0000\u0000\u0000\u19ba\u19bb\u0001\u0000\u0000\u0000\u19bb\u19bd"+
		"\u0001\u0000\u0000\u0000\u19bc\u19be\u0003\u0310\u0188\u0000\u19bd\u19bc"+
		"\u0001\u0000\u0000\u0000\u19bd\u19be\u0001\u0000\u0000\u0000\u19be\u030d"+
		"\u0001\u0000\u0000\u0000\u19bf\u19c0\u0005\u023d\u0000\u0000\u19c0\u19c1"+
		"\u0003\u0342\u01a1\u0000\u19c1\u19c3\u0005\u0204\u0000\u0000\u19c2\u19c4"+
		"\u0003\u030a\u0185\u0000\u19c3\u19c2\u0001\u0000\u0000\u0000\u19c4\u19c5"+
		"\u0001\u0000\u0000\u0000\u19c5\u19c3\u0001\u0000\u0000\u0000\u19c5\u19c6"+
		"\u0001\u0000\u0000\u0000\u19c6\u030f\u0001\u0000\u0000\u0000\u19c7\u19c9"+
		"\u0005\u0096\u0000\u0000\u19c8\u19ca\u0003\u030a\u0185\u0000\u19c9\u19c8"+
		"\u0001\u0000\u0000\u0000\u19ca\u19cb\u0001\u0000\u0000\u0000\u19cb\u19c9"+
		"\u0001\u0000\u0000\u0000\u19cb\u19cc\u0001\u0000\u0000\u0000\u19cc\u0311"+
		"\u0001\u0000\u0000\u0000\u19cd\u19ce\u0005\u00f2\u0000\u0000\u19ce\u19d0"+
		"\u0003\u032a\u0195\u0000\u19cf\u19d1\u0003\u00aeW\u0000\u19d0\u19cf\u0001"+
		"\u0000\u0000\u0000\u19d0\u19d1\u0001\u0000\u0000\u0000\u19d1\u0313\u0001"+
		"\u0000\u0000\u0000\u19d2\u19d3\u0005\u022d\u0000\u0000\u19d3\u19d8\u0003"+
		"\u0340\u01a0\u0000\u19d4\u19d5\u0005\u028b\u0000\u0000\u19d5\u19d7\u0003"+
		"\u0340\u01a0\u0000\u19d6\u19d4\u0001\u0000\u0000\u0000\u19d7\u19da\u0001"+
		"\u0000\u0000\u0000\u19d8\u19d6\u0001\u0000\u0000\u0000\u19d8\u19d9\u0001"+
		"\u0000\u0000\u0000\u19d9\u0315\u0001\u0000\u0000\u0000\u19da\u19d8\u0001"+
		"\u0000\u0000\u0000\u19db\u19dc\u0005\u0124\u0000\u0000\u19dc\u19dd\u0005"+
		"\u00f2\u0000\u0000\u19dd\u19df\u0003\u0406\u0203\u0000\u19de\u19e0\u0003"+
		"\u03be\u01df\u0000\u19df\u19de\u0001\u0000\u0000\u0000\u19df\u19e0\u0001"+
		"\u0000\u0000\u0000\u19e0\u19e1\u0001\u0000\u0000\u0000\u19e1\u19e2\u0005"+
		"\u022a\u0000\u0000\u19e2\u19e3\u0003\u0320\u0190\u0000\u19e3\u19e4\u0005"+
		"\u0162\u0000\u0000\u19e4\u19e5\u0005\u0285\u0000\u0000\u19e5\u19e6\u0003"+
		"\u0342\u01a1\u0000\u19e6\u19ef\u0005\u0286\u0000\u0000\u19e7\u19e9\u0003"+
		"\u0318\u018c\u0000\u19e8\u19ea\u0003\u031e\u018f\u0000\u19e9\u19e8\u0001"+
		"\u0000\u0000\u0000\u19e9\u19ea\u0001\u0000\u0000\u0000\u19ea\u19f0\u0001"+
		"\u0000\u0000\u0000\u19eb\u19ed\u0003\u031e\u018f\u0000\u19ec\u19ee\u0003"+
		"\u0318\u018c\u0000\u19ed\u19ec\u0001\u0000\u0000\u0000\u19ed\u19ee\u0001"+
		"\u0000\u0000\u0000\u19ee\u19f0\u0001\u0000\u0000\u0000\u19ef\u19e7\u0001"+
		"\u0000\u0000\u0000\u19ef\u19eb\u0001\u0000\u0000\u0000\u19ef\u19f0\u0001"+
		"\u0000\u0000\u0000\u19f0\u19f2\u0001\u0000\u0000\u0000\u19f1\u19f3\u0003"+
		"\u032e\u0197\u0000\u19f2\u19f1\u0001\u0000\u0000\u0000\u19f2\u19f3\u0001"+
		"\u0000\u0000\u0000\u19f3\u0317\u0001\u0000\u0000\u0000\u19f4\u19f5\u0005"+
		"\u023d\u0000\u0000\u19f5\u19f6\u0005\u011e\u0000\u0000\u19f6\u19f7\u0005"+
		"\u0204\u0000\u0000\u19f7\u19f8\u0005\u0224\u0000\u0000\u19f8\u19f9\u0005"+
		"\u01d4\u0000\u0000\u19f9\u19fe\u0003\u031a\u018d\u0000\u19fa\u19fb\u0005"+
		"\u028b\u0000\u0000\u19fb\u19fd\u0003\u031a\u018d\u0000\u19fc\u19fa\u0001"+
		"\u0000\u0000\u0000\u19fd\u1a00\u0001\u0000\u0000\u0000\u19fe\u19fc\u0001"+
		"\u0000\u0000\u0000\u19fe\u19ff\u0001\u0000\u0000\u0000\u19ff\u1a02\u0001"+
		"\u0000\u0000\u0000\u1a00\u19fe\u0001\u0000\u0000\u0000\u1a01\u1a03\u0003"+
		"\u03c2\u01e1\u0000\u1a02\u1a01\u0001\u0000\u0000\u0000\u1a02\u1a03\u0001"+
		"\u0000\u0000\u0000\u1a03\u1a05\u0001\u0000\u0000\u0000\u1a04\u1a06\u0003"+
		"\u031c\u018e\u0000\u1a05\u1a04\u0001\u0000\u0000\u0000\u1a05\u1a06\u0001"+
		"\u0000\u0000\u0000\u1a06\u0319\u0001\u0000\u0000\u0000\u1a07\u1a08\u0003"+
		"\u0402\u0201\u0000\u1a08\u1a09\u0005\u029c\u0000\u0000\u1a09\u1a0a\u0003"+
		"\u0344\u01a2\u0000\u1a0a\u031b\u0001\u0000\u0000\u0000\u1a0b\u1a0c\u0005"+
		"\u0085\u0000\u0000\u1a0c\u1a0d\u0003\u03c2\u01e1\u0000\u1a0d\u031d\u0001"+
		"\u0000\u0000\u0000\u1a0e\u1a0f\u0005\u023d\u0000\u0000\u1a0f\u1a10\u0005"+
		"\u0151\u0000\u0000\u1a10\u1a11\u0005\u011e\u0000\u0000\u1a11\u1a12\u0005"+
		"\u0204\u0000\u0000\u1a12\u1a14\u0005\u00ea\u0000\u0000\u1a13\u1a15\u0003"+
		"\u00aeW\u0000\u1a14\u1a13\u0001\u0000\u0000\u0000\u1a14\u1a15\u0001\u0000"+
		"\u0000\u0000\u1a15\u1a16\u0001\u0000\u0000\u0000\u1a16\u1a17\u0005\u022d"+
		"\u0000\u0000\u1a17\u1a19\u0003\u0340\u01a0\u0000\u1a18\u1a1a\u0003\u03c2"+
		"\u01e1\u0000\u1a19\u1a18\u0001\u0000\u0000\u0000\u1a19\u1a1a\u0001\u0000"+
		"\u0000\u0000\u1a1a\u031f\u0001\u0000\u0000\u0000\u1a1b\u1a21\u0003\u0406"+
		"\u0203\u0000\u1a1c\u1a1d\u0005\u0285\u0000\u0000\u1a1d\u1a1e\u0003\u028a"+
		"\u0145\u0000\u1a1e\u1a1f\u0005\u0286\u0000\u0000\u1a1f\u1a21\u0001\u0000"+
		"\u0000\u0000\u1a20\u1a1b\u0001\u0000\u0000\u0000\u1a20\u1a1c\u0001\u0000"+
		"\u0000\u0000\u1a21\u1a23\u0001\u0000\u0000\u0000\u1a22\u1a24\u0003\u03be"+
		"\u01df\u0000\u1a23\u1a22\u0001\u0000\u0000\u0000\u1a23\u1a24\u0001\u0000"+
		"\u0000\u0000\u1a24\u0321\u0001\u0000\u0000\u0000\u1a25\u1a26\u0005\u0110"+
		"\u0000\u0000\u1a26\u1a27\u0005\u01fd\u0000\u0000\u1a27\u1a2c\u0003\u0326"+
		"\u0193\u0000\u1a28\u1a29\u0005\u028b\u0000\u0000\u1a29\u1a2b\u0003\u0326"+
		"\u0193\u0000\u1a2a\u1a28\u0001\u0000\u0000\u0000\u1a2b\u1a2e\u0001\u0000"+
		"\u0000\u0000\u1a2c\u1a2a\u0001\u0000\u0000\u0000\u1a2c\u1a2d\u0001\u0000"+
		"\u0000\u0000\u1a2d\u1a2f\u0001\u0000\u0000\u0000\u1a2e\u1a2c\u0001\u0000"+
		"\u0000\u0000\u1a2f\u1a30\u0005\u00d9\u0000\u0000\u1a30\u1a31\u0003\u0328"+
		"\u0194\u0000\u1a31\u1a33\u0005\u012b\u0000\u0000\u1a32\u1a34\u0003\u0324"+
		"\u0192\u0000\u1a33\u1a32\u0001\u0000\u0000\u0000\u1a33\u1a34\u0001\u0000"+
		"\u0000\u0000\u1a34\u0323\u0001\u0000\u0000\u0000\u1a35\u1a36\u0005\u023a"+
		"\u0000\u0000\u1a36\u1a39\u0003\u0344\u01a2\u0000\u1a37\u1a39\u0005\u0153"+
		"\u0000\u0000\u1a38\u1a35\u0001\u0000\u0000\u0000\u1a38\u1a37\u0001\u0000"+
		"\u0000\u0000\u1a39\u0325\u0001\u0000\u0000\u0000\u1a3a\u1a3c\u0003\u0406"+
		"\u0203\u0000\u1a3b\u1a3d\u0003\u03ba\u01dd\u0000\u1a3c\u1a3b\u0001\u0000"+
		"\u0000\u0000\u1a3c\u1a3d\u0001\u0000\u0000\u0000\u1a3d\u0327\u0001\u0000"+
		"\u0000\u0000\u1a3e\u1a3f\u0005\u01ba\u0000\u0000\u1a3f\u1a4b\u0005\u01d7"+
		"\u0000\u0000\u1a40\u1a41\u0005\u01ba\u0000\u0000\u1a41\u1a4b\u0005\u00a8"+
		"\u0000\u0000\u1a42\u1a44\u0005\u01d7\u0000\u0000\u1a43\u1a45\u0005\u0224"+
		"\u0000\u0000\u1a44\u1a43\u0001\u0000\u0000\u0000\u1a44\u1a45\u0001\u0000"+
		"\u0000\u0000\u1a45\u1a4b\u0001\u0000\u0000\u0000\u1a46\u1a47\u0005\u01d7"+
		"\u0000\u0000\u1a47\u1a48\u0005\u01ba\u0000\u0000\u1a48\u1a4b\u0005\u00a8"+
		"\u0000\u0000\u1a49\u1a4b\u0005\u00a8\u0000\u0000\u1a4a\u1a3e\u0001\u0000"+
		"\u0000\u0000\u1a4a\u1a40\u0001\u0000\u0000\u0000\u1a4a\u1a42\u0001\u0000"+
		"\u0000\u0000\u1a4a\u1a46\u0001\u0000\u0000\u0000\u1a4a\u1a49\u0001\u0000"+
		"\u0000\u0000\u1a4b\u0329\u0001\u0000\u0000\u0000\u1a4c\u1a53\u0003\u0334"+
		"\u019a\u0000\u1a4d\u1a4e\u0005\u0163\u0000\u0000\u1a4e\u1a4f\u0005\u0285"+
		"\u0000\u0000\u1a4f\u1a50\u0003\u0334\u019a\u0000\u1a50\u1a51\u0005\u0286"+
		"\u0000\u0000\u1a51\u1a53\u0001\u0000\u0000\u0000\u1a52\u1a4c\u0001\u0000"+
		"\u0000\u0000\u1a52\u1a4d\u0001\u0000\u0000\u0000\u1a53\u1a55\u0001\u0000"+
		"\u0000\u0000\u1a54\u1a56\u0003\u03be\u01df\u0000\u1a55\u1a54\u0001\u0000"+
		"\u0000\u0000\u1a55\u1a56\u0001\u0000\u0000\u0000\u1a56\u032b\u0001\u0000"+
		"\u0000\u0000\u1a57\u1a58\u0007;\u0000\u0000\u1a58\u1a5d\u0003\u0344\u01a2"+
		"\u0000\u1a59\u1a5a\u0005\u028b\u0000\u0000\u1a5a\u1a5c\u0003\u0344\u01a2"+
		"\u0000\u1a5b\u1a59\u0001\u0000\u0000\u0000\u1a5c\u1a5f\u0001\u0000\u0000"+
		"\u0000\u1a5d\u1a5b\u0001\u0000\u0000\u0000\u1a5d\u1a5e\u0001\u0000\u0000"+
		"\u0000\u1a5e\u1a60\u0001\u0000\u0000\u0000\u1a5f\u1a5d\u0001\u0000\u0000"+
		"\u0000\u1a60\u1a61\u0003\u03c6\u01e3\u0000\u1a61\u032d\u0001\u0000\u0000"+
		"\u0000\u1a62\u1a63\u0005\u0112\u0000\u0000\u1a63\u1a65\u0005\u00a0\u0000"+
		"\u0000\u1a64\u1a66\u0003\u0330\u0198\u0000\u1a65\u1a64\u0001\u0000\u0000"+
		"\u0000\u1a65\u1a66\u0001\u0000\u0000\u0000\u1a66\u1a68\u0001\u0000\u0000"+
		"\u0000\u1a67\u1a69\u0003\u0344\u01a2\u0000\u1a68\u1a67\u0001\u0000\u0000"+
		"\u0000\u1a68\u1a69\u0001\u0000\u0000\u0000\u1a69\u1a6b\u0001\u0000\u0000"+
		"\u0000\u1a6a\u1a6c\u0003\u0332\u0199\u0000\u1a6b\u1a6a\u0001\u0000\u0000"+
		"\u0000\u1a6b\u1a6c\u0001\u0000\u0000\u0000\u1a6c\u032f\u0001\u0000\u0000"+
		"\u0000\u1a6d\u1a6e\u0005\u00f2\u0000\u0000\u1a6e\u1a6f\u0003\u0406\u0203"+
		"\u0000\u1a6f\u0331\u0001\u0000\u0000\u0000\u1a70\u1a71\u0005\u01a4\u0000"+
		"\u0000\u1a71\u1a74\u0005\u010a\u0000\u0000\u1a72\u1a75\u0005\u021f\u0000"+
		"\u0000\u1a73\u1a75\u0003\u0344\u01a2\u0000\u1a74\u1a72\u0001\u0000\u0000"+
		"\u0000\u1a74\u1a73\u0001\u0000\u0000\u0000\u1a75\u0333\u0001\u0000\u0000"+
		"\u0000\u1a76\u1a83\u0003\u0336\u019b\u0000\u1a77\u1a78\u0005\u0285\u0000"+
		"\u0000\u1a78\u1a7a\u0003\u028a\u0145\u0000\u1a79\u1a7b\u0003\u0338\u019c"+
		"\u0000\u1a7a\u1a79\u0001\u0000\u0000\u0000\u1a7a\u1a7b\u0001\u0000\u0000"+
		"\u0000\u1a7b\u1a7c\u0001\u0000\u0000\u0000\u1a7c\u1a7d\u0005\u0286\u0000"+
		"\u0000\u1a7d\u1a83\u0001\u0000\u0000\u0000\u1a7e\u1a80\u0003\u0406\u0203"+
		"\u0000\u1a7f\u1a81\u0003\u033a\u019d\u0000\u1a80\u1a7f\u0001\u0000\u0000"+
		"\u0000\u1a80\u1a81\u0001\u0000\u0000\u0000\u1a81\u1a83\u0001\u0000\u0000"+
		"\u0000\u1a82\u1a76\u0001\u0000\u0000\u0000\u1a82\u1a77\u0001\u0000\u0000"+
		"\u0000\u1a82\u1a7e\u0001\u0000\u0000\u0000\u1a83\u0335\u0001\u0000\u0000"+
		"\u0000\u1a84\u1a91\u0007M\u0000\u0000\u1a85\u1a86\u0005\u0285\u0000\u0000"+
		"\u1a86\u1a87\u0003\u0294\u014a\u0000\u1a87\u1a88\u0005\u0286\u0000\u0000"+
		"\u1a88\u1a92\u0001\u0000\u0000\u0000\u1a89\u1a8a\u0005\u0285\u0000\u0000"+
		"\u1a8a\u1a8b\u0003\u0344\u01a2\u0000\u1a8b\u1a8f\u0005\u0286\u0000\u0000"+
		"\u1a8c\u1a8d\u0005\u0285\u0000\u0000\u1a8d\u1a8e\u0005\u0289\u0000\u0000"+
		"\u1a8e\u1a90\u0005\u0286\u0000\u0000\u1a8f\u1a8c\u0001\u0000\u0000\u0000"+
		"\u1a8f\u1a90\u0001\u0000\u0000\u0000\u1a90\u1a92\u0001\u0000\u0000\u0000"+
		"\u1a91\u1a85\u0001\u0000\u0000\u0000\u1a91\u1a89\u0001\u0000\u0000\u0000"+
		"\u1a92\u0337\u0001\u0000\u0000\u0000\u1a93\u1a9c\u0005\u0241\u0000\u0000"+
		"\u1a94\u1a95\u0005\u0197\u0000\u0000\u1a95\u1a9d\u0005\u0163\u0000\u0000"+
		"\u1a96\u1a97\u0005?\u0000\u0000\u1a97\u1a9a\u0005\u0166\u0000\u0000\u1a98"+
		"\u1a99\u0005X\u0000\u0000\u1a99\u1a9b\u0003\u03e6\u01f3\u0000\u1a9a\u1a98"+
		"\u0001\u0000\u0000\u0000\u1a9a\u1a9b\u0001\u0000\u0000\u0000\u1a9b\u1a9d"+
		"\u0001\u0000\u0000\u0000\u1a9c\u1a94\u0001\u0000\u0000\u0000\u1a9c\u1a96"+
		"\u0001\u0000\u0000\u0000\u1a9d\u0339\u0001\u0000\u0000\u0000\u1a9e\u1aa0"+
		"\u0005\u01c0\u0000\u0000\u1a9f\u1aa1\u0005-\u0000\u0000\u1aa0\u1a9f\u0001"+
		"\u0000\u0000\u0000\u1aa0\u1aa1\u0001\u0000\u0000\u0000\u1aa1\u1aa2\u0001"+
		"\u0000\u0000\u0000\u1aa2\u1aa3\u0005\u0285\u0000\u0000\u1aa3\u1aa6\u0003"+
		"\u0344\u01a2\u0000\u1aa4\u1aa5\u0005\u028b\u0000\u0000\u1aa5\u1aa7\u0003"+
		"\u0344\u01a2\u0000\u1aa6\u1aa4\u0001\u0000\u0000\u0000\u1aa6\u1aa7\u0001"+
		"\u0000\u0000\u0000\u1aa7\u1aa8\u0001\u0000\u0000\u0000\u1aa8\u1aaa\u0005"+
		"\u0286\u0000\u0000\u1aa9\u1aab\u0003\u033c\u019e\u0000\u1aaa\u1aa9\u0001"+
		"\u0000\u0000\u0000\u1aaa\u1aab\u0001\u0000\u0000\u0000\u1aab\u033b\u0001"+
		"\u0000\u0000\u0000\u1aac\u1aad\u0005\u01ca\u0000\u0000\u1aad\u1aae\u0005"+
		"\u0285\u0000\u0000\u1aae\u1aaf\u0003\u0344\u01a2\u0000\u1aaf\u1ab0\u0005"+
		"\u0286\u0000\u0000\u1ab0\u033d\u0001\u0000\u0000\u0000\u1ab1\u1ab2\u0005"+
		"k\u0000\u0000\u1ab2\u1ab3\u0005\u0285\u0000\u0000\u1ab3\u1ab4\u0003\u0294"+
		"\u014a\u0000\u1ab4\u1ab5\u0005\u0286\u0000\u0000\u1ab5\u033f\u0001\u0000"+
		"\u0000\u0000\u1ab6\u1ab8\u0005\u0285\u0000\u0000\u1ab7\u1ab9\u0003\u0344"+
		"\u01a2\u0000\u1ab8\u1ab7\u0001\u0000\u0000\u0000\u1ab8\u1ab9\u0001\u0000"+
		"\u0000\u0000\u1ab9\u1abe\u0001\u0000\u0000\u0000\u1aba\u1abb\u0005\u028b"+
		"\u0000\u0000\u1abb\u1abd\u0003\u0344\u01a2\u0000\u1abc\u1aba\u0001\u0000"+
		"\u0000\u0000\u1abd\u1ac0\u0001\u0000\u0000\u0000\u1abe\u1abc\u0001\u0000"+
		"\u0000\u0000\u1abe\u1abf\u0001\u0000\u0000\u0000\u1abf\u1ac1\u0001\u0000"+
		"\u0000\u0000\u1ac0\u1abe\u0001\u0000\u0000\u0000\u1ac1\u1ac2\u0005\u0286"+
		"\u0000\u0000\u1ac2\u0341\u0001\u0000\u0000\u0000\u1ac3\u1ac4\u0003\u0344"+
		"\u01a2\u0000\u1ac4\u0343\u0001\u0000\u0000\u0000\u1ac5\u1ac6\u0006\u01a2"+
		"\uffff\uffff\u0000\u1ac6\u1ac7\u0005k\u0000\u0000\u1ac7\u1ad0\u0003\u0348"+
		"\u01a4\u0000\u1ac8\u1ac9\u0005\u0151\u0000\u0000\u1ac9\u1ad0\u0003\u0344"+
		"\u01a2\u0005\u1aca\u1ad0\u0003\u0356\u01ab\u0000\u1acb\u1acc\u0005\u0285"+
		"\u0000\u0000\u1acc\u1acd\u0003\u0344\u01a2\u0000\u1acd\u1ace\u0005\u0286"+
		"\u0000\u0000\u1ace";
	private static final String _serializedATNSegment3 =
		"\u1ad0\u0001\u0000\u0000\u0000\u1acf\u1ac5\u0001\u0000\u0000\u0000\u1acf"+
		"\u1ac8\u0001\u0000\u0000\u0000\u1acf\u1aca\u0001\u0000\u0000\u0000\u1acf"+
		"\u1acb\u0001\u0000\u0000\u0000\u1ad0\u1b05\u0001\u0000\u0000\u0000\u1ad1"+
		"\u1ad3\n\n\u0000\u0000\u1ad2\u1ad4\u0005\u0151\u0000\u0000\u1ad3\u1ad2"+
		"\u0001\u0000\u0000\u0000\u1ad3\u1ad4\u0001\u0000\u0000\u0000\u1ad4\u1ad5"+
		"\u0001\u0000\u0000\u0000\u1ad5\u1ad6\u0005#\u0000\u0000\u1ad6\u1ad7\u0003"+
		"\u0344\u01a2\u0000\u1ad7\u1ad8\u0005\u000f\u0000\u0000\u1ad8\u1ad9\u0003"+
		"\u0344\u01a2\u000b\u1ad9\u1b04\u0001\u0000\u0000\u0000\u1ada\u1adb\n\b"+
		"\u0000\u0000\u1adb\u1adc\u0003\u034c\u01a6\u0000\u1adc\u1add\u0003\u0344"+
		"\u01a2\t\u1add\u1b04\u0001\u0000\u0000\u0000\u1ade\u1adf\n\u0004\u0000"+
		"\u0000\u1adf\u1ae0\u0005\u000f\u0000\u0000\u1ae0\u1b04\u0003\u0344\u01a2"+
		"\u0005\u1ae1\u1ae2\n\u0003\u0000\u0000\u1ae2\u1ae3\u0005\u0167\u0000\u0000"+
		"\u1ae3\u1b04\u0003\u0344\u01a2\u0004\u1ae4\u1ae5\n\f\u0000\u0000\u1ae5"+
		"\u1ae6\u0005\u00f5\u0000\u0000\u1ae6\u1b04\u0003\u0346\u01a3\u0000\u1ae7"+
		"\u1ae9\n\u000b\u0000\u0000\u1ae8\u1aea\u0005\u0151\u0000\u0000\u1ae9\u1ae8"+
		"\u0001\u0000\u0000\u0000\u1ae9\u1aea\u0001\u0000\u0000\u0000\u1aea\u1aeb"+
		"\u0001\u0000\u0000\u0000\u1aeb\u1af1\u0005\u00d9\u0000\u0000\u1aec\u1aed"+
		"\u0005\u0285\u0000\u0000\u1aed\u1aee\u0003\u0294\u014a\u0000\u1aee\u1aef"+
		"\u0005\u0286\u0000\u0000\u1aef\u1af2\u0001\u0000\u0000\u0000\u1af0\u1af2"+
		"\u0003\u0340\u01a0\u0000\u1af1\u1aec\u0001\u0000\u0000\u0000\u1af1\u1af0"+
		"\u0001\u0000\u0000\u0000\u1af2\u1b04\u0001\u0000\u0000\u0000\u1af3\u1af5"+
		"\n\t\u0000\u0000\u1af4\u1af6\u0005\u0151\u0000\u0000\u1af5\u1af4\u0001"+
		"\u0000\u0000\u0000\u1af5\u1af6\u0001\u0000\u0000\u0000\u1af6\u1af7\u0001"+
		"\u0000\u0000\u0000\u1af7\u1af8\u0003\u034e\u01a7\u0000\u1af8\u1afb\u0003"+
		"\u0344\u01a2\u0000\u1af9\u1afa\u0005\u00a1\u0000\u0000\u1afa\u1afc\u0003"+
		"\u0344\u01a2\u0000\u1afb\u1af9\u0001\u0000\u0000\u0000\u1afb\u1afc\u0001"+
		"\u0000\u0000\u0000\u1afc\u1b04\u0001\u0000\u0000\u0000\u1afd\u1afe\n\u0007"+
		"\u0000\u0000\u1afe\u1b00\u0007N\u0000\u0000\u1aff\u1b01\u0005\u015c\u0000"+
		"\u0000\u1b00\u1aff\u0001\u0000\u0000\u0000\u1b00\u1b01\u0001\u0000\u0000"+
		"\u0000\u1b01\u1b02\u0001\u0000\u0000\u0000\u1b02\u1b04\u0003\u0356\u01ab"+
		"\u0000\u1b03\u1ad1\u0001\u0000\u0000\u0000\u1b03\u1ada\u0001\u0000\u0000"+
		"\u0000\u1b03\u1ade\u0001\u0000\u0000\u0000\u1b03\u1ae1\u0001\u0000\u0000"+
		"\u0000\u1b03\u1ae4\u0001\u0000\u0000\u0000\u1b03\u1ae7\u0001\u0000\u0000"+
		"\u0000\u1b03\u1af3\u0001\u0000\u0000\u0000\u1b03\u1afd\u0001\u0000\u0000"+
		"\u0000\u1b04\u1b07\u0001\u0000\u0000\u0000\u1b05\u1b03\u0001\u0000\u0000"+
		"\u0000\u1b05\u1b06\u0001\u0000\u0000\u0000\u1b06\u0345\u0001\u0000\u0000"+
		"\u0000\u1b07\u1b05\u0001\u0000\u0000\u0000\u1b08\u1b0a\u0005\u0151\u0000"+
		"\u0000\u1b09\u1b08\u0001\u0000\u0000\u0000\u1b09\u1b0a\u0001\u0000\u0000"+
		"\u0000\u1b0a\u1b24\u0001\u0000\u0000\u0000\u1b0b\u1b25\u0005\u0155\u0000"+
		"\u0000\u1b0c\u1b25\u0005\u0132\u0000\u0000\u1b0d\u1b25\u0005\u018c\u0000"+
		"\u0000\u1b0e\u1b25\u0005\u00e3\u0000\u0000\u1b0f\u1b10\u0005\u0004\u0000"+
		"\u0000\u1b10\u1b25\u0005\u01d4\u0000\u0000\u1b11\u1b25\u0005\u0098\u0000"+
		"\u0000\u1b12\u1b14\u0005\u015c\u0000\u0000\u1b13\u1b15\u0005\u021a\u0000"+
		"\u0000\u1b14\u1b13\u0001\u0000\u0000\u0000\u1b14\u1b15\u0001\u0000\u0000"+
		"\u0000\u1b15\u1b16\u0001\u0000\u0000\u0000\u1b16\u1b18\u0005\u0285\u0000"+
		"\u0000\u1b17\u1b19\u0005\u0163\u0000\u0000\u1b18\u1b17\u0001\u0000\u0000"+
		"\u0000\u1b18\u1b19\u0001\u0000\u0000\u0000\u1b19\u1b1a\u0001\u0000\u0000"+
		"\u0000\u1b1a\u1b1f\u0003\u0418\u020c\u0000\u1b1b\u1b1c\u0005\u028b\u0000"+
		"\u0000\u1b1c\u1b1e\u0003\u0418\u020c\u0000\u1b1d\u1b1b\u0001\u0000\u0000"+
		"\u0000\u1b1e\u1b21\u0001\u0000\u0000\u0000\u1b1f\u1b1d\u0001\u0000\u0000"+
		"\u0000\u1b1f\u1b20\u0001\u0000\u0000\u0000\u1b20\u1b22\u0001\u0000\u0000"+
		"\u0000\u1b21\u1b1f\u0001\u0000\u0000\u0000\u1b22\u1b23\u0005\u0286\u0000"+
		"\u0000\u1b23\u1b25\u0001\u0000\u0000\u0000\u1b24\u1b0b\u0001\u0000\u0000"+
		"\u0000\u1b24\u1b0c\u0001\u0000\u0000\u0000\u1b24\u1b0d\u0001\u0000\u0000"+
		"\u0000\u1b24\u1b0e\u0001\u0000\u0000\u0000\u1b24\u1b0f\u0001\u0000\u0000"+
		"\u0000\u1b24\u1b11\u0001\u0000\u0000\u0000\u1b24\u1b12\u0001\u0000\u0000"+
		"\u0000\u1b25\u0347\u0001\u0000\u0000\u0000\u1b26\u1b27\u0005\u0285\u0000"+
		"\u0000\u1b27\u1b28\u0003\u0294\u014a\u0000\u1b28\u1b29\u0005\u0286\u0000"+
		"\u0000\u1b29\u0349\u0001\u0000\u0000\u0000\u1b2a\u1b2b\u0007N\u0000\u0000"+
		"\u1b2b\u034b\u0001\u0000\u0000\u0000\u1b2c\u1b33\u0005\u029c\u0000\u0000"+
		"\u1b2d\u1b33\u0003\u0432\u0219\u0000\u1b2e\u1b33\u0005\u0293\u0000\u0000"+
		"\u1b2f\u1b33\u0005\u0299\u0000\u0000\u1b30\u1b33\u0003\u0436\u021b\u0000"+
		"\u1b31\u1b33\u0003\u0434\u021a\u0000\u1b32\u1b2c\u0001\u0000\u0000\u0000"+
		"\u1b32\u1b2d\u0001\u0000\u0000\u0000\u1b32\u1b2e\u0001\u0000\u0000\u0000"+
		"\u1b32\u1b2f\u0001\u0000\u0000\u0000\u1b32\u1b30\u0001\u0000\u0000\u0000"+
		"\u1b32\u1b31\u0001\u0000\u0000\u0000\u1b33\u034d\u0001\u0000\u0000\u0000"+
		"\u1b34\u1b35\u0007O\u0000\u0000\u1b35\u034f\u0001\u0000\u0000\u0000\u1b36"+
		"\u1b37\u0005\u00a1\u0000\u0000\u1b37\u1b38\u0003\u0354\u01aa\u0000\u1b38"+
		"\u0351\u0001\u0000\u0000\u0000\u1b39\u1b3a\u0003\u0354\u01aa\u0000\u1b3a"+
		"\u1b3b\u0005\u000f\u0000\u0000\u1b3b\u1b3c\u0003\u0354\u01aa\u0000\u1b3c"+
		"\u0353\u0001\u0000\u0000\u0000\u1b3d\u1b3e\u0003\u0356\u01ab\u0000\u1b3e"+
		"\u0355\u0001\u0000\u0000\u0000\u1b3f\u1b40\u0006\u01ab\uffff\uffff\u0000"+
		"\u1b40\u1b41\u0005\u0285\u0000\u0000\u1b41\u1b42\u0003\u0356\u01ab\u0000"+
		"\u1b42\u1b43\u0005\u0286\u0000\u0000\u1b43\u1b46\u0001\u0000\u0000\u0000"+
		"\u1b44\u1b46\u0003\u0366\u01b3\u0000\u1b45\u1b3f\u0001\u0000\u0000\u0000"+
		"\u1b45\u1b44\u0001\u0000\u0000\u0000\u1b46\u1b60\u0001\u0000\u0000\u0000"+
		"\u1b47\u1b48\n\u0006\u0000\u0000\u1b48\u1b49\u0007P\u0000\u0000\u1b49"+
		"\u1b5f\u0003\u0356\u01ab\u0007\u1b4a\u1b4b\n\u0005\u0000\u0000\u1b4b\u1b4c"+
		"\u0007Q\u0000\u0000\u1b4c\u1b5f\u0003\u0356\u01ab\u0006\u1b4d\u1b4e\n"+
		"\u0004\u0000\u0000\u1b4e\u1b4f\u0005\u029a\u0000\u0000\u1b4f\u1b5f\u0003"+
		"\u0356\u01ab\u0005\u1b50\u1b51\n\u0003\u0000\u0000\u1b51\u1b52\u0005\u0002"+
		"\u0000\u0000\u1b52\u1b5f\u0003\u0356\u01ab\u0004\u1b53\u1b5c\n\u0007\u0000"+
		"\u0000\u1b54\u1b59\u0005\u0017\u0000\u0000\u1b55\u1b5a\u0005\u010c\u0000"+
		"\u0000\u1b56\u1b57\u0005\u0205\u0000\u0000\u1b57\u1b58\u0005\u025c\u0000"+
		"\u0000\u1b58\u1b5a\u0003\u0356\u01ab\u0000\u1b59\u1b55\u0001\u0000\u0000"+
		"\u0000\u1b59\u1b56\u0001\u0000\u0000\u0000\u1b5a\u1b5d\u0001\u0000\u0000"+
		"\u0000\u1b5b\u1b5d\u0003\u0358\u01ac\u0000\u1b5c\u1b54\u0001\u0000\u0000"+
		"\u0000\u1b5c\u1b5b\u0001\u0000\u0000\u0000\u1b5d\u1b5f\u0001\u0000\u0000"+
		"\u0000\u1b5e\u1b47\u0001\u0000\u0000\u0000\u1b5e\u1b4a\u0001\u0000\u0000"+
		"\u0000\u1b5e\u1b4d\u0001\u0000\u0000\u0000\u1b5e\u1b50\u0001\u0000\u0000"+
		"\u0000\u1b5e\u1b53\u0001\u0000\u0000\u0000\u1b5f\u1b62\u0001\u0000\u0000"+
		"\u0000\u1b60\u1b5e\u0001\u0000\u0000\u0000\u1b60\u1b61\u0001\u0000\u0000"+
		"\u0000\u1b61\u0357\u0001\u0000\u0000\u0000\u1b62\u1b60\u0001\u0000\u0000"+
		"\u0000\u1b63\u1b68\u0005r\u0000\u0000\u1b64\u1b65\u0005\u0285\u0000\u0000"+
		"\u1b65\u1b66\u0003\u0354\u01aa\u0000\u1b66\u1b67\u0005\u0286\u0000\u0000"+
		"\u1b67\u1b69\u0001\u0000\u0000\u0000\u1b68\u1b64\u0001\u0000\u0000\u0000"+
		"\u1b68\u1b69\u0001\u0000\u0000\u0000\u1b69\u1b6a\u0001\u0000\u0000\u0000"+
		"\u1b6a\u1b6b\u0005\u020e\u0000\u0000\u1b6b\u1b70\u0005\u01c8\u0000\u0000"+
		"\u1b6c\u1b6d\u0005\u0285\u0000\u0000\u1b6d\u1b6e\u0003\u0354\u01aa\u0000"+
		"\u1b6e\u1b6f\u0005\u0286\u0000\u0000\u1b6f\u1b71\u0001\u0000\u0000\u0000"+
		"\u1b70\u1b6c\u0001\u0000\u0000\u0000\u1b70\u1b71\u0001\u0000\u0000\u0000"+
		"\u1b71\u1b7c\u0001\u0000\u0000\u0000\u1b72\u1b77\u0005\u0259\u0000\u0000"+
		"\u1b73\u1b74\u0005\u0285\u0000\u0000\u1b74\u1b75\u0003\u0354\u01aa\u0000"+
		"\u1b75\u1b76\u0005\u0286\u0000\u0000\u1b76\u1b78\u0001\u0000\u0000\u0000"+
		"\u1b77\u1b73\u0001\u0000\u0000\u0000\u1b77\u1b78\u0001\u0000\u0000\u0000"+
		"\u1b78\u1b79\u0001\u0000\u0000\u0000\u1b79\u1b7a\u0005\u020e\u0000\u0000"+
		"\u1b7a\u1b7c\u0005\u012e\u0000\u0000\u1b7b\u1b63\u0001\u0000\u0000\u0000"+
		"\u1b7b\u1b72\u0001\u0000\u0000\u0000\u1b7c\u0359\u0001\u0000\u0000\u0000"+
		"\u1b7d\u1b7e\u0003\u0366\u01b3\u0000\u1b7e\u1b7f\u0005\u029d\u0000\u0000"+
		"\u1b7f\u1b80\u0003\u035c\u01ae\u0000\u1b80\u1b81\u0005\u029e\u0000\u0000"+
		"\u1b81\u035b\u0001\u0000\u0000\u0000\u1b82\u1b85\u0005\u0010\u0000\u0000"+
		"\u1b83\u1b85\u0003\u0344\u01a2\u0000\u1b84\u1b82\u0001\u0000\u0000\u0000"+
		"\u1b84\u1b83\u0001\u0000\u0000\u0000\u1b85\u1b8d\u0001\u0000\u0000\u0000"+
		"\u1b86\u1b89\u0005\u028b\u0000\u0000\u1b87\u1b8a\u0005\u0010\u0000\u0000"+
		"\u1b88\u1b8a\u0003\u0344\u01a2\u0000\u1b89\u1b87\u0001\u0000\u0000\u0000"+
		"\u1b89\u1b88\u0001\u0000\u0000\u0000\u1b8a\u1b8c\u0001\u0000\u0000\u0000"+
		"\u1b8b\u1b86\u0001\u0000\u0000\u0000\u1b8c\u1b8f\u0001\u0000\u0000\u0000"+
		"\u1b8d\u1b8b\u0001\u0000\u0000\u0000\u1b8d\u1b8e\u0001\u0000\u0000\u0000"+
		"\u1b8e\u1b9a\u0001\u0000\u0000\u0000\u1b8f\u1b8d\u0001\u0000\u0000\u0000"+
		"\u1b90\u1b95\u0003\u035e\u01af\u0000\u1b91\u1b92\u0005\u028b\u0000\u0000"+
		"\u1b92\u1b94\u0003\u035e\u01af\u0000\u1b93\u1b91\u0001\u0000\u0000\u0000"+
		"\u1b94\u1b97\u0001\u0000\u0000\u0000\u1b95\u1b93\u0001\u0000\u0000\u0000"+
		"\u1b95\u1b96\u0001\u0000\u0000\u0000\u1b96\u1b9a\u0001\u0000\u0000\u0000"+
		"\u1b97\u1b95\u0001\u0000\u0000\u0000\u1b98\u1b9a\u0003\u0364\u01b2\u0000"+
		"\u1b99\u1b84\u0001\u0000\u0000\u0000\u1b99\u1b90\u0001\u0000\u0000\u0000"+
		"\u1b99\u1b98\u0001\u0000\u0000\u0000\u1b9a\u035d\u0001\u0000\u0000\u0000"+
		"\u1b9b\u1b9c\u0005\u00bd\u0000\u0000\u1b9c\u1ba9\u0003\u0402\u0201\u0000"+
		"\u1b9d\u1b9e\u0005\u00d9\u0000\u0000\u1b9e\u1baa\u0003\u0340\u01a0\u0000"+
		"\u1b9f\u1ba1\u0003\u0360\u01b0\u0000\u1ba0\u1b9f\u0001\u0000\u0000\u0000"+
		"\u1ba0\u1ba1\u0001\u0000\u0000\u0000\u1ba1\u1ba2\u0001\u0000\u0000\u0000"+
		"\u1ba2\u1ba3\u0005\u00c4\u0000\u0000\u1ba3\u1ba4\u0003\u0344\u01a2\u0000"+
		"\u1ba4\u1ba5\u0005\u020e\u0000\u0000\u1ba5\u1ba6\u0003\u0344\u01a2\u0000"+
		"\u1ba6\u1ba7\u0003\u0362\u01b1\u0000\u1ba7\u1ba8\u0003\u0344\u01a2\u0000"+
		"\u1ba8\u1baa\u0001\u0000\u0000\u0000\u1ba9\u1b9d\u0001\u0000\u0000\u0000"+
		"\u1ba9\u1ba0\u0001\u0000\u0000\u0000\u1baa\u035f\u0001\u0000\u0000\u0000"+
		"\u1bab\u1bac\u0005\u0106\u0000\u0000\u1bac\u1bad\u0003\u0344\u01a2\u0000"+
		"\u1bad\u0361\u0001\u0000\u0000\u0000\u1bae\u1baf\u0007R\u0000\u0000\u1baf"+
		"\u0363\u0001\u0000\u0000\u0000\u1bb0\u1bb1\u0005\u00bd\u0000\u0000\u1bb1"+
		"\u1bb2\u0005\u0285\u0000\u0000\u1bb2\u1bb7\u0003\u0402\u0201\u0000\u1bb3"+
		"\u1bb4\u0005\u028b\u0000\u0000\u1bb4\u1bb6\u0003\u0402\u0201\u0000\u1bb5"+
		"\u1bb3\u0001\u0000\u0000\u0000\u1bb6\u1bb9\u0001\u0000\u0000\u0000\u1bb7"+
		"\u1bb5\u0001\u0000\u0000\u0000\u1bb7\u1bb8\u0001\u0000\u0000\u0000\u1bb8"+
		"\u1bba\u0001\u0000\u0000\u0000\u1bb9\u1bb7\u0001\u0000\u0000\u0000\u1bba"+
		"\u1bbb\u0005\u0286\u0000\u0000\u1bbb\u1bbc\u0005\u00d9\u0000\u0000\u1bbc"+
		"\u1bc9\u0005\u0285\u0000\u0000\u1bbd\u1bca\u0003\u0294\u014a\u0000\u1bbe"+
		"\u1bbf\u0005\u0285\u0000\u0000\u1bbf\u1bc4\u0003\u0340\u01a0\u0000\u1bc0"+
		"\u1bc1\u0005\u028b\u0000\u0000\u1bc1\u1bc3\u0003\u0340\u01a0\u0000\u1bc2"+
		"\u1bc0\u0001\u0000\u0000\u0000\u1bc3\u1bc6\u0001\u0000\u0000\u0000\u1bc4"+
		"\u1bc2\u0001\u0000\u0000\u0000\u1bc4\u1bc5\u0001\u0000\u0000\u0000\u1bc5"+
		"\u1bc7\u0001\u0000\u0000\u0000\u1bc6\u1bc4\u0001\u0000\u0000\u0000\u1bc7"+
		"\u1bc8\u0005\u0286\u0000\u0000\u1bc8\u1bca\u0001\u0000\u0000\u0000\u1bc9"+
		"\u1bbd\u0001\u0000\u0000\u0000\u1bc9\u1bbe\u0001\u0000\u0000\u0000\u1bca"+
		"\u1bcb\u0001\u0000\u0000\u0000\u1bcb\u1bcc\u0005\u0286\u0000\u0000\u1bcc"+
		"\u0365\u0001\u0000\u0000\u0000\u1bcd\u1bce\u0006\u01b3\uffff\uffff\u0000"+
		"\u1bce\u1bcf\u0007Q\u0000\u0000\u1bcf\u1bdf\u0003\u0366\u01b3\n\u1bd0"+
		"\u1bd1\u0005\u018f\u0000\u0000\u1bd1\u1bdf\u0003\u0366\u01b3\t\u1bd2\u1bd3"+
		"\u0005V\u0000\u0000\u1bd3\u1bdf\u0003\u0366\u01b3\b\u1bd4\u1bd5\u0005"+
		"\u013b\u0000\u0000\u1bd5\u1bdf\u0003\u0366\u01b3\u0007\u1bd6\u1bd7\u0005"+
		"\u008e\u0000\u0000\u1bd7\u1bdf\u0003\u0366\u01b3\u0006\u1bd8\u1bd9\u0005"+
		"\t\u0000\u0000\u1bd9\u1bdf\u0003\u0366\u01b3\u0005\u1bda\u1bdf\u0003\u0368"+
		"\u01b4\u0000\u1bdb\u1bdf\u0003\u037a\u01bd\u0000\u1bdc\u1bdf\u0003\u037c"+
		"\u01be\u0000\u1bdd\u1bdf\u0003\u0374\u01ba\u0000\u1bde\u1bcd\u0001\u0000"+
		"\u0000\u0000\u1bde\u1bd0\u0001\u0000\u0000\u0000\u1bde\u1bd2\u0001\u0000"+
		"\u0000\u0000\u1bde\u1bd4\u0001\u0000\u0000\u0000\u1bde\u1bd6\u0001\u0000"+
		"\u0000\u0000\u1bde\u1bd8\u0001\u0000\u0000\u0000\u1bde\u1bda\u0001\u0000"+
		"\u0000\u0000\u1bde\u1bdb\u0001\u0000\u0000\u0000\u1bde\u1bdc\u0001\u0000"+
		"\u0000\u0000\u1bde\u1bdd\u0001\u0000\u0000\u0000\u1bdf\u1be7\u0001\u0000"+
		"\u0000\u0000\u1be0\u1be1\n\u000b\u0000\u0000\u1be1\u1be2\u0005\u029d\u0000"+
		"\u0000\u1be2\u1be3\u0003\u035c\u01ae\u0000\u1be3\u1be4\u0005\u029e\u0000"+
		"\u0000\u1be4\u1be6\u0001\u0000\u0000\u0000\u1be5\u1be0\u0001\u0000\u0000"+
		"\u0000\u1be6\u1be9\u0001\u0000\u0000\u0000\u1be7\u1be5\u0001\u0000\u0000"+
		"\u0000\u1be7\u1be8\u0001\u0000\u0000\u0000\u1be8\u0367\u0001\u0000\u0000"+
		"\u0000\u1be9\u1be7\u0001\u0000\u0000\u0000\u1bea\u1bed\u0003\u036e\u01b7"+
		"\u0000\u1beb\u1bed\u0003\u036a\u01b5\u0000\u1bec\u1bea\u0001\u0000\u0000"+
		"\u0000\u1bec\u1beb\u0001\u0000\u0000\u0000\u1bed\u0369\u0001\u0000\u0000"+
		"\u0000\u1bee\u1bf0\u0003\u03e8\u01f4\u0000\u1bef\u1bee\u0001\u0000\u0000"+
		"\u0000\u1bef\u1bf0\u0001\u0000\u0000\u0000\u1bf0\u1bf1\u0001\u0000\u0000"+
		"\u0000\u1bf1\u1bf2\u0005:\u0000\u0000\u1bf2\u1bf4\u0003\u0374\u01ba\u0000"+
		"\u1bf3\u1bf5\u0003\u036c\u01b6\u0000\u1bf4\u1bf3\u0001\u0000\u0000\u0000"+
		"\u1bf5\u1bf6\u0001\u0000\u0000\u0000\u1bf6\u1bf4\u0001\u0000\u0000\u0000"+
		"\u1bf6\u1bf7\u0001\u0000\u0000\u0000\u1bf7\u1bf9\u0001\u0000\u0000\u0000"+
		"\u1bf8\u1bfa\u0003\u0372\u01b9\u0000\u1bf9\u1bf8\u0001\u0000\u0000\u0000"+
		"\u1bf9\u1bfa\u0001\u0000\u0000\u0000\u1bfa\u1bfb\u0001\u0000\u0000\u0000"+
		"\u1bfb\u1bfd\u0005\u009c\u0000\u0000\u1bfc\u1bfe\u0005:\u0000\u0000\u1bfd"+
		"\u1bfc\u0001\u0000\u0000\u0000\u1bfd\u1bfe\u0001\u0000\u0000\u0000\u1bfe"+
		"\u1c00\u0001\u0000\u0000\u0000\u1bff\u1c01\u0003\u03e8\u01f4\u0000\u1c00"+
		"\u1bff\u0001\u0000\u0000\u0000\u1c00\u1c01\u0001\u0000\u0000\u0000\u1c01"+
		"\u036b\u0001\u0000\u0000\u0000\u1c02\u1c03\u0005\u023d\u0000\u0000\u1c03"+
		"\u1c04\u0003\u0344\u01a2\u0000\u1c04\u1c07\u0005\u0204\u0000\u0000\u1c05"+
		"\u1c08\u0003\u0236\u011b\u0000\u1c06\u1c08\u0003\u0344\u01a2\u0000\u1c07"+
		"\u1c05\u0001\u0000\u0000\u0000\u1c07\u1c06\u0001\u0000\u0000\u0000\u1c08"+
		"\u036d\u0001\u0000\u0000\u0000\u1c09\u1c0b\u0003\u03e8\u01f4\u0000\u1c0a"+
		"\u1c09\u0001\u0000\u0000\u0000\u1c0a\u1c0b\u0001\u0000\u0000\u0000\u1c0b"+
		"\u1c0c\u0001\u0000\u0000\u0000\u1c0c\u1c0e\u0005:\u0000\u0000\u1c0d\u1c0f"+
		"\u0003\u0370\u01b8\u0000\u1c0e\u1c0d\u0001\u0000\u0000\u0000\u1c0f\u1c10"+
		"\u0001\u0000\u0000\u0000\u1c10\u1c0e\u0001\u0000\u0000\u0000\u1c10\u1c11"+
		"\u0001\u0000\u0000\u0000\u1c11\u1c13\u0001\u0000\u0000\u0000\u1c12\u1c14"+
		"\u0003\u0372\u01b9\u0000\u1c13\u1c12\u0001\u0000\u0000\u0000\u1c13\u1c14"+
		"\u0001\u0000\u0000\u0000\u1c14\u1c15\u0001\u0000\u0000\u0000\u1c15\u1c17"+
		"\u0005\u009c\u0000\u0000\u1c16\u1c18\u0005:\u0000\u0000\u1c17\u1c16\u0001"+
		"\u0000\u0000\u0000\u1c17\u1c18\u0001\u0000\u0000\u0000\u1c18\u1c1a\u0001"+
		"\u0000\u0000\u0000\u1c19\u1c1b\u0003\u03e8\u01f4\u0000\u1c1a\u1c19\u0001"+
		"\u0000\u0000\u0000\u1c1a\u1c1b\u0001\u0000\u0000\u0000\u1c1b\u036f\u0001"+
		"\u0000\u0000\u0000\u1c1c\u1c1d\u0005\u023d\u0000\u0000\u1c1d\u1c1e\u0003"+
		"\u0344\u01a2\u0000\u1c1e\u1c21\u0005\u0204\u0000\u0000\u1c1f\u1c22\u0003"+
		"\u0236\u011b\u0000\u1c20\u1c22\u0003\u0344\u01a2\u0000\u1c21\u1c1f\u0001"+
		"\u0000\u0000\u0000\u1c21\u1c20\u0001\u0000\u0000\u0000\u1c22\u0371\u0001"+
		"\u0000\u0000\u0000\u1c23\u1c26\u0005\u0096\u0000\u0000\u1c24\u1c27\u0003"+
		"\u0236\u011b\u0000\u1c25\u1c27\u0003\u0344\u01a2\u0000\u1c26\u1c24\u0001"+
		"\u0000\u0000\u0000\u1c26\u1c25\u0001\u0000\u0000\u0000\u1c27\u0373\u0001"+
		"\u0000\u0000\u0000\u1c28\u1c29\u0003\u0424\u0212\u0000\u1c29\u1c2a\u0003"+
		"\u043a\u021d\u0000\u1c2a\u1c3b\u0001\u0000\u0000\u0000\u1c2b\u1c3b\u0003"+
		"\u0420\u0210\u0000\u1c2c\u1c3b\u0003\u0426\u0213\u0000\u1c2d\u1c3b\u0003"+
		"@ \u0000\u1c2e\u1c3b\u0003\u0422\u0211\u0000\u1c2f\u1c30\u0005\u0285\u0000"+
		"\u0000\u1c30\u1c31\u0003\u0374\u01ba\u0000\u1c31\u1c32\u0005\u0286\u0000"+
		"\u0000\u1c32\u1c3b\u0001\u0000\u0000\u0000\u1c33\u1c34\u0005\u0285\u0000"+
		"\u0000\u1c34\u1c35\u0003\u0294\u014a\u0000\u1c35\u1c36\u0005\u0286\u0000"+
		"\u0000\u1c36\u1c39\u0001\u0000\u0000\u0000\u1c37\u1c39\u0003\u0340\u01a0"+
		"\u0000\u1c38\u1c33\u0001\u0000\u0000\u0000\u1c38\u1c37\u0001\u0000\u0000"+
		"\u0000\u1c39\u1c3b\u0001\u0000\u0000\u0000\u1c3a\u1c28\u0001\u0000\u0000"+
		"\u0000\u1c3a\u1c2b\u0001\u0000\u0000\u0000\u1c3a\u1c2c\u0001\u0000\u0000"+
		"\u0000\u1c3a\u1c2d\u0001\u0000\u0000\u0000\u1c3a\u1c2e\u0001\u0000\u0000"+
		"\u0000\u1c3a\u1c2f\u0001\u0000\u0000\u0000\u1c3a\u1c38\u0001\u0000\u0000"+
		"\u0000\u1c3b\u0375\u0001\u0000\u0000\u0000\u1c3c\u1c3e\u0003\u0344\u01a2"+
		"\u0000\u1c3d\u1c3f\u0003\u0378\u01bc\u0000\u1c3e\u1c3d\u0001\u0000\u0000"+
		"\u0000\u1c3e\u1c3f\u0001\u0000\u0000\u0000\u1c3f\u0377\u0001\u0000\u0000"+
		"\u0000\u1c40\u1c41\u0005\u028b\u0000\u0000\u1c41\u1c46\u0003\u0344\u01a2"+
		"\u0000\u1c42\u1c43\u0005\u028b\u0000\u0000\u1c43\u1c45\u0003\u0344\u01a2"+
		"\u0000\u1c44\u1c42\u0001\u0000\u0000\u0000\u1c45\u1c48\u0001\u0000\u0000"+
		"\u0000\u1c46\u1c44\u0001\u0000\u0000\u0000\u1c46\u1c47\u0001\u0000\u0000"+
		"\u0000\u1c47\u0379\u0001\u0000\u0000\u0000\u1c48\u1c46\u0001\u0000\u0000"+
		"\u0000\u1c49\u1c52\u0007S\u0000\u0000\u1c4a\u1c4b\u0005\u0285\u0000\u0000"+
		"\u1c4b\u1c4c\u0003\u0294\u014a\u0000\u1c4c\u1c4d\u0005\u0286\u0000\u0000"+
		"\u1c4d\u1c53\u0001\u0000\u0000\u0000\u1c4e\u1c4f\u0005\u0285\u0000\u0000"+
		"\u1c4f\u1c50\u0003\u0344\u01a2\u0000\u1c50\u1c51\u0005\u0286\u0000\u0000"+
		"\u1c51\u1c53\u0001\u0000\u0000\u0000\u1c52\u1c4a\u0001\u0000\u0000\u0000"+
		"\u1c52\u1c4e\u0001\u0000\u0000\u0000\u1c53\u037b\u0001\u0000\u0000\u0000"+
		"\u1c54\u1c55\u0006\u01be\uffff\uffff\u0000\u1c55\u1d91\u0003\u037e\u01bf"+
		"\u0000\u1c56\u1c57\u0003\u043c\u021e\u0000\u1c57\u1c59\u0003\u0412\u0209"+
		"\u0000\u1c58\u1c5a\u0003\u038e\u01c7\u0000\u1c59\u1c58\u0001\u0000\u0000"+
		"\u0000\u1c59\u1c5a\u0001\u0000\u0000\u0000\u1c5a\u1d91\u0001\u0000\u0000"+
		"\u0000\u1c5b\u1c5c\u0007T\u0000\u0000\u1c5c\u1c64\u0005\u0285\u0000\u0000"+
		"\u1c5d\u1c5e\u0005\u0130\u0000\u0000\u1c5e\u1c5f\u0005\u0285\u0000\u0000"+
		"\u1c5f\u1c60\u0003\u0294\u014a\u0000\u1c60\u1c61\u0005\u0286\u0000\u0000"+
		"\u1c61\u1c65\u0001\u0000\u0000\u0000\u1c62\u1c65\u0003\u0354\u01aa\u0000"+
		"\u1c63\u1c65\u0003\u0344\u01a2\u0000\u1c64\u1c5d\u0001\u0000\u0000\u0000"+
		"\u1c64\u1c62\u0001\u0000\u0000\u0000\u1c64\u1c63\u0001\u0000\u0000\u0000"+
		"\u1c65\u1c66\u0001\u0000\u0000\u0000\u1c66\u1c67\u0005\u0014\u0000\u0000"+
		"\u1c67\u1c68\u0003\u0418\u020c\u0000\u1c68\u1c69\u0005\u0286\u0000\u0000"+
		"\u1c69\u1d91\u0001\u0000\u0000\u0000\u1c6a\u1c6d\u0003\u0294\u014a\u0000"+
		"\u1c6b\u1c6d\u0003\u0374\u01ba\u0000\u1c6c\u1c6a\u0001\u0000\u0000\u0000"+
		"\u1c6c\u1c6b\u0001\u0000\u0000\u0000\u1c6d\u1c6e\u0001\u0000\u0000\u0000"+
		"\u1c6e\u1c6f\u0005\u0003\u0000\u0000\u1c6f\u1c70\u0003\u0418\u020c\u0000"+
		"\u1c70\u1d91\u0001\u0000\u0000\u0000\u1c71\u1c72\u0005A\u0000\u0000\u1c72"+
		"\u1c73\u0005\u0285\u0000\u0000\u1c73\u1c74\u0003\u0354\u01aa\u0000\u1c74"+
		"\u1c75\u0005\u022a\u0000\u0000\u1c75\u1c76\u0005\u0137\u0000\u0000\u1c76"+
		"\u1c77\u0005\u0286\u0000\u0000\u1c77\u1d91\u0001\u0000\u0000\u0000\u1c78"+
		"\u1c79\u0005G\u0000\u0000\u1c79\u1c7b\u0005\u0285\u0000\u0000\u1c7a\u1c7c"+
		"\u0007U\u0000\u0000\u1c7b\u1c7a\u0001\u0000\u0000\u0000\u1c7b\u1c7c\u0001"+
		"\u0000\u0000\u0000\u1c7c\u1c7d\u0001\u0000\u0000\u0000\u1c7d\u1c7f\u0003"+
		"\u0354\u01aa\u0000\u1c7e\u1c80\u0003\u0392\u01c9\u0000\u1c7f\u1c7e\u0001"+
		"\u0000\u0000\u0000\u1c7f\u1c80\u0001\u0000\u0000\u0000\u1c80\u1c81\u0001"+
		"\u0000\u0000\u0000\u1c81\u1c82\u0005\u0286\u0000\u0000\u1c82\u1d91\u0001"+
		"\u0000\u0000\u0000\u1c83\u1c84\u0003\u0382\u01c1\u0000\u1c84\u1c86\u0003"+
		"\u040e\u0207\u0000\u1c85\u1c87\u0003\u0394\u01ca\u0000\u1c86\u1c85\u0001"+
		"\u0000\u0000\u0000\u1c87\u1c88\u0001\u0000\u0000\u0000\u1c88\u1c86\u0001"+
		"\u0000\u0000\u0000\u1c88\u1c89\u0001\u0000\u0000\u0000\u1c89\u1d91\u0001"+
		"\u0000\u0000\u0000\u1c8a\u1c8b\u0005|\u0000\u0000\u1c8b\u1c8c\u0005\u0285"+
		"\u0000\u0000\u1c8c\u1c8e\u0003\u0354\u01aa\u0000\u1c8d\u1c8f\u0007V\u0000"+
		"\u0000\u1c8e\u1c8d\u0001\u0000\u0000\u0000\u1c8e\u1c8f\u0001\u0000\u0000"+
		"\u0000\u1c8f\u1c90\u0001\u0000\u0000\u0000\u1c90\u1c91\u0005\u0286\u0000"+
		"\u0000\u1c91\u1d91\u0001\u0000\u0000\u0000\u1c92\u1c93\u0005\u00af\u0000"+
		"\u0000\u1c93\u1c96\u0005\u0285\u0000\u0000\u1c94\u1c97\u0003\u043c\u021e"+
		"\u0000\u1c95\u1c97\u0003\u0344\u01a2\u0000\u1c96\u1c94\u0001\u0000\u0000"+
		"\u0000\u1c96\u1c95\u0001\u0000\u0000\u0000\u1c97\u1c98\u0001\u0000\u0000"+
		"\u0000\u1c98\u1c99\u0005\u00c4\u0000\u0000\u1c99\u1c9a\u0003\u0354\u01aa"+
		"\u0000\u1c9a\u1c9b\u0005\u0286\u0000\u0000\u1c9b\u1d91\u0001\u0000\u0000"+
		"\u0000\u1c9c\u1c9d\u0007W\u0000\u0000\u1c9d\u1c9f\u0003\u0410\u0208\u0000"+
		"\u1c9e\u1ca0\u0003\u0414\u020a\u0000\u1c9f\u1c9e\u0001\u0000\u0000\u0000"+
		"\u1c9f\u1ca0\u0001\u0000\u0000\u0000\u1ca0\u1ca1\u0001\u0000\u0000\u0000"+
		"\u1ca1\u1ca2\u0003\u0386\u01c3\u0000\u1ca2\u1d91\u0001\u0000\u0000\u0000"+
		"\u1ca3\u1ca4\u0003\u0384\u01c2\u0000\u1ca4\u1ca5\u0005\u0285\u0000\u0000"+
		"\u1ca5\u1caa\u0003\u0344\u01a2\u0000\u1ca6\u1ca7\u0005\u028b\u0000\u0000"+
		"\u1ca7\u1ca9\u0003\u0344\u01a2\u0000\u1ca8\u1ca6\u0001\u0000\u0000\u0000"+
		"\u1ca9\u1cac\u0001\u0000\u0000\u0000\u1caa\u1ca8\u0001\u0000\u0000\u0000"+
		"\u1caa\u1cab\u0001\u0000\u0000\u0000\u1cab\u1cae\u0001\u0000\u0000\u0000"+
		"\u1cac\u1caa\u0001\u0000\u0000\u0000\u1cad\u1caf\u0003\u0396\u01cb\u0000"+
		"\u1cae\u1cad\u0001\u0000\u0000\u0000\u1cae\u1caf\u0001\u0000\u0000\u0000"+
		"\u1caf\u1cb1\u0001\u0000\u0000\u0000\u1cb0\u1cb2\u0003\u038e\u01c7\u0000"+
		"\u1cb1\u1cb0\u0001\u0000\u0000\u0000\u1cb1\u1cb2\u0001\u0000\u0000\u0000"+
		"\u1cb2\u1cb3\u0001\u0000\u0000\u0000\u1cb3\u1cb4\u0005\u0286\u0000\u0000"+
		"\u1cb4\u1d91\u0001\u0000\u0000\u0000\u1cb5\u1cb6\u0005\u0185\u0000\u0000"+
		"\u1cb6\u1cb7\u0005\u0285\u0000\u0000\u1cb7\u1cb8\u0003\u0344\u01a2\u0000"+
		"\u1cb8\u1cb9\u0005\u00d9\u0000\u0000\u1cb9\u1cba\u0003\u0344\u01a2\u0000"+
		"\u1cba\u1cbb\u0005\u0286\u0000\u0000\u1cbb\u1d91\u0001\u0000\u0000\u0000"+
		"\u1cbc\u1cbd\u0005\u0213\u0000\u0000\u1cbd\u1cbe\u0005\u0285\u0000\u0000"+
		"\u1cbe\u1cc1\u0003\u0344\u01a2\u0000\u1cbf\u1cc0\u0005\u022a\u0000\u0000"+
		"\u1cc0\u1cc2\u0007X\u0000\u0000\u1cc1\u1cbf\u0001\u0000\u0000\u0000\u1cc1"+
		"\u1cc2\u0001\u0000\u0000\u0000\u1cc2\u1cc7\u0001\u0000\u0000\u0000\u1cc3"+
		"\u1cc4\u0005\u028b\u0000\u0000\u1cc4\u1cc6\u0003\u0344\u01a2\u0000\u1cc5"+
		"\u1cc3\u0001\u0000\u0000\u0000\u1cc6\u1cc9\u0001\u0000\u0000\u0000\u1cc7"+
		"\u1cc5\u0001\u0000\u0000\u0000\u1cc7\u1cc8\u0001\u0000\u0000\u0000\u1cc8"+
		"\u1cca\u0001\u0000\u0000\u0000\u1cc9\u1cc7\u0001\u0000\u0000\u0000\u1cca"+
		"\u1ccb\u0005\u0286\u0000\u0000\u1ccb\u1d91\u0001\u0000\u0000\u0000\u1ccc"+
		"\u1ccd\u0005\u0214\u0000\u0000\u1ccd\u1cce\u0005\u0285\u0000\u0000\u1cce"+
		"\u1ccf\u0003\u0344\u01a2\u0000\u1ccf\u1cd1\u0005\u0014\u0000\u0000\u1cd0"+
		"\u1cd2\u0005\u019f\u0000\u0000\u1cd1\u1cd0\u0001\u0000\u0000\u0000\u1cd1"+
		"\u1cd2\u0001\u0000\u0000\u0000\u1cd2\u1cd3\u0001\u0000\u0000\u0000\u1cd3"+
		"\u1cd4\u0003\u0418\u020c\u0000\u1cd4\u1cd5\u0005\u0286\u0000\u0000\u1cd5"+
		"\u1d91\u0001\u0000\u0000\u0000\u1cd6\u1cd7\u0005\u0216\u0000\u0000\u1cd7"+
		"\u1cdf\u0005\u0285\u0000\u0000\u1cd8\u1cda\u0007\u000f\u0000\u0000\u1cd9"+
		"\u1cd8\u0001\u0000\u0000\u0000\u1cd9\u1cda\u0001\u0000\u0000\u0000\u1cda"+
		"\u1cdc\u0001\u0000\u0000\u0000\u1cdb\u1cdd\u0003\u042c\u0216\u0000\u1cdc"+
		"\u1cdb\u0001\u0000\u0000\u0000\u1cdc\u1cdd\u0001\u0000\u0000\u0000\u1cdd"+
		"\u1cde\u0001\u0000\u0000\u0000\u1cde\u1ce0\u0005\u00c4\u0000\u0000\u1cdf"+
		"\u1cd9\u0001\u0000\u0000\u0000\u1cdf\u1ce0\u0001\u0000\u0000\u0000\u1ce0"+
		"\u1ce1\u0001\u0000\u0000\u0000\u1ce1\u1ce2\u0003\u0354\u01aa\u0000\u1ce2"+
		"\u1ce3\u0005\u0286\u0000\u0000\u1ce3\u1d91\u0001\u0000\u0000\u0000\u1ce4"+
		"\u1ce5\u0005\u0248\u0000\u0000\u1ce5\u1ce6\u0005\u0285\u0000\u0000\u1ce6"+
		"\u1ce8\u0003\u0344\u01a2\u0000\u1ce7\u1ce9\u0003\u02f0\u0178\u0000\u1ce8"+
		"\u1ce7\u0001\u0000\u0000\u0000\u1ce8\u1ce9\u0001\u0000\u0000\u0000\u1ce9"+
		"\u1cea\u0001\u0000\u0000\u0000\u1cea\u1ced\u0005\u0286\u0000\u0000\u1ceb"+
		"\u1cec\u0005\u027e\u0000\u0000\u1cec\u1cee\u0003\u0422\u0211\u0000\u1ced"+
		"\u1ceb\u0001\u0000\u0000\u0000\u1ced\u1cee\u0001\u0000\u0000\u0000\u1cee"+
		"\u1d91\u0001\u0000\u0000\u0000\u1cef\u1cf0\u0007Y\u0000\u0000\u1cf0\u1cf1"+
		"\u0005\u0285\u0000\u0000\u1cf1\u1cf6\u0003\u03a2\u01d1\u0000\u1cf2\u1cf3"+
		"\u0005\u028b\u0000\u0000\u1cf3\u1cf5\u0003\u03a2\u01d1\u0000\u1cf4\u1cf2"+
		"\u0001\u0000\u0000\u0000\u1cf5\u1cf8\u0001\u0000\u0000\u0000\u1cf6\u1cf4"+
		"\u0001\u0000\u0000\u0000\u1cf6\u1cf7\u0001\u0000\u0000\u0000\u1cf7\u1cf9"+
		"\u0001\u0000\u0000\u0000\u1cf8\u1cf6\u0001\u0000\u0000\u0000\u1cf9\u1cfc"+
		"\u0005\u0286\u0000\u0000\u1cfa\u1cfb\u0005\u027e\u0000\u0000\u1cfb\u1cfd"+
		"\u0003\u0422\u0211\u0000\u1cfc\u1cfa\u0001\u0000\u0000\u0000\u1cfc\u1cfd"+
		"\u0001\u0000\u0000\u0000\u1cfd\u1d91\u0001\u0000\u0000\u0000\u1cfe\u1cff"+
		"\u0005\u024c\u0000\u0000\u1cff\u1d01\u0005\u0285\u0000\u0000\u1d00\u1d02"+
		"\u0007Z\u0000\u0000\u1d01\u1d00\u0001\u0000\u0000\u0000\u1d01\u1d02\u0001"+
		"\u0000\u0000\u0000\u1d02\u1d04\u0001\u0000\u0000\u0000\u1d03\u1d05\u0007"+
		"[\u0000\u0000\u1d04\u1d03\u0001\u0000\u0000\u0000\u1d04\u1d05\u0001\u0000"+
		"\u0000\u0000\u1d05\u1d06\u0001\u0000\u0000\u0000\u1d06\u1d09\u0003\u0344"+
		"\u01a2\u0000\u1d07\u1d08\u0005\u028b\u0000\u0000\u1d08\u1d0a\u0003\u039a"+
		"\u01cd\u0000\u1d09\u1d07\u0001\u0000\u0000\u0000\u1d09\u1d0a\u0001\u0000"+
		"\u0000\u0000\u1d0a\u1d12\u0001\u0000\u0000\u0000\u1d0b\u1d0c\u0005\u028b"+
		"\u0000\u0000\u1d0c\u1d0e\u0003\u0344\u01a2\u0000\u1d0d\u1d0f\u0003\u03bc"+
		"\u01de\u0000\u1d0e\u1d0d\u0001\u0000\u0000\u0000\u1d0e\u1d0f\u0001\u0000"+
		"\u0000\u0000\u1d0f\u1d11\u0001\u0000\u0000\u0000\u1d10\u1d0b\u0001\u0000"+
		"\u0000\u0000\u1d11\u1d14\u0001\u0000\u0000\u0000\u1d12\u1d10\u0001\u0000"+
		"\u0000\u0000\u1d12\u1d13\u0001\u0000\u0000\u0000\u1d13\u1d15\u0001\u0000"+
		"\u0000\u0000\u1d14\u1d12\u0001\u0000\u0000\u0000\u1d15\u1d18\u0005\u0286"+
		"\u0000\u0000\u1d16\u1d17\u0005\u027e\u0000\u0000\u1d17\u1d19\u0003\u0422"+
		"\u0211\u0000\u1d18\u1d16\u0001\u0000\u0000\u0000\u1d18\u1d19\u0001\u0000"+
		"\u0000\u0000\u1d19\u1d91\u0001\u0000\u0000\u0000\u1d1a\u1d1b\u0005\u024d"+
		"\u0000\u0000\u1d1b\u1d1c\u0005\u0285\u0000\u0000\u1d1c\u1d1e\u0003\u0344"+
		"\u01a2\u0000\u1d1d\u1d1f\u0003\u0398\u01cc\u0000\u1d1e\u1d1d\u0001\u0000"+
		"\u0000\u0000\u1d1e\u1d1f\u0001\u0000\u0000\u0000\u1d1f\u1d20\u0001\u0000"+
		"\u0000\u0000\u1d20\u1d21\u0005\u0286\u0000\u0000\u1d21\u1d91\u0001\u0000"+
		"\u0000\u0000\u1d22\u1d23\u0005\u0251\u0000\u0000\u1d23\u1d24\u0005\u0285"+
		"\u0000\u0000\u1d24\u1d25\u0007\\\u0000\u0000\u1d25\u1d27\u0003\u0354\u01aa"+
		"\u0000\u1d26\u1d28\u0005\u023c\u0000\u0000\u1d27\u1d26\u0001\u0000\u0000"+
		"\u0000\u1d27\u1d28\u0001\u0000\u0000\u0000\u1d28\u1d29\u0001\u0000\u0000"+
		"\u0000\u1d29\u1d2c\u0005\u0286\u0000\u0000\u1d2a\u1d2b\u0005\u027e\u0000"+
		"\u0000\u1d2b\u1d2d\u0003\u0422\u0211\u0000\u1d2c\u1d2a\u0001\u0000\u0000"+
		"\u0000\u1d2c\u1d2d\u0001\u0000\u0000\u0000\u1d2d\u1d91\u0001\u0000\u0000"+
		"\u0000\u1d2e\u1d2f\u0005\u0252\u0000\u0000\u1d2f\u1d34\u0005\u0285\u0000"+
		"\u0000\u1d30\u1d31\u0005\u0131\u0000\u0000\u1d31\u1d35\u0003\u042e\u0217"+
		"\u0000\u1d32\u1d33\u0005\u00a2\u0000\u0000\u1d33\u1d35\u0003\u0354\u01aa"+
		"\u0000\u1d34\u1d30\u0001\u0000\u0000\u0000\u1d34\u1d32\u0001\u0000\u0000"+
		"\u0000\u1d35\u1d38\u0001\u0000\u0000\u0000\u1d36\u1d37\u0005\u028b\u0000"+
		"\u0000\u1d37\u1d39\u0003\u0354\u01aa\u0000\u1d38\u1d36\u0001\u0000\u0000"+
		"\u0000\u1d38\u1d39\u0001\u0000\u0000\u0000\u1d39\u1d3a\u0001\u0000\u0000"+
		"\u0000\u1d3a\u1d3d\u0005\u0286\u0000\u0000\u1d3b\u1d3c\u0005\u027e\u0000"+
		"\u0000\u1d3c\u1d3e\u0003\u0422\u0211\u0000\u1d3d\u1d3b\u0001\u0000\u0000"+
		"\u0000\u1d3d\u1d3e\u0001\u0000\u0000\u0000\u1d3e\u1d91\u0001\u0000\u0000"+
		"\u0000\u1d3f\u1d40\u0005\u0253\u0000\u0000\u1d40\u1d41\u0005\u0285\u0000"+
		"\u0000\u1d41\u1d43\u0003\u0354\u01aa\u0000\u1d42\u1d44\u0003\u0398\u01cc"+
		"\u0000\u1d43\u1d42\u0001\u0000\u0000\u0000\u1d43\u1d44\u0001\u0000\u0000"+
		"\u0000\u1d44\u1d45\u0001\u0000\u0000\u0000\u1d45\u1d46\u0005\u01b1\u0000"+
		"\u0000\u1d46\u1d4a\u0005[\u0000\u0000\u1d47\u1d48\u0005\u0155\u0000\u0000"+
		"\u1d48\u1d49\u0005\u0162\u0000\u0000\u1d49\u1d4b\u0005\u0098\u0000\u0000"+
		"\u1d4a\u1d47\u0001\u0000\u0000\u0000\u1d4a\u1d4b\u0001\u0000\u0000\u0000"+
		"\u1d4b\u1d4c\u0001\u0000\u0000\u0000\u1d4c\u1d4f\u0005\u0286\u0000\u0000"+
		"\u1d4d\u1d4e\u0005\u027e\u0000\u0000\u1d4e\u1d50\u0003\u0422\u0211\u0000"+
		"\u1d4f\u1d4d\u0001\u0000\u0000\u0000\u1d4f\u1d50\u0001\u0000\u0000\u0000"+
		"\u1d50\u1d91\u0001\u0000\u0000\u0000\u1d51\u1d52\u0005\u0254\u0000\u0000"+
		"\u1d52\u1d53\u0005\u0285\u0000\u0000\u1d53\u1d56\u0003\u0354\u01aa\u0000"+
		"\u1d54\u1d55\u0005\u028b\u0000\u0000\u1d55\u1d57\u0003\u03a4\u01d2\u0000"+
		"\u1d56\u1d54\u0001\u0000\u0000\u0000\u1d56\u1d57\u0001\u0000\u0000\u0000"+
		"\u1d57\u1d5a\u0001\u0000\u0000\u0000\u1d58\u1d59\u0005\u028b\u0000\u0000"+
		"\u1d59\u1d5b\u0003\u03a6\u01d3\u0000\u1d5a\u1d58\u0001\u0000\u0000\u0000"+
		"\u1d5a\u1d5b\u0001\u0000\u0000\u0000\u1d5b\u1d5c\u0001\u0000\u0000\u0000"+
		"\u1d5c\u1d5f\u0005\u0286\u0000\u0000\u1d5d\u1d5e\u0005\u027e\u0000\u0000"+
		"\u1d5e\u1d60\u0003\u0422\u0211\u0000\u1d5f\u1d5d\u0001\u0000\u0000\u0000"+
		"\u1d5f\u1d60\u0001\u0000\u0000\u0000\u1d60\u1d91\u0001\u0000\u0000\u0000"+
		"\u1d61\u1d62\u0005\u0256\u0000\u0000\u1d62\u1d63\u0005\u0285\u0000\u0000"+
		"\u1d63\u1d64\u0007\\\u0000\u0000\u1d64\u1d67\u0003\u0354\u01aa\u0000\u1d65"+
		"\u1d66\u0005\u0014\u0000\u0000\u1d66\u1d68\u0003\u0418\u020c\u0000\u1d67"+
		"\u1d65\u0001\u0000\u0000\u0000\u1d67\u1d68\u0001\u0000\u0000\u0000\u1d68"+
		"\u1d6a\u0001\u0000\u0000\u0000\u1d69\u1d6b\u0003\u03a8\u01d4\u0000\u1d6a"+
		"\u1d69\u0001\u0000\u0000\u0000\u1d6a\u1d6b\u0001\u0000\u0000\u0000\u1d6b"+
		"\u1d6d\u0001\u0000\u0000\u0000\u1d6c\u1d6e\u0003\u03aa\u01d5\u0000\u1d6d"+
		"\u1d6c\u0001\u0000\u0000\u0000\u1d6d\u1d6e\u0001\u0000\u0000\u0000\u1d6e"+
		"\u1d70\u0001\u0000\u0000\u0000\u1d6f\u1d71\u0003\u03ac\u01d6\u0000\u1d70"+
		"\u1d6f\u0001\u0000\u0000\u0000\u1d70\u1d71\u0001\u0000\u0000\u0000\u1d71"+
		"\u1d74\u0001\u0000\u0000\u0000\u1d72\u1d73\u0007]\u0000\u0000\u1d73\u1d75"+
		"\u0005\u0081\u0000\u0000\u1d74\u1d72\u0001\u0000\u0000\u0000\u1d74\u1d75"+
		"\u0001\u0000\u0000\u0000\u1d75\u1d76\u0001\u0000\u0000\u0000\u1d76\u1d79"+
		"\u0005\u0286\u0000\u0000\u1d77\u1d78\u0005\u027e\u0000\u0000\u1d78\u1d7a"+
		"\u0003\u0422\u0211\u0000\u1d79\u1d77\u0001\u0000\u0000\u0000\u1d79\u1d7a"+
		"\u0001\u0000\u0000\u0000\u1d7a\u1d91\u0001\u0000\u0000\u0000\u1d7b\u1d7c"+
		"\u0005\u0257\u0000\u0000\u1d7c\u1d7e\u0005\u0285\u0000\u0000\u1d7d\u1d7f"+
		"\u0003\u039c\u01ce\u0000\u1d7e\u1d7d\u0001\u0000\u0000\u0000\u1d7e\u1d7f"+
		"\u0001\u0000\u0000\u0000\u1d7f\u1d80\u0001\u0000\u0000\u0000\u1d80\u1d82"+
		"\u0003\u0354\u01aa\u0000\u1d81\u1d83\u0003\u0398\u01cc\u0000\u1d82\u1d81"+
		"\u0001\u0000\u0000\u0000\u1d82\u1d83\u0001\u0000\u0000\u0000\u1d83\u1d89"+
		"\u0001\u0000\u0000\u0000\u1d84\u1d85\u0005I\u0000\u0000\u1d85\u1d86\u0003"+
		"\u039e\u01cf\u0000\u1d86\u1d87\u0005\u028b\u0000\u0000\u1d87\u1d88\u0003"+
		"\u039e\u01cf\u0000\u1d88\u1d8a\u0001\u0000\u0000\u0000\u1d89\u1d84\u0001"+
		"\u0000\u0000\u0000\u1d89\u1d8a\u0001\u0000\u0000\u0000\u1d8a\u1d8b\u0001"+
		"\u0000\u0000\u0000\u1d8b\u1d8e\u0005\u0286\u0000\u0000\u1d8c\u1d8d\u0005"+
		"\u027e\u0000\u0000\u1d8d\u1d8f\u0003\u0422\u0211\u0000\u1d8e\u1d8c\u0001"+
		"\u0000\u0000\u0000\u1d8e\u1d8f\u0001\u0000\u0000\u0000\u1d8f\u1d91\u0001"+
		"\u0000\u0000\u0000\u1d90\u1c54\u0001\u0000\u0000\u0000\u1d90\u1c56\u0001"+
		"\u0000\u0000\u0000\u1d90\u1c5b\u0001\u0000\u0000\u0000\u1d90\u1c6c\u0001"+
		"\u0000\u0000\u0000\u1d90\u1c71\u0001\u0000\u0000\u0000\u1d90\u1c78\u0001"+
		"\u0000\u0000\u0000\u1d90\u1c83\u0001\u0000\u0000\u0000\u1d90\u1c8a\u0001"+
		"\u0000\u0000\u0000\u1d90\u1c92\u0001\u0000\u0000\u0000\u1d90\u1c9c\u0001"+
		"\u0000\u0000\u0000\u1d90\u1ca3\u0001\u0000\u0000\u0000\u1d90\u1cb5\u0001"+
		"\u0000\u0000\u0000\u1d90\u1cbc\u0001\u0000\u0000\u0000\u1d90\u1ccc\u0001"+
		"\u0000\u0000\u0000\u1d90\u1cd6\u0001\u0000\u0000\u0000\u1d90\u1ce4\u0001"+
		"\u0000\u0000\u0000\u1d90\u1cef\u0001\u0000\u0000\u0000\u1d90\u1cfe\u0001"+
		"\u0000\u0000\u0000\u1d90\u1d1a\u0001\u0000\u0000\u0000\u1d90\u1d22\u0001"+
		"\u0000\u0000\u0000\u1d90\u1d2e\u0001\u0000\u0000\u0000\u1d90\u1d3f\u0001"+
		"\u0000\u0000\u0000\u1d90\u1d51\u0001\u0000\u0000\u0000\u1d90\u1d61\u0001"+
		"\u0000\u0000\u0000\u1d90\u1d7b\u0001\u0000\u0000\u0000\u1d91\u1d97\u0001"+
		"\u0000\u0000\u0000\u1d92\u1d93\n\u0016\u0000\u0000\u1d93\u1d94\u0005\u0003"+
		"\u0000\u0000\u1d94\u1d96\u0003\u0418\u020c\u0000\u1d95\u1d92\u0001\u0000"+
		"\u0000\u0000\u1d96\u1d99\u0001\u0000\u0000\u0000\u1d97\u1d95\u0001\u0000"+
		"\u0000\u0000\u1d97\u1d98\u0001\u0000\u0000\u0000\u1d98\u037d\u0001\u0000"+
		"\u0000\u0000\u1d99\u1d97\u0001\u0000\u0000\u0000\u1d9a\u1d9b\u0003\u0380"+
		"\u01c0\u0000\u1d9b\u1d9d\u0003\u0410\u0208\u0000\u1d9c\u1d9e\u0003\u0386"+
		"\u01c3\u0000\u1d9d\u1d9c\u0001\u0000\u0000\u0000\u1d9d\u1d9e\u0001\u0000"+
		"\u0000\u0000\u1d9e\u1dad\u0001\u0000\u0000\u0000\u1d9f\u1da0\u0005b\u0000"+
		"\u0000\u1da0\u1da6\u0005\u0285\u0000\u0000\u1da1\u1da7\u0003\u040a\u0205"+
		"\u0000\u1da2\u1da4\u0007B\u0000\u0000\u1da3\u1da2\u0001\u0000\u0000\u0000"+
		"\u1da3\u1da4\u0001\u0000\u0000\u0000\u1da4\u1da5\u0001\u0000\u0000\u0000"+
		"\u1da5\u1da7\u0003\u0354\u01aa\u0000\u1da6\u1da1\u0001\u0000\u0000\u0000"+
		"\u1da6\u1da3\u0001\u0000\u0000\u0000\u1da7\u1da8\u0001\u0000\u0000\u0000"+
		"\u1da8\u1daa\u0005\u0286\u0000\u0000\u1da9\u1dab\u0003\u0386\u01c3\u0000"+
		"\u1daa\u1da9\u0001\u0000\u0000\u0000\u1daa\u1dab\u0001\u0000\u0000\u0000"+
		"\u1dab\u1dad\u0001\u0000\u0000\u0000\u1dac\u1d9a\u0001\u0000\u0000\u0000"+
		"\u1dac\u1d9f\u0001\u0000\u0000\u0000\u1dad\u037f\u0001\u0000\u0000\u0000"+
		"\u1dae\u1daf\u0007^\u0000\u0000\u1daf\u0381\u0001\u0000\u0000\u0000\u1db0"+
		"\u1db1\u0007_\u0000\u0000\u1db1\u0383\u0001\u0000\u0000\u0000\u1db2\u1db3"+
		"\u0007`\u0000\u0000\u1db3\u0385\u0001\u0000\u0000\u0000\u1db4\u1db5\u0005"+
		"\u016e\u0000\u0000\u1db5\u1db7\u0005\u0285\u0000\u0000\u1db6\u1db8\u0003"+
		"\u02ac\u0156\u0000\u1db7\u1db6\u0001\u0000\u0000\u0000\u1db7\u1db8\u0001"+
		"\u0000\u0000\u0000\u1db8\u1dbd\u0001\u0000\u0000\u0000\u1db9\u1dbb\u0003"+
		"\u02f0\u0178\u0000\u1dba\u1dbc\u0003\u0388\u01c4\u0000\u1dbb\u1dba\u0001"+
		"\u0000\u0000\u0000\u1dbb\u1dbc\u0001\u0000\u0000\u0000\u1dbc\u1dbe\u0001"+
		"\u0000\u0000\u0000\u1dbd\u1db9\u0001\u0000\u0000\u0000\u1dbd\u1dbe\u0001"+
		"\u0000\u0000\u0000\u1dbe\u1dbf\u0001\u0000\u0000\u0000\u1dbf\u1dc0\u0005"+
		"\u0286\u0000\u0000\u1dc0\u0387\u0001\u0000\u0000\u0000\u1dc1\u1dc8\u0003"+
		"\u038a\u01c5\u0000\u1dc2\u1dc3\u0005#\u0000\u0000\u1dc3\u1dc4\u0003\u038c"+
		"\u01c6\u0000\u1dc4\u1dc5\u0005\u000f\u0000\u0000\u1dc5\u1dc6\u0003\u038c"+
		"\u01c6\u0000\u1dc6\u1dc9\u0001\u0000\u0000\u0000\u1dc7\u1dc9\u0003\u038c"+
		"\u01c6\u0000\u1dc8\u1dc2\u0001\u0000\u0000\u0000\u1dc8\u1dc7\u0001\u0000"+
		"\u0000\u0000\u1dc9\u0389\u0001\u0000\u0000\u0000\u1dca\u1dcb\u0007a\u0000"+
		"\u0000\u1dcb\u038b\u0001\u0000\u0000\u0000\u1dcc\u1dcd\u0005\u021b\u0000"+
		"\u0000\u1dcd\u1dd4\u0005\u018a\u0000\u0000\u1dce\u1dcf\u0005i\u0000\u0000"+
		"\u1dcf\u1dd4\u0005\u01ba\u0000\u0000\u1dd0\u1dd1\u0003\u0354\u01aa\u0000"+
		"\u1dd1\u1dd2\u0007b\u0000\u0000\u1dd2\u1dd4\u0001\u0000\u0000\u0000\u1dd3"+
		"\u1dcc\u0001\u0000\u0000\u0000\u1dd3\u1dce\u0001\u0000\u0000\u0000\u1dd3"+
		"\u1dd0\u0001\u0000\u0000\u0000\u1dd4\u038d\u0001\u0000\u0000\u0000\u1dd5"+
		"\u1ddf\u0005\u022a\u0000\u0000\u1dd6\u1de0\u0003\u040a\u0205\u0000\u1dd7"+
		"\u1ddc\u0003\u0390\u01c8\u0000\u1dd8\u1dd9\u0005\u028b\u0000\u0000\u1dd9"+
		"\u1ddb\u0003\u0390\u01c8\u0000\u1dda\u1dd8\u0001\u0000\u0000\u0000\u1ddb"+
		"\u1dde\u0001\u0000\u0000\u0000\u1ddc\u1dda\u0001\u0000\u0000\u0000\u1ddc"+
		"\u1ddd\u0001\u0000\u0000\u0000\u1ddd\u1de0\u0001\u0000\u0000\u0000\u1dde"+
		"\u1ddc\u0001\u0000\u0000\u0000\u1ddf\u1dd6\u0001\u0000\u0000\u0000\u1ddf"+
		"\u1dd7\u0001\u0000\u0000\u0000\u1de0\u038f\u0001\u0000\u0000\u0000\u1de1"+
		"\u1de3\u0005\u00d9\u0000\u0000\u1de2\u1de4\u0005\u016c\u0000\u0000\u1de3"+
		"\u1de2\u0001\u0000\u0000\u0000\u1de3\u1de4\u0001\u0000\u0000\u0000\u1de4"+
		"\u1de7\u0001\u0000\u0000\u0000\u1de5\u1de7\u0005\u016c\u0000\u0000\u1de6"+
		"\u1de1\u0001\u0000\u0000\u0000\u1de6\u1de5\u0001\u0000\u0000\u0000\u1de6"+
		"\u1de7\u0001\u0000\u0000\u0000\u1de7\u1de8\u0001\u0000\u0000\u0000\u1de8"+
		"\u1dea\u0003\u029a\u014d\u0000\u1de9\u1deb\u0003\u03bc\u01de\u0000\u1dea"+
		"\u1de9\u0001\u0000\u0000\u0000\u1dea\u1deb\u0001\u0000\u0000\u0000\u1deb"+
		"\u0391\u0001\u0000\u0000\u0000\u1dec\u1ded\u0005\u0169\u0000\u0000\u1ded"+
		"\u1dee\u00053\u0000\u0000\u1dee\u1def\u0003\u0354\u01aa\u0000\u1def\u0393"+
		"\u0001\u0000\u0000\u0000\u1df0\u1df1\u0005\u0243\u0000\u0000\u1df1\u1df2"+
		"\u0005\u00cb\u0000\u0000\u1df2\u1df3\u0005\u0285\u0000\u0000\u1df3\u1df4"+
		"\u0003\u02f0\u0178\u0000\u1df4\u1df5\u0005\u0286\u0000\u0000\u1df5\u1df8"+
		"\u0001\u0000\u0000\u0000\u1df6\u1df8\u0003\u0386\u01c3\u0000\u1df7\u1df0"+
		"\u0001\u0000\u0000\u0000\u1df7\u1df6\u0001\u0000\u0000\u0000\u1df8\u0395"+
		"\u0001\u0000\u0000\u0000\u1df9\u1e0b\u0005a\u0000\u0000\u1dfa\u1dfc\u0005"+
		"\u012c\u0000\u0000\u1dfb\u1dfd\u0005\u001b\u0000\u0000\u1dfc\u1dfb\u0001"+
		"\u0000\u0000\u0000\u1dfc\u1dfd\u0001\u0000\u0000\u0000\u1dfd\u1e0c\u0001"+
		"\u0000\u0000\u0000\u1dfe\u1dff\u0005\u0285\u0000\u0000\u1dff\u1e04\u0003"+
		"\u03ca\u01e5\u0000\u1e00\u1e01\u0005\u028b\u0000\u0000\u1e01\u1e03\u0003"+
		"\u03ca\u01e5\u0000\u1e02\u1e00\u0001\u0000\u0000\u0000\u1e03\u1e06\u0001"+
		"\u0000\u0000\u0000\u1e04\u1e02\u0001\u0000\u0000\u0000\u1e04\u1e05\u0001"+
		"\u0000\u0000\u0000\u1e05\u1e07\u0001\u0000\u0000\u0000\u1e06\u1e04\u0001"+
		"\u0000\u0000\u0000\u1e07\u1e08\u0005\u0286\u0000\u0000\u1e08\u1e09\u0005"+
		"\u022d\u0000\u0000\u1e09\u1e0a\u0003\u0340\u01a0\u0000\u1e0a\u1e0c\u0001"+
		"\u0000\u0000\u0000\u1e0b\u1dfa\u0001\u0000\u0000\u0000\u1e0b\u1dfe\u0001"+
		"\u0000\u0000\u0000\u1e0c\u0397\u0001\u0000\u0000\u0000\u1e0d\u1e10\u0005"+
		"\u0177\u0000\u0000\u1e0e\u1e0f\u00053\u0000\u0000\u1e0f\u1e11\u0005\u022c"+
		"\u0000\u0000\u1e10\u1e0e\u0001\u0000\u0000\u0000\u1e10\u1e11\u0001\u0000"+
		"\u0000\u0000\u1e11\u1e12\u0001\u0000\u0000\u0000\u1e12\u1e14\u0003\u0344"+
		"\u01a2\u0000\u1e13\u1e15\u0003\u03bc\u01de\u0000\u1e14\u1e13\u0001\u0000"+
		"\u0000\u0000\u1e14\u1e15\u0001\u0000\u0000\u0000\u1e15\u1e16\u0001\u0000"+
		"\u0000\u0000\u1e16\u1e17\u0005\u028b\u0000\u0000\u1e17\u1e19\u0003\u0344"+
		"\u01a2\u0000\u1e18\u1e1a\u0003\u03bc\u01de\u0000\u1e19\u1e18\u0001\u0000"+
		"\u0000\u0000\u1e19\u1e1a\u0001\u0000\u0000\u0000\u1e1a\u0399\u0001\u0000"+
		"\u0000\u0000\u1e1b\u1e1c\u0005\u0249\u0000\u0000\u1e1c\u1e1e\u0005\u0285"+
		"\u0000\u0000\u1e1d\u1e1f\u0007Z\u0000\u0000\u1e1e\u1e1d\u0001\u0000\u0000"+
		"\u0000\u1e1e\u1e1f\u0001\u0000\u0000\u0000\u1e1f\u1e21\u0001\u0000\u0000"+
		"\u0000\u1e20\u1e22\u0007c\u0000\u0000\u1e21\u1e20\u0001\u0000\u0000\u0000"+
		"\u1e21\u1e22\u0001\u0000\u0000\u0000\u1e22\u1e23\u0001\u0000\u0000\u0000"+
		"\u1e23\u1e28\u0003\u03a2\u01d1\u0000\u1e24\u1e25\u0005\u028b\u0000\u0000"+
		"\u1e25\u1e27\u0003\u03a2\u01d1\u0000\u1e26\u1e24\u0001\u0000\u0000\u0000"+
		"\u1e27\u1e2a\u0001\u0000\u0000\u0000\u1e28\u1e26\u0001\u0000\u0000\u0000"+
		"\u1e28\u1e29\u0001\u0000\u0000\u0000\u1e29\u1e2b\u0001\u0000\u0000\u0000"+
		"\u1e2a\u1e28\u0001\u0000\u0000\u0000\u1e2b\u1e2c\u0005\u0286\u0000\u0000"+
		"\u1e2c\u039b\u0001\u0000\u0000\u0000\u1e2d\u1e2e\u0005\u0250\u0000\u0000"+
		"\u1e2e\u1e32\u0005\u0285\u0000\u0000\u1e2f\u1e30\u0003\u0354\u01aa\u0000"+
		"\u1e30\u1e31\u0003\u03bc\u01de\u0000\u1e31\u1e33\u0001\u0000\u0000\u0000"+
		"\u1e32\u1e2f\u0001\u0000\u0000\u0000\u1e32\u1e33\u0001\u0000\u0000\u0000"+
		"\u1e33\u1e3a\u0001\u0000\u0000\u0000\u1e34\u1e35\u0005\u028b\u0000\u0000"+
		"\u1e35\u1e36\u0003\u0354\u01aa\u0000\u1e36\u1e37\u0003\u03bc\u01de\u0000"+
		"\u1e37\u1e39\u0001\u0000\u0000\u0000\u1e38\u1e34\u0001\u0000\u0000\u0000"+
		"\u1e39\u1e3c\u0001\u0000\u0000\u0000\u1e3a\u1e38\u0001\u0000\u0000\u0000"+
		"\u1e3a\u1e3b\u0001\u0000\u0000\u0000\u1e3b\u1e3e\u0001\u0000\u0000\u0000"+
		"\u1e3c\u1e3a\u0001\u0000\u0000\u0000\u1e3d\u1e3f\u0003\u03a0\u01d0\u0000"+
		"\u1e3e\u1e3d\u0001\u0000\u0000\u0000\u1e3e\u1e3f\u0001\u0000\u0000\u0000"+
		"\u1e3f\u1e40\u0001\u0000\u0000\u0000\u1e40\u1e41\u0005\u0286\u0000\u0000"+
		"\u1e41\u039d\u0001\u0000\u0000\u0000\u1e42\u1e4d\u0003\u03c8\u01e4\u0000"+
		"\u1e43\u1e44\u0005\u00bd\u0000\u0000\u1e44\u1e4e\u0005\u016a\u0000\u0000"+
		"\u1e45\u1e48\u0003\u0418\u020c\u0000\u1e46\u1e47\u0005\u0178\u0000\u0000"+
		"\u1e47\u1e49\u0003\u0354\u01aa\u0000\u1e48\u1e46\u0001\u0000\u0000\u0000"+
		"\u1e48\u1e49\u0001\u0000\u0000\u0000\u1e49\u1e4b\u0001\u0000\u0000\u0000"+
		"\u1e4a\u1e4c\u0003\u03a0\u01d0\u0000\u1e4b\u1e4a\u0001\u0000\u0000\u0000"+
		"\u1e4b\u1e4c\u0001\u0000\u0000\u0000\u1e4c\u1e4e\u0001\u0000\u0000\u0000"+
		"\u1e4d\u1e43\u0001\u0000\u0000\u0000\u1e4d\u1e45\u0001\u0000\u0000\u0000"+
		"\u1e4e\u039f\u0001\u0000\u0000\u0000\u1e4f\u1e50\u0005\u0080\u0000\u0000"+
		"\u1e50\u1e51\u0003\u0354\u01aa\u0000\u1e51\u03a1\u0001\u0000\u0000\u0000"+
		"\u1e52\u1e59\u0003\u0344\u01a2\u0000\u1e53\u1e57\u0005\u0014\u0000\u0000"+
		"\u1e54\u1e58\u0003\u0430\u0218\u0000\u1e55\u1e56\u0005\u00a2\u0000\u0000"+
		"\u1e56\u1e58\u0003\u0354\u01aa\u0000\u1e57\u1e54\u0001\u0000\u0000\u0000"+
		"\u1e57\u1e55\u0001\u0000\u0000\u0000\u1e58\u1e5a\u0001\u0000\u0000\u0000"+
		"\u1e59\u1e53\u0001\u0000\u0000\u0000\u1e59\u1e5a\u0001\u0000\u0000\u0000"+
		"\u1e5a\u03a3\u0001\u0000\u0000\u0000\u1e5b\u1e5f\u0005\u0235\u0000\u0000"+
		"\u1e5c\u1e5d\u0005\u013d\u0000\u0000\u1e5d\u1e60\u0005\u022c\u0000\u0000"+
		"\u1e5e\u1e60\u0003\u0344\u01a2\u0000\u1e5f\u1e5c\u0001\u0000\u0000\u0000"+
		"\u1e5f\u1e5e\u0001\u0000\u0000\u0000\u1e60\u03a5\u0001\u0000\u0000\u0000"+
		"\u1e61\u1e67\u0005\u01e9\u0000\u0000\u1e62\u1e68\u0005\u025a\u0000\u0000"+
		"\u1e63\u1e65\u0005\u013d\u0000\u0000\u1e64\u1e66\u0005\u022c\u0000\u0000"+
		"\u1e65\u1e64\u0001\u0000\u0000\u0000\u1e65\u1e66\u0001\u0000\u0000\u0000"+
		"\u1e66\u1e68\u0001\u0000\u0000\u0000\u1e67\u1e62\u0001\u0000\u0000\u0000"+
		"\u1e67\u1e63\u0001\u0000\u0000\u0000\u1e68\u03a7\u0001\u0000\u0000\u0000"+
		"\u1e69\u1e6a\u0005\u009a\u0000\u0000\u1e6a\u1e6b\u0003\u0354\u01aa\u0000"+
		"\u1e6b\u03a9\u0001\u0000\u0000\u0000\u1e6c\u1e6d\u0005\u0235\u0000\u0000"+
		"\u1e6d\u1e6e\u0003\u0354\u01aa\u0000\u1e6e\u03ab\u0001\u0000\u0000\u0000"+
		"\u1e6f\u1e70\u0005\u013d\u0000\u0000\u1e70\u1e78\u0005\u00dd\u0000\u0000"+
		"\u1e71\u1e75\u0005\u00dd\u0000\u0000\u1e72\u1e73\u0005\u01df\u0000\u0000"+
		"\u1e73\u1e74\u0005\u029c\u0000\u0000\u1e74\u1e76\u0003\u0354\u01aa\u0000"+
		"\u1e75\u1e72\u0001\u0000\u0000\u0000\u1e75\u1e76\u0001\u0000\u0000\u0000"+
		"\u1e76\u1e78\u0001\u0000\u0000\u0000\u1e77\u1e6f\u0001\u0000\u0000\u0000"+
		"\u1e77\u1e71\u0001\u0000\u0000\u0000\u1e78\u03ad\u0001\u0000\u0000\u0000"+
		"\u1e79\u1e80\u0005\u028c\u0000\u0000\u1e7a\u1e80\u0003\u03b0\u01d8\u0000"+
		"\u1e7b\u1e80\u0003\u03b4\u01da\u0000\u1e7c\u1e80\u0003\u03b6\u01db\u0000"+
		"\u1e7d\u1e80\u0003\u03b2\u01d9\u0000\u1e7e\u1e80\u0003\u03b8\u01dc\u0000"+
		"\u1e7f\u1e79\u0001\u0000\u0000\u0000\u1e7f\u1e7a\u0001\u0000\u0000\u0000"+
		"\u1e7f\u1e7b\u0001\u0000\u0000\u0000\u1e7f\u1e7c\u0001\u0000\u0000\u0000"+
		"\u1e7f\u1e7d\u0001\u0000\u0000\u0000\u1e7f\u1e7e\u0001\u0000\u0000\u0000"+
		"\u1e80\u03af\u0001\u0000\u0000\u0000\u1e81\u1e82\u0005\u023e\u0000\u0000"+
		"\u1e82\u1e88\u0007d\u0000\u0000\u1e83\u1e84\u0005\u00ab\u0000\u0000\u1e84"+
		"\u1e85\u0007e\u0000\u0000\u1e85\u1e89\u0007f\u0000\u0000\u1e86\u1e87\u0005"+
		"]\u0000\u0000\u1e87\u1e89\u0007g\u0000\u0000\u1e88\u1e83\u0001\u0000\u0000"+
		"\u0000\u1e88\u1e86\u0001\u0000\u0000\u0000\u1e89\u03b1\u0001\u0000\u0000"+
		"\u0000\u1e8a\u1e8b\u0005\u01d4\u0000\u0000\u1e8b\u1e91\u0003\u043c\u021e"+
		"\u0000\u1e8c\u1e92\u0005\u0281\u0000\u0000\u1e8d\u1e92\u0005\u0162\u0000"+
		"\u0000\u1e8e\u1e92\u0005\u015d\u0000\u0000\u1e8f\u1e92\u0003\u0428\u0214"+
		"\u0000\u1e90\u1e92\u0003\u043c\u021e\u0000\u1e91\u1e8c\u0001\u0000\u0000"+
		"\u0000\u1e91\u1e8d\u0001\u0000\u0000\u0000\u1e91\u1e8e\u0001\u0000\u0000"+
		"\u0000\u1e91\u1e8f\u0001\u0000\u0000\u0000\u1e91\u1e90\u0001\u0000\u0000"+
		"\u0000\u1e92\u03b3\u0001\u0000\u0000\u0000\u1e93\u1e94\u0005\u00ab\u0000"+
		"\u0000\u1e94\u03b5\u0001\u0000\u0000\u0000\u1e95\u1e96\u0005\u02a3\u0000"+
		"\u0000\u1e96\u03b7\u0001\u0000\u0000\u0000\u1e97\u1e98\u0005\u01d8\u0000"+
		"\u0000\u1e98\u1e9c\u0005\u009f\u0000\u0000\u1e99\u1e9a\u0005\u01d8\u0000"+
		"\u0000\u1e9a\u1e9c\u0005\u00a0\u0000\u0000\u1e9b\u1e97\u0001\u0000\u0000"+
		"\u0000\u1e9b\u1e99\u0001\u0000\u0000\u0000\u1e9c\u03b9\u0001\u0000\u0000"+
		"\u0000\u1e9d\u1e9f\u0007h\u0000\u0000\u1e9e\u1ea0\u0005\u00bd\u0000\u0000"+
		"\u1e9f\u1e9e\u0001\u0000\u0000\u0000\u1e9f\u1ea0\u0001\u0000\u0000\u0000"+
		"\u1ea0\u1ea1\u0001\u0000\u0000\u0000\u1ea1\u1ea2\u0003\u0340\u01a0\u0000"+
		"\u1ea2\u03bb\u0001\u0000\u0000\u0000\u1ea3\u1ea5\u0005\u0014\u0000\u0000"+
		"\u1ea4\u1ea3\u0001\u0000\u0000\u0000\u1ea4\u1ea5\u0001\u0000\u0000\u0000"+
		"\u1ea5\u1ea8\u0001\u0000\u0000\u0000\u1ea6\u1ea9\u0003\u042e\u0217\u0000"+
		"\u1ea7\u1ea9\u0003\u03c0\u01e0\u0000\u1ea8\u1ea6\u0001\u0000\u0000\u0000"+
		"\u1ea8\u1ea7\u0001\u0000\u0000\u0000\u1ea9\u1eac\u0001\u0000\u0000\u0000"+
		"\u1eaa\u1eac\u0005\u0014\u0000\u0000\u1eab\u1ea4\u0001\u0000\u0000\u0000"+
		"\u1eab\u1eaa\u0001\u0000\u0000\u0000\u1eac\u03bd\u0001\u0000\u0000\u0000"+
		"\u1ead\u1eaf\u0005\u0014\u0000\u0000\u1eae\u1ead\u0001\u0000\u0000\u0000"+
		"\u1eae\u1eaf\u0001\u0000\u0000\u0000\u1eaf\u1eb2\u0001\u0000\u0000\u0000"+
		"\u1eb0\u1eb3\u0003\u042e\u0217\u0000\u1eb1\u1eb3\u0003\u03c0\u01e0\u0000"+
		"\u1eb2\u1eb0\u0001\u0000\u0000\u0000\u1eb2\u1eb1\u0001\u0000\u0000\u0000"+
		"\u1eb3\u03bf\u0001\u0000\u0000\u0000\u1eb4\u1eb5\u0003\u042c\u0216\u0000"+
		"\u1eb5\u03c1\u0001\u0000\u0000\u0000\u1eb6\u1eb9\u0005\u023f\u0000\u0000"+
		"\u1eb7\u1eba\u0003\u03c4\u01e2\u0000\u1eb8\u1eba\u0003\u0344\u01a2\u0000"+
		"\u1eb9\u1eb7\u0001\u0000\u0000\u0000\u1eb9\u1eb8\u0001\u0000\u0000\u0000"+
		"\u1eba\u03c3\u0001\u0000\u0000\u0000\u1ebb\u1ebc\u0005i\u0000\u0000\u1ebc"+
		"\u1ebd\u0005\u015c\u0000\u0000\u1ebd\u1ebe\u0003\u03fa\u01fd\u0000\u1ebe"+
		"\u03c5\u0001\u0000\u0000\u0000\u1ebf\u1ec0\u0005\u00f2\u0000\u0000\u1ec0"+
		"\u1ec5\u0003\u03f6\u01fb\u0000\u1ec1\u1ec2\u0005\u028b\u0000\u0000\u1ec2"+
		"\u1ec4\u0003\u03f6\u01fb\u0000\u1ec3\u1ec1\u0001\u0000\u0000\u0000\u1ec4"+
		"\u1ec7\u0001\u0000\u0000\u0000\u1ec5\u1ec3\u0001\u0000\u0000\u0000\u1ec5"+
		"\u1ec6\u0001\u0000\u0000\u0000\u1ec6\u1ed4\u0001\u0000\u0000\u0000\u1ec7"+
		"\u1ec5\u0001\u0000\u0000\u0000\u1ec8\u1ec9\u00052\u0000\u0000\u1ec9\u1eca"+
		"\u0005G\u0000\u0000\u1eca\u1ecb\u0005\u00f2\u0000\u0000\u1ecb\u1ed0\u0003"+
		"\u03f6\u01fb\u0000\u1ecc\u1ecd\u0005\u028b\u0000\u0000\u1ecd\u1ecf\u0003"+
		"\u03f6\u01fb\u0000\u1ece\u1ecc\u0001\u0000\u0000\u0000\u1ecf\u1ed2\u0001"+
		"\u0000\u0000\u0000\u1ed0\u1ece\u0001\u0000\u0000\u0000\u1ed0\u1ed1\u0001"+
		"\u0000\u0000\u0000\u1ed1\u1ed4\u0001\u0000\u0000\u0000\u1ed2\u1ed0\u0001"+
		"\u0000\u0000\u0000\u1ed3\u1ebf\u0001\u0000\u0000\u0000\u1ed3\u1ec8\u0001"+
		"\u0000\u0000\u0000\u1ed4\u03c7\u0001\u0000\u0000\u0000\u1ed5\u1ed8\u0003"+
		"\u042e\u0217\u0000\u1ed6\u1ed8\u0003\u042c\u0216\u0000\u1ed7\u1ed5\u0001"+
		"\u0000\u0000\u0000\u1ed7\u1ed6\u0001\u0000\u0000\u0000\u1ed8\u03c9\u0001"+
		"\u0000\u0000\u0000\u1ed9\u1eda\u0003\u042e\u0217\u0000\u1eda\u03cb\u0001"+
		"\u0000\u0000\u0000\u1edb\u1edc\u0003\u042e\u0217\u0000\u1edc\u03cd\u0001"+
		"\u0000\u0000\u0000\u1edd\u1ede\u0003\u042e\u0217\u0000\u1ede\u03cf\u0001"+
		"\u0000\u0000\u0000\u1edf\u1ee0\u0003\u042e\u0217\u0000\u1ee0\u03d1\u0001"+
		"\u0000\u0000\u0000\u1ee1\u1ee2\u0003\u042e\u0217\u0000\u1ee2\u03d3\u0001"+
		"\u0000\u0000\u0000\u1ee3\u1ee4\u0003\u042e\u0217\u0000\u1ee4\u03d5\u0001"+
		"\u0000\u0000\u0000\u1ee5\u1eea\u0003\u042e\u0217\u0000\u1ee6\u1ee7\u0005"+
		"\u027e\u0000\u0000\u1ee7\u1ee9\u0003\u0430\u0218\u0000\u1ee8\u1ee6\u0001"+
		"\u0000\u0000\u0000\u1ee9\u1eec\u0001\u0000\u0000\u0000\u1eea\u1ee8\u0001"+
		"\u0000\u0000\u0000\u1eea\u1eeb\u0001\u0000\u0000\u0000\u1eeb\u1eef\u0001"+
		"\u0000\u0000\u0000\u1eec\u1eea\u0001\u0000\u0000\u0000\u1eed\u1eee\u0005"+
		"\u028d\u0000\u0000\u1eee\u1ef0\u0003\u0400\u0200\u0000\u1eef\u1eed\u0001"+
		"\u0000\u0000\u0000\u1eef\u1ef0\u0001\u0000\u0000\u0000\u1ef0\u03d7\u0001"+
		"\u0000\u0000\u0000\u1ef1\u1ef2\u0003\u042e\u0217\u0000\u1ef2\u03d9\u0001"+
		"\u0000\u0000\u0000\u1ef3\u1ef6\u0003\u042e\u0217\u0000\u1ef4\u1ef5\u0005"+
		"\u027e\u0000\u0000\u1ef5\u1ef7\u0003\u0430\u0218\u0000\u1ef6\u1ef4\u0001"+
		"\u0000\u0000\u0000\u1ef6\u1ef7\u0001\u0000\u0000\u0000\u1ef7\u03db\u0001"+
		"\u0000\u0000\u0000\u1ef8\u1ef9\u0003\u042e\u0217\u0000\u1ef9\u03dd\u0001"+
		"\u0000\u0000\u0000\u1efa\u1efb\u0003\u042e\u0217\u0000\u1efb\u03df\u0001"+
		"\u0000\u0000\u0000\u1efc\u1efd\u0003\u042e\u0217\u0000\u1efd\u03e1\u0001"+
		"\u0000\u0000\u0000\u1efe\u1f03\u0003\u042e\u0217\u0000\u1eff\u1f00\u0005"+
		"\u027e\u0000\u0000\u1f00\u1f02\u0003\u0430\u0218\u0000\u1f01\u1eff\u0001"+
		"\u0000\u0000\u0000\u1f02\u1f05\u0001\u0000\u0000\u0000\u1f03\u1f01\u0001"+
		"\u0000\u0000\u0000\u1f03\u1f04\u0001\u0000\u0000\u0000\u1f04\u03e3\u0001"+
		"\u0000\u0000\u0000\u1f05\u1f03\u0001\u0000\u0000\u0000\u1f06\u1f07\u0003"+
		"\u042e\u0217\u0000\u1f07\u03e5\u0001\u0000\u0000\u0000\u1f08\u1f0d\u0003"+
		"\u042e\u0217\u0000\u1f09\u1f0a\u0005\u027e\u0000\u0000\u1f0a\u1f0c\u0003"+
		"\u0430\u0218\u0000\u1f0b\u1f09\u0001\u0000\u0000\u0000\u1f0c\u1f0f\u0001"+
		"\u0000\u0000\u0000\u1f0d\u1f0b\u0001\u0000\u0000\u0000\u1f0d\u1f0e\u0001"+
		"\u0000\u0000\u0000\u1f0e\u1f12\u0001\u0000\u0000\u0000\u1f0f\u1f0d\u0001"+
		"\u0000\u0000\u0000\u1f10\u1f11\u0005\u028d\u0000\u0000\u1f11\u1f13\u0003"+
		"\u0400\u0200\u0000\u1f12\u1f10\u0001\u0000\u0000\u0000\u1f12\u1f13\u0001"+
		"\u0000\u0000\u0000\u1f13\u03e7\u0001\u0000\u0000\u0000\u1f14\u1f15\u0003"+
		"\u0430\u0218\u0000\u1f15\u03e9\u0001\u0000\u0000\u0000\u1f16\u1f1b\u0003"+
		"\u0430\u0218\u0000\u1f17\u1f18\u0005\u027e\u0000\u0000\u1f18\u1f1a\u0003"+
		"\u0430\u0218\u0000\u1f19\u1f17\u0001\u0000\u0000\u0000\u1f1a\u1f1d\u0001"+
		"\u0000\u0000\u0000\u1f1b\u1f19\u0001\u0000\u0000\u0000\u1f1b\u1f1c\u0001"+
		"\u0000\u0000\u0000\u1f1c\u03eb\u0001\u0000\u0000\u0000\u1f1d\u1f1b\u0001"+
		"\u0000\u0000\u0000\u1f1e\u1f23\u0003\u0430\u0218\u0000\u1f1f\u1f20\u0005"+
		"\u027e\u0000\u0000\u1f20\u1f22\u0003\u0430\u0218\u0000\u1f21\u1f1f\u0001"+
		"\u0000\u0000\u0000\u1f22\u1f25\u0001\u0000\u0000\u0000\u1f23\u1f21\u0001"+
		"\u0000\u0000\u0000\u1f23\u1f24\u0001\u0000\u0000\u0000\u1f24\u03ed\u0001"+
		"\u0000\u0000\u0000\u1f25\u1f23\u0001\u0000\u0000\u0000\u1f26\u1f2b\u0003"+
		"\u042e\u0217\u0000\u1f27\u1f28\u0005\u027e\u0000\u0000\u1f28\u1f2a\u0003"+
		"\u0430\u0218\u0000\u1f29\u1f27\u0001\u0000\u0000\u0000\u1f2a\u1f2d\u0001"+
		"\u0000\u0000\u0000\u1f2b\u1f29\u0001\u0000\u0000\u0000\u1f2b\u1f2c\u0001"+
		"\u0000\u0000\u0000\u1f2c\u03ef\u0001\u0000\u0000\u0000\u1f2d\u1f2b\u0001"+
		"\u0000\u0000\u0000\u1f2e\u1f31\u0003\u042e\u0217\u0000\u1f2f\u1f30\u0005"+
		"\u027e\u0000\u0000\u1f30\u1f32\u0003\u0430\u0218\u0000\u1f31\u1f2f\u0001"+
		"\u0000\u0000\u0000\u1f31\u1f32\u0001\u0000\u0000\u0000\u1f32\u03f1\u0001"+
		"\u0000\u0000\u0000\u1f33\u1f36\u0003\u042e\u0217\u0000\u1f34\u1f35\u0005"+
		"\u027e\u0000\u0000\u1f35\u1f37\u0003\u0430\u0218\u0000\u1f36\u1f34\u0001"+
		"\u0000\u0000\u0000\u1f36\u1f37\u0001\u0000\u0000\u0000\u1f37\u03f3\u0001"+
		"\u0000\u0000\u0000\u1f38\u1f3b\u0003\u042e\u0217\u0000\u1f39\u1f3a\u0005"+
		"\u027e\u0000\u0000\u1f3a\u1f3c\u0003\u0430\u0218\u0000\u1f3b\u1f39\u0001"+
		"\u0000\u0000\u0000\u1f3b\u1f3c\u0001\u0000\u0000\u0000\u1f3c\u03f5\u0001"+
		"\u0000\u0000\u0000\u1f3d\u1f40\u0003\u0408\u0204\u0000\u1f3e\u1f40\u0003"+
		"\u0420\u0210\u0000\u1f3f\u1f3d\u0001\u0000\u0000\u0000\u1f3f\u1f3e\u0001"+
		"\u0000\u0000\u0000\u1f40\u03f7\u0001\u0000\u0000\u0000\u1f41\u1f42\u0003"+
		"\u042e\u0217\u0000\u1f42\u03f9\u0001\u0000\u0000\u0000\u1f43\u1f46\u0003"+
		"\u042e\u0217\u0000\u1f44\u1f46\u0003\u0420\u0210\u0000\u1f45\u1f43\u0001"+
		"\u0000\u0000\u0000\u1f45\u1f44\u0001\u0000\u0000\u0000\u1f46\u03fb\u0001"+
		"\u0000\u0000\u0000\u1f47\u1f4a\u0003\u042e\u0217\u0000\u1f48\u1f4a\u0003"+
		"\u0420\u0210\u0000\u1f49\u1f47\u0001\u0000\u0000\u0000\u1f49\u1f48\u0001"+
		"\u0000\u0000\u0000\u1f4a\u03fd\u0001\u0000\u0000\u0000\u1f4b\u1f4e\u0003"+
		"\u042e\u0217\u0000\u1f4c\u1f4d\u0005\u027e\u0000\u0000\u1f4d\u1f4f\u0003"+
		"\u0430\u0218\u0000\u1f4e\u1f4c\u0001\u0000\u0000\u0000\u1f4e\u1f4f\u0001"+
		"\u0000\u0000\u0000\u1f4f\u03ff\u0001\u0000\u0000\u0000\u1f50\u1f51\u0003"+
		"\u042e\u0217\u0000\u1f51\u0401\u0001\u0000\u0000\u0000\u1f52\u1f57\u0003"+
		"\u042e\u0217\u0000\u1f53\u1f54\u0005\u027e\u0000\u0000\u1f54\u1f56\u0003"+
		"\u0430\u0218\u0000\u1f55\u1f53\u0001\u0000\u0000\u0000\u1f56\u1f59\u0001"+
		"\u0000\u0000\u0000\u1f57\u1f55\u0001\u0000\u0000\u0000\u1f57\u1f58\u0001"+
		"\u0000\u0000\u0000\u1f58\u0403\u0001\u0000\u0000\u0000\u1f59\u1f57\u0001"+
		"\u0000\u0000\u0000\u1f5a\u1f5b\u0003\u042e\u0217\u0000\u1f5b\u0405\u0001"+
		"\u0000\u0000\u0000\u1f5c\u1f60\u0003\u0408\u0204\u0000\u1f5d\u1f5e\u0005"+
		"\u028d\u0000\u0000\u1f5e\u1f61\u0003\u0400\u0200\u0000\u1f5f\u1f61\u0003"+
		"\u03ba\u01dd\u0000\u1f60\u1f5d\u0001\u0000\u0000\u0000\u1f60\u1f5f\u0001"+
		"\u0000\u0000\u0000\u1f60\u1f61\u0001\u0000\u0000\u0000\u1f61\u0407\u0001"+
		"\u0000\u0000\u0000\u1f62\u1f67\u0003\u0430\u0218\u0000\u1f63\u1f64\u0005"+
		"\u027e\u0000\u0000\u1f64\u1f66\u0003\u0430\u0218\u0000\u1f65\u1f63\u0001"+
		"\u0000\u0000\u0000\u1f66\u1f69\u0001\u0000\u0000\u0000\u1f67\u1f65\u0001"+
		"\u0000\u0000\u0000\u1f67\u1f68\u0001\u0000\u0000\u0000\u1f68\u0409\u0001"+
		"\u0000\u0000\u0000\u1f69\u1f67\u0001\u0000\u0000\u0000\u1f6a\u1f6b\u0005"+
		"\u0288\u0000\u0000\u1f6b\u040b\u0001\u0000\u0000\u0000\u1f6c\u1f6d\u0005"+
		"\u00fa\u0000\u0000\u1f6d\u1f6e\u0005\u0285\u0000\u0000\u1f6e\u1f6f\u0005"+
		"\u0264\u0000\u0000\u1f6f\u1f70\u0007K\u0000\u0000\u1f70\u1f71\u0003\u02f0"+
		"\u0178\u0000\u1f71\u1f73\u0005\u0286\u0000\u0000\u1f72\u1f74\u0003\u0386"+
		"\u01c3\u0000\u1f73\u1f72\u0001\u0000\u0000\u0000\u1f73\u1f74\u0001\u0000"+
		"\u0000\u0000\u1f74\u040d\u0001\u0000\u0000\u0000\u1f75\u1f77\u0005\u0285"+
		"\u0000\u0000\u1f76\u1f78\u0003\u0416\u020b\u0000\u1f77\u1f76\u0001\u0000"+
		"\u0000\u0000\u1f77\u1f78\u0001\u0000\u0000\u0000\u1f78\u1f7d\u0001\u0000"+
		"\u0000\u0000\u1f79\u1f7a\u0005\u028b\u0000\u0000\u1f7a\u1f7c\u0003\u0416"+
		"\u020b\u0000\u1f7b\u1f79\u0001\u0000\u0000\u0000\u1f7c\u1f7f\u0001\u0000"+
		"\u0000\u0000\u1f7d\u1f7b\u0001\u0000\u0000\u0000\u1f7d\u1f7e\u0001\u0000"+
		"\u0000\u0000\u1f7e\u1f80\u0001\u0000\u0000\u0000\u1f7f\u1f7d\u0001\u0000"+
		"\u0000\u0000\u1f80\u1f82\u0005\u0286\u0000\u0000\u1f81\u1f83\u0003\u040c"+
		"\u0206\u0000\u1f82\u1f81\u0001\u0000\u0000\u0000\u1f82\u1f83\u0001\u0000"+
		"\u0000\u0000\u1f83\u040f\u0001\u0000\u0000\u0000\u1f84\u1f89\u0005\u0285"+
		"\u0000\u0000\u1f85\u1f87\u0003\u0416\u020b\u0000\u1f86\u1f88\u0003\u0414"+
		"\u020a\u0000\u1f87\u1f86\u0001\u0000\u0000\u0000\u1f87\u1f88\u0001\u0000"+
		"\u0000\u0000\u1f88\u1f8a\u0001\u0000\u0000\u0000\u1f89\u1f85\u0001\u0000"+
		"\u0000\u0000\u1f89\u1f8a\u0001\u0000\u0000\u0000\u1f8a\u1f92\u0001\u0000"+
		"\u0000\u0000\u1f8b\u1f8c\u0005\u028b\u0000\u0000\u1f8c\u1f8e\u0003\u0416"+
		"\u020b\u0000\u1f8d\u1f8f\u0003\u0414\u020a\u0000\u1f8e\u1f8d\u0001\u0000"+
		"\u0000\u0000\u1f8e\u1f8f\u0001\u0000\u0000\u0000\u1f8f\u1f91\u0001\u0000"+
		"\u0000\u0000\u1f90\u1f8b\u0001\u0000\u0000\u0000\u1f91\u1f94\u0001\u0000"+
		"\u0000\u0000\u1f92\u1f90\u0001\u0000\u0000\u0000\u1f92\u1f93\u0001\u0000"+
		"\u0000\u0000\u1f93\u1f95\u0001\u0000\u0000\u0000\u1f94\u1f92\u0001\u0000"+
		"\u0000\u0000\u1f95\u1f97\u0005\u0286\u0000\u0000\u1f96\u1f98\u0003\u040c"+
		"\u0206\u0000\u1f97\u1f96\u0001\u0000\u0000\u0000\u1f97\u1f98\u0001\u0000"+
		"\u0000\u0000\u1f98\u0411\u0001\u0000\u0000\u0000\u1f99\u1f9a\u0005\u0285"+
		"\u0000\u0000\u1f9a\u1fa7\u0003\u0402\u0201\u0000\u1f9b\u1f9e\u0005\u028b"+
		"\u0000\u0000\u1f9c\u1f9f\u0003\u0428\u0214\u0000\u1f9d\u1f9f\u0005\u0155"+
		"\u0000\u0000\u1f9e\u1f9c\u0001\u0000\u0000\u0000\u1f9e\u1f9d\u0001\u0000"+
		"\u0000\u0000\u1f9f\u1fa5\u0001\u0000\u0000\u0000\u1fa0\u1fa3\u0005\u028b"+
		"\u0000\u0000\u1fa1\u1fa4\u0003\u0428\u0214\u0000\u1fa2\u1fa4\u0005\u0155"+
		"\u0000\u0000\u1fa3\u1fa1\u0001\u0000\u0000\u0000\u1fa3\u1fa2\u0001\u0000"+
		"\u0000\u0000\u1fa4\u1fa6\u0001\u0000\u0000\u0000\u1fa5\u1fa0\u0001\u0000"+
		"\u0000\u0000\u1fa5\u1fa6\u0001\u0000\u0000\u0000\u1fa6\u1fa8\u0001\u0000"+
		"\u0000\u0000\u1fa7\u1f9b\u0001\u0000\u0000\u0000\u1fa7\u1fa8\u0001\u0000"+
		"\u0000\u0000\u1fa8\u1fa9\u0001\u0000\u0000\u0000\u1fa9\u1fbd\u0005\u022a"+
		"\u0000\u0000\u1faa\u1fab\u0003\u0406\u0203\u0000\u1fab\u1fac\u0005\u027e"+
		"\u0000\u0000\u1fac\u1fad\u0003\u040a\u0205\u0000\u1fad\u1fbe\u0001\u0000"+
		"\u0000\u0000\u1fae\u1fbe\u0003\u040a\u0205\u0000\u1faf\u1fb1\u0003\u0344"+
		"\u01a2\u0000\u1fb0\u1fb2\u0003\u03bc\u01de\u0000\u1fb1\u1fb0\u0001\u0000"+
		"\u0000\u0000\u1fb1\u1fb2\u0001\u0000\u0000\u0000\u1fb2\u1fba\u0001\u0000"+
		"\u0000\u0000\u1fb3\u1fb4\u0005\u028b\u0000\u0000\u1fb4\u1fb6\u0003\u0344"+
		"\u01a2\u0000\u1fb5\u1fb7\u0003\u03bc\u01de\u0000\u1fb6\u1fb5\u0001\u0000"+
		"\u0000\u0000\u1fb6\u1fb7\u0001\u0000\u0000\u0000\u1fb7\u1fb9\u0001\u0000"+
		"\u0000\u0000\u1fb8\u1fb3\u0001\u0000\u0000\u0000\u1fb9\u1fbc\u0001\u0000"+
		"\u0000\u0000\u1fba\u1fb8\u0001\u0000\u0000\u0000\u1fba\u1fbb\u0001\u0000"+
		"\u0000\u0000\u1fbb\u1fbe\u0001\u0000\u0000\u0000\u1fbc\u1fba\u0001\u0000"+
		"\u0000\u0000\u1fbd\u1faa\u0001\u0000\u0000\u0000\u1fbd\u1fae\u0001\u0000"+
		"\u0000\u0000\u1fbd\u1faf\u0001\u0000\u0000\u0000\u1fbe\u1fbf\u0001\u0000"+
		"\u0000\u0000\u1fbf\u1fc1\u0005\u0286\u0000\u0000\u1fc0\u1fc2\u0003\u040c"+
		"\u0206\u0000\u1fc1\u1fc0\u0001\u0000\u0000\u0000\u1fc1\u1fc2\u0001\u0000"+
		"\u0000\u0000\u1fc2\u0413\u0001\u0000\u0000\u0000\u1fc3\u1fc4\u0007i\u0000"+
		"\u0000\u1fc4\u1fc5\u0005\u0156\u0000\u0000\u1fc5\u0415\u0001\u0000\u0000"+
		"\u0000\u1fc6\u1fc7\u0003\u042e\u0217\u0000\u1fc7\u1fc8\u0005\u029c\u0000"+
		"\u0000\u1fc8\u1fc9\u0005\u0299\u0000\u0000\u1fc9\u1fcb\u0001\u0000\u0000"+
		"\u0000\u1fca\u1fc6\u0001\u0000\u0000\u0000\u1fca\u1fcb\u0001\u0000\u0000"+
		"\u0000\u1fcb\u1fcc\u0001\u0000\u0000\u0000\u1fcc\u1fcd\u0003\u0344\u01a2"+
		"\u0000\u1fcd\u0417\u0001\u0000\u0000\u0000\u1fce\u1fd7\u0003\u041a\u020d"+
		"\u0000\u1fcf\u1fd1\u0005\u019f\u0000\u0000\u1fd0\u1fcf\u0001\u0000\u0000"+
		"\u0000\u1fd0\u1fd1\u0001\u0000\u0000\u0000\u1fd1\u1fd2\u0001\u0000\u0000"+
		"\u0000\u1fd2\u1fd4\u0003\u03ea\u01f5\u0000\u1fd3\u1fd5\u00079\u0000\u0000"+
		"\u1fd4\u1fd3\u0001\u0000\u0000\u0000\u1fd4\u1fd5\u0001\u0000\u0000\u0000"+
		"\u1fd5\u1fd7\u0001\u0000\u0000\u0000\u1fd6\u1fce\u0001\u0000\u0000\u0000"+
		"\u1fd6\u1fd0\u0001\u0000\u0000\u0000\u1fd7\u0419\u0001\u0000\u0000\u0000"+
		"\u1fd8\u1fda\u0003\u041e\u020f\u0000\u1fd9\u1fdb\u0003\u041c\u020e\u0000"+
		"\u1fda\u1fd9\u0001\u0000\u0000\u0000\u1fda\u1fdb\u0001\u0000\u0000\u0000"+
		"\u1fdb\u1fe2\u0001\u0000\u0000\u0000\u1fdc\u1fde\u0005\u0241\u0000\u0000"+
		"\u1fdd\u1fdf\u0005\u010c\u0000\u0000\u1fde\u1fdd\u0001\u0000\u0000\u0000"+
		"\u1fde\u1fdf\u0001\u0000\u0000\u0000\u1fdf\u1fe0\u0001\u0000\u0000\u0000"+
		"\u1fe0\u1fe1\u0005\u0205\u0000\u0000\u1fe1\u1fe3\u0005\u025c\u0000\u0000"+
		"\u1fe2\u1fdc\u0001\u0000\u0000\u0000\u1fe2\u1fe3\u0001\u0000\u0000\u0000"+
		"\u1fe3\u1ff5\u0001\u0000\u0000\u0000\u1fe4\u1fe5\u0005\u00f1\u0000\u0000"+
		"\u1fe5\u1fea\u0007j\u0000\u0000\u1fe6\u1fe7\u0005\u0285\u0000\u0000\u1fe7"+
		"\u1fe8\u0003\u0344\u01a2\u0000\u1fe8\u1fe9\u0005\u0286\u0000\u0000\u1fe9"+
		"\u1feb\u0001\u0000\u0000\u0000\u1fea\u1fe6\u0001\u0000\u0000\u0000\u1fea"+
		"\u1feb\u0001\u0000\u0000\u0000\u1feb\u1fec\u0001\u0000\u0000\u0000\u1fec"+
		"\u1fed\u0005\u020e\u0000\u0000\u1fed\u1ff2\u0007k\u0000\u0000\u1fee\u1fef"+
		"\u0005\u0285\u0000\u0000\u1fef\u1ff0\u0003\u0344\u01a2\u0000\u1ff0\u1ff1"+
		"\u0005\u0286\u0000\u0000\u1ff1\u1ff3\u0001\u0000\u0000\u0000\u1ff2\u1fee"+
		"\u0001\u0000\u0000\u0000\u1ff2\u1ff3\u0001\u0000\u0000\u0000\u1ff3\u1ff5"+
		"\u0001\u0000\u0000\u0000\u1ff4\u1fd8\u0001\u0000\u0000\u0000\u1ff4\u1fe4"+
		"\u0001\u0000\u0000\u0000\u1ff5\u041b\u0001\u0000\u0000\u0000\u1ff6\u1ff7"+
		"\u0005\u0285\u0000\u0000\u1ff7\u1ffa\u0003\u0428\u0214\u0000\u1ff8\u1ff9"+
		"\u0005\u028b\u0000\u0000\u1ff9\u1ffb\u0003\u0428\u0214\u0000\u1ffa\u1ff8"+
		"\u0001\u0000\u0000\u0000\u1ffa\u1ffb\u0001\u0000\u0000\u0000\u1ffb\u1ffd"+
		"\u0001\u0000\u0000\u0000\u1ffc\u1ffe\u0007l\u0000\u0000\u1ffd\u1ffc\u0001"+
		"\u0000\u0000\u0000\u1ffd\u1ffe\u0001\u0000\u0000\u0000\u1ffe\u1fff\u0001"+
		"\u0000\u0000\u0000\u1fff\u2000\u0005\u0286\u0000\u0000\u2000\u041d\u0001"+
		"\u0000\u0000\u0000\u2001\u203e\u0005(\u0000\u0000\u2002\u203e\u0005\u0183"+
		"\u0000\u0000\u2003\u203e\u0005\u0133\u0000\u0000\u2004\u203e\u0005\'\u0000"+
		"\u0000\u2005\u203e\u0005&\u0000\u0000\u2006\u203e\u0005\u0134\u0000\u0000"+
		"\u2007\u203e\u0005\u0186\u0000\u0000\u2008\u203e\u0005\u0187\u0000\u0000"+
		"\u2009\u203e\u0005\u01dc\u0000\u0000\u200a\u203e\u0005\u01dd\u0000\u0000"+
		"\u200b\u203e\u0005\u0159\u0000\u0000\u200c\u203e\u0005x\u0000\u0000\u200d"+
		"\u203e\u0005\u00ef\u0000\u0000\u200e\u203e\u0005\u00ee\u0000\u0000\u200f"+
		"\u203e\u0005\u0158\u0000\u0000\u2010\u203e\u0005\u01e1\u0000\u0000\u2011"+
		"\u203e\u0005\u0157\u0000\u0000\u2012\u203e\u0005y\u0000\u0000\u2013\u2015"+
		"\u0005\u0090\u0000\u0000\u2014\u2016\u0005\u018b\u0000\u0000\u2015\u2014"+
		"\u0001\u0000\u0000\u0000\u2015\u2016\u0001\u0000\u0000\u0000\u2016\u203e"+
		"\u0001\u0000\u0000\u0000\u2017\u203e\u0005\u00ba\u0000\u0000\u2018\u203e"+
		"\u0005\u0199\u0000\u0000\u2019\u203e\u0005\u0136\u0000\u0000\u201a\u201c"+
		"\u0005\u0117\u0000\u0000\u201b\u201d\u0005\u0196\u0000\u0000\u201c\u201b"+
		"\u0001\u0000\u0000\u0000\u201c\u201d\u0001\u0000\u0000\u0000\u201d\u203e"+
		"\u0001\u0000\u0000\u0000\u201e\u203e\u0005<\u0000\u0000\u201f\u203e\u0005"+
		">\u0000\u0000\u2020\u203e\u0005\u022f\u0000\u0000\u2021\u203e\u0005\u022e"+
		"\u0000\u0000\u2022\u203e\u0005\u01f2\u0000\u0000\u2023\u203e\u0005\u0196"+
		"\u0000\u0000\u2024\u203e\u0005/\u0000\u0000\u2025\u203e\u0005q\u0000\u0000"+
		"\u2026\u203e\u0005\u01bc\u0000\u0000\u2027\u203e\u0005\u0228\u0000\u0000"+
		"\u2028\u203e\u0005\u0259\u0000\u0000\u2029\u203e\u0005\u012e\u0000\u0000"+
		"\u202a\u203e\u0005r\u0000\u0000\u202b\u203e\u0005\u00d2\u0000\u0000\u202c"+
		"\u203e\u0005\u0128\u0000\u0000\u202d\u203e\u0005\u01c8\u0000\u0000\u202e"+
		"\u203e\u0005\u020b\u0000\u0000\u202f\u203e\u0005\u020c\u0000\u0000\u2030"+
		"\u203e\u0005\u020d\u0000\u0000\u2031\u203e\u0005\u020a\u0000\u0000\u2032"+
		"\u203e\u0005\u0206\u0000\u0000\u2033\u203e\u0005\u0209\u0000\u0000\u2034"+
		"\u203e\u0005\u0208\u0000\u0000\u2035\u203e\u0005\u0207\u0000\u0000\u2036"+
		"\u203e\u0005\u025b\u0000\u0000\u2037\u203e\u0005\u0092\u0000\u0000\u2038"+
		"\u203e\u0005$\u0000\u0000\u2039\u203e\u0005,\u0000\u0000\u203a\u203e\u0005"+
		"C\u0000\u0000\u203b\u203e\u0005\u0138\u0000\u0000\u203c\u203e\u0005\u012a"+
		"\u0000\u0000\u203d\u2001\u0001\u0000\u0000\u0000\u203d\u2002\u0001\u0000"+
		"\u0000\u0000\u203d\u2003\u0001\u0000\u0000\u0000\u203d\u2004\u0001\u0000"+
		"\u0000\u0000\u203d\u2005\u0001\u0000\u0000\u0000\u203d\u2006\u0001\u0000"+
		"\u0000\u0000\u203d\u2007\u0001\u0000\u0000\u0000\u203d\u2008\u0001\u0000"+
		"\u0000\u0000\u203d\u2009\u0001\u0000\u0000\u0000\u203d\u200a\u0001\u0000"+
		"\u0000\u0000\u203d\u200b\u0001\u0000\u0000\u0000\u203d\u200c\u0001\u0000"+
		"\u0000\u0000\u203d\u200d\u0001\u0000\u0000\u0000\u203d\u200e\u0001\u0000"+
		"\u0000\u0000\u203d\u200f\u0001\u0000\u0000\u0000\u203d\u2010\u0001\u0000"+
		"\u0000\u0000\u203d\u2011\u0001\u0000\u0000\u0000\u203d\u2012\u0001\u0000"+
		"\u0000\u0000\u203d\u2013\u0001\u0000\u0000\u0000\u203d\u2017\u0001\u0000"+
		"\u0000\u0000\u203d\u2018\u0001\u0000\u0000\u0000\u203d\u2019\u0001\u0000"+
		"\u0000\u0000\u203d\u201a\u0001\u0000\u0000\u0000\u203d\u201e\u0001\u0000"+
		"\u0000\u0000\u203d\u201f\u0001\u0000\u0000\u0000\u203d\u2020\u0001\u0000"+
		"\u0000\u0000\u203d\u2021\u0001\u0000\u0000\u0000\u203d\u2022\u0001\u0000"+
		"\u0000\u0000\u203d\u2023\u0001\u0000\u0000\u0000\u203d\u2024\u0001\u0000"+
		"\u0000\u0000\u203d\u2025\u0001\u0000\u0000\u0000\u203d\u2026\u0001\u0000"+
		"\u0000\u0000\u203d\u2027\u0001\u0000\u0000\u0000\u203d\u2028\u0001\u0000"+
		"\u0000\u0000\u203d\u2029\u0001\u0000\u0000\u0000\u203d\u202a\u0001\u0000"+
		"\u0000\u0000\u203d\u202b\u0001\u0000\u0000\u0000\u203d\u202c\u0001\u0000"+
		"\u0000\u0000\u203d\u202d\u0001\u0000\u0000\u0000\u203d\u202e\u0001\u0000"+
		"\u0000\u0000\u203d\u202f\u0001\u0000\u0000\u0000\u203d\u2030\u0001\u0000"+
		"\u0000\u0000\u203d\u2031\u0001\u0000\u0000\u0000\u203d\u2032\u0001\u0000"+
		"\u0000\u0000\u203d\u2033\u0001\u0000\u0000\u0000\u203d\u2034\u0001\u0000"+
		"\u0000\u0000\u203d\u2035\u0001\u0000\u0000\u0000\u203d\u2036\u0001\u0000"+
		"\u0000\u0000\u203d\u2037\u0001\u0000\u0000\u0000\u203d\u2038\u0001\u0000"+
		"\u0000\u0000\u203d\u2039\u0001\u0000\u0000\u0000\u203d\u203a\u0001\u0000"+
		"\u0000\u0000\u203d\u203b\u0001\u0000\u0000\u0000\u203d\u203c\u0001\u0000"+
		"\u0000\u0000\u203e\u041f\u0001\u0000\u0000\u0000\u203f\u2043\u0005\u028f"+
		"\u0000\u0000\u2040\u2041\u0005\u0290\u0000\u0000\u2041\u2043\u0005\u027f"+
		"\u0000\u0000\u2042\u203f\u0001\u0000\u0000\u0000\u2042\u2040\u0001\u0000"+
		"\u0000\u0000\u2043\u204c\u0001\u0000\u0000\u0000\u2044\u2046\u0005\u00e1"+
		"\u0000\u0000\u2045\u2044\u0001\u0000\u0000\u0000\u2045\u2046\u0001\u0000"+
		"\u0000\u0000\u2046\u204a\u0001\u0000\u0000\u0000\u2047\u204b\u0005\u028f"+
		"\u0000\u0000\u2048\u2049\u0005\u0290\u0000\u0000\u2049\u204b\u0005\u027f"+
		"\u0000\u0000\u204a\u2047\u0001\u0000\u0000\u0000\u204a\u2048\u0001\u0000"+
		"\u0000\u0000\u204b\u204d\u0001\u0000\u0000\u0000\u204c\u2045\u0001\u0000"+
		"\u0000\u0000\u204c\u204d\u0001\u0000\u0000\u0000\u204d\u2052\u0001\u0000"+
		"\u0000\u0000\u204e\u204f\u0005\u027e\u0000\u0000\u204f\u2051\u0003\u0422"+
		"\u0211\u0000\u2050\u204e\u0001\u0000\u0000\u0000\u2051\u2054\u0001\u0000"+
		"\u0000\u0000\u2052\u2050\u0001\u0000\u0000\u0000\u2052\u2053\u0001\u0000"+
		"\u0000\u0000\u2053\u0421\u0001\u0000\u0000\u0000\u2054\u2052\u0001\u0000"+
		"\u0000\u0000\u2055\u2056\u0003\u0408\u0204\u0000\u2056\u2057\u0003\u040e"+
		"\u0207\u0000\u2057\u205a\u0001\u0000\u0000\u0000\u2058\u205a\u0003\u0408"+
		"\u0204\u0000\u2059\u2055\u0001\u0000\u0000\u0000\u2059\u2058\u0001\u0000"+
		"\u0000\u0000\u205a\u0423\u0001\u0000\u0000\u0000\u205b\u205c\u0003\u0408"+
		"\u0204\u0000\u205c\u0425\u0001\u0000\u0000\u0000\u205d\u2060\u0005\u0206"+
		"\u0000\u0000\u205e\u2061\u0003\u042c\u0216\u0000\u205f\u2061\u0003\u0420"+
		"\u0210\u0000\u2060\u205e\u0001\u0000\u0000\u0000\u2060\u205f\u0001\u0000"+
		"\u0000\u0000\u2061\u2066\u0001\u0000\u0000\u0000\u2062\u2063\u0005\u0017"+
		"\u0000\u0000\u2063\u2064\u0005\u0205\u0000\u0000\u2064\u2065\u0005\u025c"+
		"\u0000\u0000\u2065\u2067\u0003\u042c\u0216\u0000\u2066\u2062\u0001\u0000"+
		"\u0000\u0000\u2066\u2067\u0001\u0000\u0000\u0000\u2067\u209c\u0001\u0000"+
		"\u0000\u0000\u2068\u206c\u0005\u00f1\u0000\u0000\u2069\u206d\u0003\u042c"+
		"\u0216\u0000\u206a\u206d\u0003\u0420\u0210\u0000\u206b\u206d\u0003\u0422"+
		"\u0211\u0000\u206c\u2069\u0001\u0000\u0000\u0000\u206c\u206a\u0001\u0000"+
		"\u0000\u0000\u206c\u206b\u0001\u0000\u0000\u0000\u206d\u206e\u0001\u0000"+
		"\u0000\u0000\u206e\u207c\u0007m\u0000\u0000\u206f\u2072\u0005\u0285\u0000"+
		"\u0000\u2070\u2073\u0005\u027f\u0000\u0000\u2071\u2073\u0003\u0420\u0210"+
		"\u0000\u2072\u2070\u0001\u0000\u0000\u0000\u2072\u2071\u0001\u0000\u0000"+
		"\u0000\u2073\u2079\u0001\u0000\u0000\u0000\u2074\u2077\u0005\u028b\u0000"+
		"\u0000\u2075\u2078\u0005\u027f\u0000\u0000\u2076\u2078\u0003\u0420\u0210"+
		"\u0000\u2077\u2075\u0001\u0000\u0000\u0000\u2077\u2076\u0001\u0000\u0000"+
		"\u0000\u2078\u207a\u0001\u0000\u0000\u0000\u2079\u2074\u0001\u0000\u0000"+
		"\u0000\u2079\u207a\u0001\u0000\u0000\u0000\u207a\u207b\u0001\u0000\u0000"+
		"\u0000\u207b\u207d\u0005\u0286\u0000\u0000\u207c\u206f\u0001\u0000\u0000"+
		"\u0000\u207c\u207d\u0001\u0000\u0000\u0000\u207d\u208d\u0001\u0000\u0000"+
		"\u0000\u207e\u208b\u0005\u020e\u0000\u0000\u207f\u208c\u0005r\u0000\u0000"+
		"\u2080\u208c\u0005\u00d2\u0000\u0000\u2081\u208c\u0005\u0128\u0000\u0000"+
		"\u2082\u2089\u0005\u01c8\u0000\u0000\u2083\u2086\u0005\u0285\u0000\u0000"+
		"\u2084\u2087\u0005\u027f\u0000\u0000\u2085\u2087\u0003\u0420\u0210\u0000"+
		"\u2086\u2084\u0001\u0000\u0000\u0000\u2086\u2085\u0001\u0000\u0000\u0000"+
		"\u2087\u2088\u0001\u0000\u0000\u0000\u2088\u208a\u0005\u0286\u0000\u0000"+
		"\u2089\u2083\u0001\u0000\u0000\u0000\u2089\u208a\u0001\u0000\u0000\u0000"+
		"\u208a\u208c\u0001\u0000\u0000\u0000\u208b\u207f\u0001\u0000\u0000\u0000"+
		"\u208b\u2080\u0001\u0000\u0000\u0000\u208b\u2081\u0001\u0000\u0000\u0000"+
		"\u208b\u2082\u0001\u0000\u0000\u0000\u208c\u208e\u0001\u0000\u0000\u0000"+
		"\u208d\u207e\u0001\u0000\u0000\u0000\u208d\u208e\u0001\u0000\u0000\u0000"+
		"\u208e\u209c\u0001\u0000\u0000\u0000\u208f\u209c\u0003\u0428\u0214\u0000"+
		"\u2090\u2091\u0005q\u0000\u0000\u2091\u209c\u0003\u042c\u0216\u0000\u2092"+
		"\u209c\u0003\u042c\u0216\u0000\u2093\u209c\u0005\u0155\u0000\u0000\u2094"+
		"\u209c\u0005\u0217\u0000\u0000\u2095\u209c\u0005\u00b1\u0000\u0000\u2096"+
		"\u209c\u0005t\u0000\u0000\u2097\u209c\u0005\u01d3\u0000\u0000\u2098\u209c"+
		"\u0005\u0129\u0000\u0000\u2099\u209c\u0005\u0120\u0000\u0000\u209a\u209c"+
		"\u0005\u0080\u0000\u0000\u209b\u205d\u0001\u0000\u0000\u0000\u209b\u2068"+
		"\u0001\u0000\u0000\u0000\u209b\u208f\u0001\u0000\u0000\u0000\u209b\u2090"+
		"\u0001\u0000\u0000\u0000\u209b\u2092\u0001\u0000\u0000\u0000\u209b\u2093"+
		"\u0001\u0000\u0000\u0000\u209b\u2094\u0001\u0000\u0000\u0000\u209b\u2095"+
		"\u0001\u0000\u0000\u0000\u209b\u2096\u0001\u0000\u0000\u0000\u209b\u2097"+
		"\u0001\u0000\u0000\u0000\u209b\u2098\u0001\u0000\u0000\u0000\u209b\u2099"+
		"\u0001\u0000\u0000\u0000\u209b\u209a\u0001\u0000\u0000\u0000\u209c\u0427"+
		"\u0001\u0000\u0000\u0000\u209d\u209e\u0007n\u0000\u0000\u209e\u0429\u0001"+
		"\u0000\u0000\u0000\u209f\u20a0\u0005\u028a\u0000\u0000\u20a0\u20a1\u0003"+
		"\u0428\u0214\u0000\u20a1\u042b\u0001\u0000\u0000\u0000\u20a2\u20a3\u0007"+
		"o\u0000\u0000\u20a3\u042d\u0001\u0000\u0000\u0000\u20a4\u20a5\u0003\u0408"+
		"\u0204\u0000\u20a5\u042f\u0001\u0000\u0000\u0000\u20a6\u20a9\u0003\u043c"+
		"\u021e\u0000\u20a7\u20a9\u0005\u0282\u0000\u0000\u20a8\u20a6\u0001\u0000"+
		"\u0000\u0000\u20a8\u20a7\u0001\u0000\u0000\u0000\u20a9\u0431\u0001\u0000"+
		"\u0000\u0000\u20aa\u20b2\u0005\u0295\u0000\u0000\u20ab\u20ac\u0005\u0293"+
		"\u0000\u0000\u20ac\u20b2\u0005\u0299\u0000\u0000\u20ad\u20ae\u0005\u0298"+
		"\u0000\u0000\u20ae\u20b2\u0005\u029c\u0000\u0000\u20af\u20b0\u0005\u0296"+
		"\u0000\u0000\u20b0\u20b2\u0005\u029c\u0000\u0000\u20b1\u20aa\u0001\u0000"+
		"\u0000\u0000\u20b1\u20ab\u0001\u0000\u0000\u0000\u20b1\u20ad\u0001\u0000"+
		"\u0000\u0000\u20b1\u20af\u0001\u0000\u0000\u0000\u20b2\u0433\u0001\u0000"+
		"\u0000\u0000\u20b3\u20b7\u0005\u0294\u0000\u0000\u20b4\u20b5\u0005\u0299"+
		"\u0000\u0000\u20b5\u20b7\u0005\u029c\u0000\u0000\u20b6\u20b3\u0001\u0000"+
		"\u0000\u0000\u20b6\u20b4\u0001\u0000\u0000\u0000\u20b7\u0435\u0001\u0000"+
		"\u0000\u0000\u20b8\u20bc\u0005\u0292\u0000\u0000\u20b9\u20ba\u0005\u0293"+
		"\u0000\u0000\u20ba\u20bc\u0005\u029c\u0000\u0000\u20bb\u20b8\u0001\u0000"+
		"\u0000\u0000\u20bb\u20b9\u0001\u0000\u0000\u0000\u20bc\u0437\u0001\u0000"+
		"\u0000\u0000\u20bd\u20c1\u0005\u029a\u0000\u0000\u20be\u20bf\u0005\u029b"+
		"\u0000\u0000\u20bf\u20c1\u0005\u029b\u0000\u0000\u20c0\u20bd\u0001\u0000"+
		"\u0000\u0000\u20c0\u20be\u0001\u0000\u0000\u0000\u20c1\u0439\u0001\u0000"+
		"\u0000\u0000\u20c2\u20c3\u0005\u0285\u0000\u0000\u20c3\u20c4\u0005\u0289"+
		"\u0000\u0000\u20c4\u20c5\u0005\u0286\u0000\u0000\u20c5\u043b\u0001\u0000"+
		"\u0000\u0000\u20c6\u20c7\u0007p\u0000\u0000\u20c7\u043d\u0001\u0000\u0000"+
		"\u0000\u04d3\u0441\u0446\u044d\u0452\u0456\u045a\u045c\u0462\u0465\u0468"+
		"\u0488\u048e\u0493\u0495\u04a4\u04ac\u04af\u04b2\u04b5\u04b8\u04ba\u04c1"+
		"\u04c3\u04c7\u04cd\u04d0\u04d4\u04d9\u04e7\u04ed\u04f2\u04f7\u04fc\u0501"+
		"\u0503\u0505\u050e\u0513\u0517\u051d\u0522\u0526\u052e\u0537\u0540\u0549"+
		"\u054c\u054f\u0554\u0559\u055c\u055f\u0562\u0567\u056c\u0572\u0578\u057c"+
		"\u0580\u0586\u058e\u0591\u0596\u059b\u05a4\u05ab\u05ad\u05b4\u05bd\u05bf"+
		"\u05c3\u05c7\u05cb\u05cf\u05d3\u05d7\u05dc\u05de\u05e4\u05e6\u05f5\u05f7"+
		"\u05fb\u0602\u0607\u060b\u0613\u061c\u0625\u0629\u0632\u0636\u063a\u0654"+
		"\u0657\u065a\u0664\u066c\u0672\u0676\u067a\u0681\u0686\u068a\u068d\u0691"+
		"\u069a\u06a4\u06a9\u06ab\u06b3\u06b5\u06b7\u06ba\u06c3\u06cb\u06d2\u06db"+
		"\u06e0\u06ea\u06ef\u06f3\u06f7\u06fe\u0703\u0707\u0710\u0714\u0718\u071c"+
		"\u071e\u0720\u0723\u0727\u072d\u0731\u0735\u0737\u0739\u073c\u0740\u0748"+
		"\u074d\u0753\u0757\u075b\u075e\u0761\u0765\u0768\u076e\u0773\u0777\u077b"+
		"\u077f\u0783\u0785\u0787\u078b\u078f\u0797\u079c\u07a2\u07a6\u07aa\u07ad"+
		"\u07b0\u07b4\u07b7\u07bd\u07c0\u07c7\u07cc\u07d5\u07de\u07e2\u07e6\u07ea"+
		"\u07ee\u07f1\u07f6\u07fc\u0800\u0805\u0809\u080d\u0811\u0816\u081d\u0821"+
		"\u0824\u0828\u082b\u0832\u0836\u0844\u084a\u084c\u0852\u0858\u085b\u085e"+
		"\u0861\u0864\u086b\u086e\u0871\u0876\u0878\u087b\u087e\u0881\u0888\u088c"+
		"\u0891\u0894\u0898\u089d\u08a2\u08a5\u08a8\u08ab\u08ad\u08b2\u08b6\u08ba"+
		"\u08c3\u08c7\u08c9\u08cd\u08d1\u08d8\u08dd\u08e2\u08ef\u08f2\u08f9\u0900"+
		"\u0913\u0919\u091e\u0923\u0925\u092b\u0931\u0936\u093a\u093e\u0945\u094d"+
		"\u0951\u0957\u095b\u0965\u0967\u0970\u0972\u0988\u098f\u0991\u0997\u099f"+
		"\u09a2\u09a9\u09ae\u09b5\u09bb\u09c1\u09c4\u09c7\u09d3\u09d5\u09d9\u09dd"+
		"\u09e0\u09e6\u09ea\u09ed\u09f2\u09f5\u09fa\u09fe\u0a01\u0a09\u0a0c\u0a17"+
		"\u0a1c\u0a23\u0a26\u0a2f\u0a31\u0a3b\u0a40\u0a44\u0a49\u0a4d\u0a54\u0a5a"+
		"\u0a5d\u0a73\u0a76\u0a78\u0a7a\u0a82\u0a89\u0a8b\u0a8f\u0a94\u0a97\u0a9a"+
		"\u0a9d\u0aa2\u0aa7\u0ab1\u0ab3\u0ac0\u0ac2\u0ac4\u0ac8\u0acc\u0acf\u0ad6"+
		"\u0adb\u0ae2\u0ae8\u0aea\u0af0\u0af4\u0afb\u0b00\u0b0c\u0b1a\u0b1f\u0b23"+
		"\u0b25\u0b29\u0b2d\u0b34\u0b3d\u0b42\u0b47\u0b4a\u0b4e\u0b52\u0b54\u0b59"+
		"\u0b63\u0b67\u0b6e\u0b72\u0b77\u0b7c\u0b7f\u0b89\u0b97\u0b9c\u0ba0\u0ba2"+
		"\u0ba7\u0bab\u0bb0\u0bb9\u0bc2\u0bc8\u0bcd\u0bd0\u0bd5\u0bd8\u0bdd\u0bdf"+
		"\u0be4\u0be8\u0bec\u0bf0\u0bf4\u0bf8\u0bfb\u0c09\u0c0e\u0c12\u0c15\u0c19"+
		"\u0c1f\u0c24\u0c27\u0c2c\u0c2f\u0c34\u0c36\u0c3b\u0c3d\u0c45\u0c4a\u0c4e"+
		"\u0c59\u0c5d\u0c62\u0c68\u0c6e\u0c73\u0c76\u0c7b\u0c7e\u0c83\u0c85\u0c8a"+
		"\u0c8c\u0c96\u0c9c\u0ca0\u0caa\u0caf\u0cb3\u0cb7\u0cc1\u0cc6\u0cc8\u0ccc"+
		"\u0cd4\u0cd7\u0cda\u0cdd\u0ce1\u0ce8\u0cf3\u0cf8\u0cfc\u0d01\u0d05\u0d0b"+
		"\u0d0e\u0d11\u0d14\u0d17\u0d1a\u0d1d\u0d24\u0d27\u0d2a\u0d2f\u0d31\u0d34"+
		"\u0d37\u0d3a\u0d48\u0d4c\u0d52\u0d54\u0d5e\u0d62\u0d65\u0d68\u0d6e\u0d71"+
		"\u0d74\u0d77\u0d7a\u0d7d\u0d80\u0d87\u0d8a\u0d8d\u0d92\u0d94\u0d97\u0d9a"+
		"\u0da0\u0daa\u0db2\u0db6\u0dbf\u0dcc\u0ddf\u0de1\u0de4\u0de8\u0dee\u0df2"+
		"\u0df7\u0dfe\u0e02\u0e05\u0e10\u0e12\u0e15\u0e1b\u0e1f\u0e27\u0e2f\u0e35"+
		"\u0e38\u0e3d\u0e41\u0e45\u0e4d\u0e4f\u0e51\u0e56\u0e5a\u0e5e\u0e62\u0e65"+
		"\u0e6a\u0e6d\u0e73\u0e7a\u0e7e\u0e85\u0e89\u0e92\u0e96\u0ea1\u0ea3\u0eb0"+
		"\u0eb3\u0eb6\u0ebb\u0ebd\u0ec3\u0ecd\u0ed0\u0ed2\u0ed6\u0eda\u0ede\u0ee1"+
		"\u0ee3\u0ee9\u0eeb\u0eee\u0ef3\u0ef8\u0efe\u0f02\u0f0c\u0f0e\u0f12\u0f16"+
		"\u0f1b\u0f20\u0f24\u0f29\u0f30\u0f38\u0f3d\u0f41\u0f46\u0f48\u0f50\u0f55"+
		"\u0f59\u0f5e\u0f60\u0f65\u0f6c\u0f70\u0f74\u0fa1\u0fa4\u0fa9\u0fab\u0fb6"+
		"\u0fbb\u0fc0\u0fc5\u0fc7\u0fd1\u0fd6\u0fde\u0fe0\u0fe4\u0fe8\u0fed\u0ff2"+
		"\u0ff7\u0ffb\u1009\u100e\u1011\u1017\u1020\u102e\u1036\u103f\u1042\u1047"+
		"\u104c\u1051\u1056\u105e\u1065\u1067\u106b\u1071\u1076\u1081\u108b\u1090"+
		"\u109c\u10a1\u10a6\u10a9\u10b7\u10c2\u10c7\u10cc\u10d1\u10d3\u10dd\u10e2"+
		"\u10e5\u10e9\u10ee\u10f4\u1103\u1108\u110d\u110f\u1114\u111b\u111e\u1121"+
		"\u1124\u112e\u113a\u113e\u1141\u114a\u1152\u115a\u115d\u1164\u1168\u116f"+
		"\u1175\u119e\u11ba\u11c1\u11c6\u11d1\u11d4\u11df\u11e7\u11eb\u11f5\u11f8"+
		"\u11fc\u11ff\u1204\u1209\u120d\u1217\u1221\u1227\u1232\u1237\u123b\u1243"+
		"\u124b\u1250\u1253\u1255\u1258\u1261\u1266\u126b\u126e\u1271\u1275\u1278"+
		"\u1280\u1285\u128a\u1291\u129b\u12ab\u12b1\u12bb\u12c5\u12cc\u12d1\u12d7"+
		"\u12e1\u12e6\u12ed\u12f2\u12f8\u12fb\u12fe\u130f\u1314\u131d\u1322\u1328"+
		"\u132b\u1332\u1335\u133c\u1341\u1345\u134a\u134f\u1359\u135f\u1369\u136e"+
		"\u1375\u137b\u137f\u1382\u1385\u1396\u139b\u13a3\u13b1\u13b8\u13c7\u13ce"+
		"\u13d0\u13e3\u13f3\u13fc\u1401\u1405\u1408\u1412\u141e\u1424\u142c\u1430"+
		"\u1433\u1441\u1445\u144a\u144d\u145a\u145e\u146a\u146f\u1473\u1477\u147d"+
		"\u1480\u1483\u149e\u14a4\u14a8\u14ae\u14ba\u14c3\u14c5\u14cb\u14cf\u14d2"+
		"\u14db\u14e6\u14ea\u14ed\u14f1\u14f9\u1502\u150b\u150d\u151b\u152f\u1533"+
		"\u153a\u153e\u1542\u1546\u1552\u1556\u1564\u156a\u1571\u1576\u1580\u1586"+
		"\u1588\u1591\u159b\u15a0\u15af\u15b3\u15b6\u15ba\u15c2\u15c4\u15c8\u15d0"+
		"\u15d7\u15dc\u15de\u15e3\u15e8\u15f0\u15f7\u15fb\u15fe\u160a\u1610\u1618"+
		"\u1622\u162d\u1630\u1637\u163a\u1641\u164c\u1652\u1656\u1660\u1663\u1669"+
		"\u1674\u1676\u1678\u167b\u167f\u1682\u1686\u168a\u168f\u169a\u169e\u16a6"+
		"\u16a9\u16b3\u16b8\u16be\u16c2\u16c5\u16cd\u16d0\u16d4\u16d8\u16dd\u16e0"+
		"\u16e4\u16e8\u16ec\u16f8\u1708\u170e\u1712\u1717\u171b\u1722\u1726\u1729"+
		"\u172c\u172f\u1733\u1735\u1739\u173e\u1740\u174b\u174d\u1755\u175b\u1762"+
		"\u1769\u176d\u176f\u1775\u177b\u1782\u1785\u1788\u178d\u1791\u179d\u17a4"+
		"\u17a9\u17ab\u17ad\u17bb\u17be\u17c8\u17cc\u17d4\u17e0\u17ea\u17ef\u17f9"+
		"\u1801\u1804\u180a\u180e\u1813\u181d\u1822\u182f\u183b\u1840\u184a\u184f"+
		"\u1851\u1856\u185a\u1860\u1864\u1871\u1877\u1880\u188d\u1895\u189e\u18a2"+
		"\u18a7\u18b2\u18b4\u18c4\u18c9\u18cf\u18d5\u18e7\u18ee\u18f1\u18f9\u1902"+
		"\u1904\u1908\u190b\u1910\u1912\u1916\u1922\u192b\u1933\u1938\u193c\u1941"+
		"\u1944\u194c\u1954\u195d\u1960\u1963\u1966\u196e\u1978\u1982\u1986\u198a"+
		"\u198d\u1990\u1995\u199a\u199d\u19a0\u19a6\u19a9\u19af\u19b2\u19b5\u19ba"+
		"\u19bd\u19c5\u19cb\u19d0\u19d8\u19df\u19e9\u19ed\u19ef\u19f2\u19fe\u1a02"+
		"\u1a05\u1a14\u1a19\u1a20\u1a23\u1a2c\u1a33\u1a38\u1a3c\u1a44\u1a4a\u1a52"+
		"\u1a55\u1a5d\u1a65\u1a68\u1a6b\u1a74\u1a7a\u1a80\u1a82\u1a8f\u1a91\u1a9a"+
		"\u1a9c\u1aa0\u1aa6\u1aaa\u1ab8\u1abe\u1acf\u1ad3\u1ae9\u1af1\u1af5\u1afb"+
		"\u1b00\u1b03\u1b05\u1b09\u1b14\u1b18\u1b1f\u1b24\u1b32\u1b45\u1b59\u1b5c"+
		"\u1b5e\u1b60\u1b68\u1b70\u1b77\u1b7b\u1b84\u1b89\u1b8d\u1b95\u1b99\u1ba0"+
		"\u1ba9\u1bb7\u1bc4\u1bc9\u1bde\u1be7\u1bec\u1bef\u1bf6\u1bf9\u1bfd\u1c00"+
		"\u1c07\u1c0a\u1c10\u1c13\u1c17\u1c1a\u1c21\u1c26\u1c38\u1c3a\u1c3e\u1c46"+
		"\u1c52\u1c59\u1c64\u1c6c\u1c7b\u1c7f\u1c88\u1c8e\u1c96\u1c9f\u1caa\u1cae"+
		"\u1cb1\u1cc1\u1cc7\u1cd1\u1cd9\u1cdc\u1cdf\u1ce8\u1ced\u1cf6\u1cfc\u1d01"+
		"\u1d04\u1d09\u1d0e\u1d12\u1d18\u1d1e\u1d27\u1d2c\u1d34\u1d38\u1d3d\u1d43"+
		"\u1d4a\u1d4f\u1d56\u1d5a\u1d5f\u1d67\u1d6a\u1d6d\u1d70\u1d74\u1d79\u1d7e"+
		"\u1d82\u1d89\u1d8e\u1d90\u1d97\u1d9d\u1da3\u1da6\u1daa\u1dac\u1db7\u1dbb"+
		"\u1dbd\u1dc8\u1dd3\u1ddc\u1ddf\u1de3\u1de6\u1dea\u1df7\u1dfc\u1e04\u1e0b"+
		"\u1e10\u1e14\u1e19\u1e1e\u1e21\u1e28\u1e32\u1e3a\u1e3e\u1e48\u1e4b\u1e4d"+
		"\u1e57\u1e59\u1e5f\u1e65\u1e67\u1e75\u1e77\u1e7f\u1e88\u1e91\u1e9b\u1e9f"+
		"\u1ea4\u1ea8\u1eab\u1eae\u1eb2\u1eb9\u1ec5\u1ed0\u1ed3\u1ed7\u1eea\u1eef"+
		"\u1ef6\u1f03\u1f0d\u1f12\u1f1b\u1f23\u1f2b\u1f31\u1f36\u1f3b\u1f3f\u1f45"+
		"\u1f49\u1f4e\u1f57\u1f60\u1f67\u1f73\u1f77\u1f7d\u1f82\u1f87\u1f89\u1f8e"+
		"\u1f92\u1f97\u1f9e\u1fa3\u1fa5\u1fa7\u1fb1\u1fb6\u1fba\u1fbd\u1fc1\u1fca"+
		"\u1fd0\u1fd4\u1fd6\u1fda\u1fde\u1fe2\u1fea\u1ff2\u1ff4\u1ffa\u1ffd\u2015"+
		"\u201c\u203d\u2042\u2045\u204a\u204c\u2052\u2059\u2060\u2066\u206c\u2072"+
		"\u2077\u2079\u207c\u2086\u2089\u208b\u208d\u209b\u20a8\u20b1\u20b6\u20bb"+
		"\u20c0";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}